{"version":3,"file":"context.js","sources":["../../../src/smart-components/MessageSearch/context/dux/actionTypes.ts","../../../src/smart-components/MessageSearch/context/dux/reducers.ts","../../../src/smart-components/MessageSearch/context/dux/initialState.ts","../../../src/smart-components/MessageSearch/context/hooks/useSetChannel.ts","../../../src/smart-components/MessageSearch/context/hooks/useGetSearchedMessages.ts","../../../src/smart-components/MessageSearch/context/hooks/useScrollCallback.ts","../../../src/smart-components/MessageSearch/context/hooks/useSearchStringEffect.ts","../../../src/smart-components/MessageSearch/context/MessageSearchProvider.tsx"],"sourcesContent":["export const GET_SEARCHED_MESSAGES = 'GET_SEARCHED_MESSAGES';\nexport const GET_NEXT_SEARCHED_MESSAGES = 'GET_NEXT_SEARCHED_MESSAGES';\nexport const START_MESSAGE_SEARCH = 'START_MESSAGE_SEARCH';\nexport const START_GETTING_SEARCHED_MESSAGES = 'START_GETTING_SEARCHED_MESSAGES';\nexport const SET_QUERY_INVALID = 'SET_QUERY_INVALID';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const CHANNEL_INVALID = 'CHANNEL_INVALID';\nexport const RESET_SEARCH_STRING = 'RESET_SEARCH_STRING';\n","import { State as initialStateInterface } from './initialState';\nimport type { MessageSearchQuery } from '@sendbird/chat/message';\nimport * as actionTypes from './actionTypes';\n\ninterface MessageSearchQueryType extends MessageSearchQuery {\n  key?: string;\n}\ninterface ActionInterface {\n  type: string;\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  payload?: any;\n}\n\nexport default function reducer(\n  state: initialStateInterface,\n  action: ActionInterface,\n): initialStateInterface {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      const currentChannel = action.payload;\n      return {\n        ...state,\n        currentChannel,\n        initialized: true,\n      };\n    }\n    case actionTypes.CHANNEL_INVALID: {\n      return {\n        ...state,\n        currentChannel: null,\n        initialized: false,\n      };\n    }\n    case actionTypes.GET_SEARCHED_MESSAGES: {\n      const { messages, createdQuery } = action.payload;\n      if (\n        createdQuery\n        && createdQuery.channelUrl === (state?.currentMessageSearchQuery as MessageSearchQueryType).channelUrl\n        && createdQuery.key === (state?.currentMessageSearchQuery as MessageSearchQueryType).key\n      ) {\n        return {\n          ...state,\n          loading: false,\n          isInvalid: false,\n          allMessages: [...messages],\n          hasMoreResult: (state?.currentMessageSearchQuery as MessageSearchQueryType).hasNext,\n        };\n      }\n      return { ...state };\n    }\n    case actionTypes.SET_QUERY_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      }\n    }\n    case actionTypes.START_MESSAGE_SEARCH: {\n      return {\n        ...state,\n        isInvalid: false,\n        loading: false,\n      }\n    }\n    case actionTypes.START_GETTING_SEARCHED_MESSAGES: {\n      const currentMessageSearchQuery = action.payload;\n      return {\n        ...state,\n        loading: true,\n        currentMessageSearchQuery,\n      };\n    }\n    case actionTypes.GET_NEXT_SEARCHED_MESSAGES: {\n      const messages = action.payload;\n      return {\n        ...state,\n        allMessages: [...state.allMessages, ...messages],\n        hasMoreResult: (state?.currentMessageSearchQuery as MessageSearchQuery).hasNext,\n      };\n    }\n    case actionTypes.RESET_SEARCH_STRING: {\n      return {\n        ...state,\n        allMessages: [],\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import type { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { MessageSearchQuery } from '@sendbird/chat/message';\nimport {\n  ClientFileMessage,\n  ClientUserMessage,\n} from '../../../../types';\n\nexport interface State {\n  allMessages: Array<ClientFileMessage | ClientUserMessage>;\n  loading: boolean;\n  isInvalid: boolean;\n  initialized: boolean;\n  currentChannel: GroupChannel;\n  currentMessageSearchQuery: MessageSearchQuery;\n  hasMoreResult: boolean;\n}\n\nconst initialState: State = {\n  allMessages: [],\n  loading: false,\n  isInvalid: false,\n  initialized: false,\n  currentChannel: null,\n  currentMessageSearchQuery: null,\n  hasMoreResult: false,\n};\n\nexport default initialState;\n","import type { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { useEffect } from 'react';\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface MainProps {\n  channelUrl: string;\n  sdkInit: boolean;\n}\ninterface ToolProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSetChannel(\n  { channelUrl, sdkInit }: MainProps,\n  { sdk, logger, messageSearchDispatcher }: ToolProps,\n): void {\n  useEffect(() => {\n    if (channelUrl && sdkInit && (sdk?.groupChannel)) {\n      sdk.groupChannel.getChannel(channelUrl).then((groupChannel) => {\n        logger.info('MessageSearch | useSetChannel group channel', groupChannel);\n        messageSearchDispatcher({\n          type: messageActionTypes.SET_CURRENT_CHANNEL,\n          payload: groupChannel,\n        });\n      }).catch(() => {\n        messageSearchDispatcher({\n          type: messageActionTypes.CHANNEL_INVALID,\n          payload: null,\n        });\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\n\nimport type { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport type { MessageSearchQueryParams } from '@sendbird/chat/lib/__definition';\nimport type {\n  AdminMessage,\n  BaseMessage,\n  FileMessage,\n  MessageSearchQuery,\n  UserMessage,\n} from '@sendbird/chat/message';\nimport type { SendbirdError } from '@sendbird/chat';\n\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface MainProps {\n  currentChannel: GroupChannel;\n  channelUrl: string;\n  requestString?: string;\n  messageSearchQuery?: MessageSearchQuery;\n  onResultLoaded?: (\n    messages?: Array<BaseMessage | UserMessage | FileMessage | AdminMessage>,\n    error?: SendbirdError,\n  ) => void;\n  retryCount: number;\n}\ninterface ToolProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useGetSearchedMessages(\n  { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount }: MainProps,\n  { sdk, logger, messageSearchDispatcher }: ToolProps,\n): void {\n  useEffect(() => {\n    messageSearchDispatcher({\n      type: messageActionTypes.START_MESSAGE_SEARCH,\n      payload: null,\n    });\n    if (sdk && channelUrl && sdk.createMessageSearchQuery && currentChannel) {\n      if (requestString) {\n        const inputSearchMessageQueryObject: MessageSearchQueryParams = {\n          ...messageSearchQuery,\n          order: 'ts' as const,\n          channelUrl,\n          messageTimestampFrom: currentChannel.invitedAt,\n          keyword: requestString,\n        };\n        const createdQuery = sdk.createMessageSearchQuery(inputSearchMessageQueryObject);\n        createdQuery.next().then((messages) => {\n          logger.info('MessageSearch | useGetSearchedMessages: succeeded getting messages', messages);\n          messageSearchDispatcher({\n            type: messageActionTypes.GET_SEARCHED_MESSAGES,\n            payload: {\n              messages,\n              createdQuery,\n            },\n          });\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(messages, null);\n          }\n        }).catch((error) => {\n          logger.warning('MessageSearch | useGetSearchedMessages: getting failed', error);\n          messageSearchDispatcher({\n            type: messageActionTypes.SET_QUERY_INVALID,\n            payload: null,\n          });\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(null, error);\n          }\n        });\n        messageSearchDispatcher({\n          type: messageActionTypes.START_GETTING_SEARCHED_MESSAGES,\n          payload: createdQuery,\n        });\n      } else {\n        logger.info('MessageSearch | useGetSeasrchedMessages: search string is empty');\n      }\n    }\n  }, [channelUrl, messageSearchQuery, requestString, currentChannel, retryCount]);\n}\n\nexport default useGetSearchedMessages;\n","import type { SendbirdError } from '@sendbird/chat';\nimport type { AdminMessage, FileMessage, MessageSearchQuery, UserMessage } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\nimport { Logger } from '../../../../module';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface MainProps {\n  currentMessageSearchQuery: MessageSearchQuery;\n  hasMoreResult: boolean;\n  onResultLoaded?: (\n    messages?: Array<UserMessage | FileMessage | AdminMessage>,\n    error?: SendbirdError,\n  ) => void;\n}\n\ntype MessageSearchDispatcherType = { type: string, payload: any };\n\ninterface ToolProps {\n  logger: Logger;\n  messageSearchDispatcher: (payload: MessageSearchDispatcherType) => void;\n}\n\nexport type CallbackReturn = (\n  callback: (\n    messages: Array<UserMessage | FileMessage | AdminMessage>,\n    /* eslint-disable @typescript-eslint/no-explicit-any*/\n    error: any,\n  ) => void\n) => void;\n\nfunction useScrollCallback(\n  { currentMessageSearchQuery, hasMoreResult, onResultLoaded }: MainProps,\n  { logger, messageSearchDispatcher }: ToolProps,\n): CallbackReturn {\n  return useCallback((cb) => {\n    if (!hasMoreResult) {\n      logger.warning('MessageSearch | useScrollCallback: no more searched results', hasMoreResult);\n    }\n    if (currentMessageSearchQuery && currentMessageSearchQuery.hasNext) {\n      currentMessageSearchQuery.next().then((messages) => {\n        logger.info('MessageSearch | useScrollCallback: succeeded getting searched messages', messages);\n        messageSearchDispatcher({\n          type: messageActionTypes.GET_NEXT_SEARCHED_MESSAGES,\n          payload: messages,\n        });\n        cb(messages, null);\n        if (onResultLoaded && typeof onResultLoaded === 'function') {\n          onResultLoaded(messages, null);\n        }\n      }).catch((error) => {\n        logger.warning('MessageSearch | useScrollCallback: failed getting searched messages', error);\n        cb(null, error);\n        if (onResultLoaded && typeof onResultLoaded === 'function') {\n          onResultLoaded(null, error);\n        }\n      });\n    } else {\n      logger.warning('MessageSearch | useScrollCallback: no currentMessageSearchQuery');\n    }\n  }, [currentMessageSearchQuery, hasMoreResult]);\n}\n\nexport default useScrollCallback;\n","import { useState, useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  searchString: string;\n}\n\ninterface StaticParams {\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n}\n\nconst DEBOUNCING_TIME = 500;\n\nfunction useSearchStringEffect(\n  { searchString }: DynamicParams,\n  { messageSearchDispatcher }: StaticParams,\n): string {\n  const [requestString, setRequestString] = useState('');\n  const [debouncingTimer, setDebouncingTimer] = useState(null);\n  useEffect(() => {\n    clearTimeout(debouncingTimer);\n    if (searchString) {\n      setDebouncingTimer(\n        setTimeout(() => {\n          setRequestString(searchString);\n        }, DEBOUNCING_TIME)\n      );\n    } else {\n      setRequestString('');\n      messageSearchDispatcher({\n        type: messageActionTypes.RESET_SEARCH_STRING,\n        payload: '',\n      });\n    }\n  }, [searchString]);\n  return requestString;\n}\n\nexport default useSearchStringEffect;\n","import React, {\n  useRef,\n  useState,\n  useReducer,\n} from 'react';\nimport type { MessageSearchQuery } from '@sendbird/chat/message';\nimport type { GroupChannel } from '@sendbird/chat/groupChannel';\nimport type { MessageSearchQueryParams } from '@sendbird/chat/lib/__definition';\n\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { ClientSentMessages } from '../../../types';\n\nimport messageSearchReducer from './dux/reducers';\nimport messageSearchInitialState from './dux/initialState';\nimport { State as MessageSearchReducerState } from './dux/initialState';\n\nimport useSetChannel from './hooks/useSetChannel';\nimport useGetSearchMessages from './hooks/useGetSearchedMessages';\nimport useScrollCallback, {\n  CallbackReturn as UseScrollCallbackType,\n} from './hooks/useScrollCallback';\nimport useSearchStringEffect from './hooks/useSearchStringEffect';\n\nexport interface MessageSearchProviderProps {\n  channelUrl: string;\n  children?: React.ReactNode;\n  searchString?: string;\n  requestString?: string;\n  messageSearchQuery?: MessageSearchQueryParams;\n  onResultLoaded?(messages?: Array<ClientSentMessages>, error?: SendBird.SendBirdError): void;\n  onResultClick?(message: ClientSentMessages): void;\n}\n\ninterface MessageSearchProviderInterface extends MessageSearchProviderProps {\n  retryCount: number;\n  setRetryCount: React.Dispatch<React.SetStateAction<number>>;\n  selectedMessageId: number;\n  setSelectedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n  scrollRef: React.MutableRefObject<HTMLDivElement>;\n  allMessages: MessageSearchReducerState['allMessages'];\n  loading: boolean;\n  isInvalid: boolean;\n  currentChannel: GroupChannel;\n  currentMessageSearchQuery: MessageSearchQuery;\n  hasMoreResult: boolean;\n  onScroll: UseScrollCallbackType;\n  handleRetryToConnect: () => void;\n  handleOnScroll: (e: React.BaseSyntheticEvent) => void;\n}\n\nconst MessageSearchContext = React.createContext<MessageSearchProviderInterface|null>(undefined);\n\nconst MessageSearchProvider: React.FC<MessageSearchProviderProps> = (props: MessageSearchProviderProps) => {\n  const {\n    // message search props\n    channelUrl,\n    searchString,\n    messageSearchQuery,\n    onResultLoaded,\n    onResultClick,\n  } = props;\n\n  const globalState = useSendbirdStateContext();\n\n  // hook variables\n  const [retryCount, setRetryCount] = useState(0); // this is a trigger flag for activating useGetSearchMessages\n  const [selectedMessageId, setSelectedMessageId] = useState(0);\n  const [messageSearchStore, messageSearchDispatcher] = useReducer(messageSearchReducer, messageSearchInitialState);\n  const {\n    allMessages,\n    loading,\n    isInvalid,\n    currentChannel,\n    currentMessageSearchQuery,\n    hasMoreResult,\n  } = messageSearchStore;\n\n  const logger = globalState?.config?.logger;\n  const sdk = globalState?.stores?.sdkStore?.sdk;\n  const sdkInit = globalState?.stores?.sdkStore?.initialized;\n  const scrollRef = useRef(null);\n  const handleOnScroll = (e: React.BaseSyntheticEvent) => {\n    const scrollElement = e.target as HTMLDivElement;\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight,\n    } = scrollElement;\n\n    if (!hasMoreResult) {\n      return;\n    }\n    if (scrollTop + clientHeight >= scrollHeight) {\n      onScroll(() => {\n        // after load more searched messages\n      });\n    }\n  };\n\n  useSetChannel(\n    { channelUrl, sdkInit },\n    { sdk, logger, messageSearchDispatcher },\n  );\n\n  const requestString = useSearchStringEffect({ searchString }, { messageSearchDispatcher });\n\n  useGetSearchMessages(\n    { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount },\n    { sdk, logger, messageSearchDispatcher },\n  );\n\n  const onScroll = useScrollCallback(\n    { currentMessageSearchQuery, hasMoreResult, onResultLoaded },\n    { logger, messageSearchDispatcher },\n  );\n\n  const handleRetryToConnect = () => {\n    setRetryCount(retryCount + 1);\n  };\n  return (\n    <MessageSearchContext.Provider value={{\n      channelUrl,\n      searchString,\n      requestString,\n      messageSearchQuery,\n      onResultLoaded,\n      onResultClick,\n      retryCount,\n      setRetryCount,\n      selectedMessageId,\n      setSelectedMessageId,\n      messageSearchDispatcher,\n      allMessages,\n      loading,\n      isInvalid,\n      currentChannel,\n      currentMessageSearchQuery,\n      hasMoreResult,\n      onScroll,\n      scrollRef,\n      handleRetryToConnect,\n      handleOnScroll,\n    }}>\n      {props?.children}\n    </MessageSearchContext.Provider>\n  );\n}\n\nexport type UseMessageSearchType = () => MessageSearchProviderInterface;\nconst useMessageSearchContext: UseMessageSearchType = () => React.useContext(MessageSearchContext);\n\nexport {\n  MessageSearchProvider,\n  useMessageSearchContext,\n};\n"],"names":["GET_SEARCHED_MESSAGES","GET_NEXT_SEARCHED_MESSAGES","START_MESSAGE_SEARCH","START_GETTING_SEARCHED_MESSAGES","SET_QUERY_INVALID","SET_CURRENT_CHANNEL","CHANNEL_INVALID","RESET_SEARCH_STRING","reducer","state","action","type","actionTypes","currentChannel","payload","__assign","initialized","_a","messages","createdQuery","channelUrl","currentMessageSearchQuery","key","loading","isInvalid","allMessages","__spreadArray","hasMoreResult","hasNext","initialState","useSetChannel","_b","sdkInit","sdk","logger","messageSearchDispatcher","useEffect","groupChannel","getChannel","then","info","messageActionTypes","catch","useGetSearchedMessages","requestString","messageSearchQuery","onResultLoaded","retryCount","createMessageSearchQuery","inputSearchMessageQueryObject","order","messageTimestampFrom","invitedAt","keyword","createdQuery_1","next","error","warning","useScrollCallback","useCallback","cb","DEBOUNCING_TIME","useSearchStringEffect","searchString","_c","useState","setRequestString","_d","debouncingTimer","setDebouncingTimer","clearTimeout","setTimeout","MessageSearchContext","React","createContext","undefined","MessageSearchProvider","props","onResultClick","globalState","useSendbirdStateContext","_f","setRetryCount","_g","selectedMessageId","setSelectedMessageId","_h","useReducer","messageSearchReducer","messageSearchInitialState","messageSearchStore","config","stores","sdkStore","_e","scrollRef","useRef","handleOnScroll","e","scrollElement","target","scrollTop","scrollHeight","clientHeight","onScroll","useGetSearchMessages","handleRetryToConnect","children","useMessageSearchContext","useContext"],"mappings":"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"}