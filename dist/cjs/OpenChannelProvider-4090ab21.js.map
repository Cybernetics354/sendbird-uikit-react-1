{"version":3,"file":"OpenChannelProvider-4090ab21.js","sources":["../../src/smart-components/OpenChannel/context/utils.ts","../../src/smart-components/OpenChannel/context/dux/actionTypes.ts","../../src/smart-components/OpenChannel/context/dux/reducers.ts","../../src/smart-components/OpenChannel/context/dux/initialState.ts","../../src/smart-components/OpenChannel/context/hooks/useSetChannel.ts","../../src/smart-components/OpenChannel/context/hooks/useHandleChannelEvents.ts","../../src/smart-components/OpenChannel/context/hooks/useInitialMessagesFetch.ts","../../src/smart-components/OpenChannel/context/hooks/useScrollCallback.ts","../../src/smart-components/OpenChannel/context/hooks/useCheckScrollBottom.ts","../../src/smart-components/OpenChannel/context/hooks/useSendMessageCallback.ts","../../src/smart-components/OpenChannel/context/hooks/useFileUploadCallback.ts","../../src/smart-components/OpenChannel/context/hooks/useUpdateMessageCallback.ts","../../src/smart-components/OpenChannel/context/hooks/useDeleteMessageCallback.ts","../../src/smart-components/OpenChannel/context/hooks/useResendMessageCallback.ts","../../src/smart-components/OpenChannel/context/hooks/useTrimMessageList.ts","../../src/smart-components/OpenChannel/context/OpenChannelProvider.tsx"],"sourcesContent":["import type { User } from '@sendbird/chat';\nimport type { AdminMessage, FileMessage, UserMessage } from '@sendbird/chat/message';\nimport type { OpenChannel, ParticipantListQuery } from '@sendbird/chat/openChannel';\nimport format from 'date-fns/format';\n\nimport { Logger } from '../../../lib/SendbirdState';\n\nexport const getMessageCreatedAt = (message: UserMessage | FileMessage): string => format(message.createdAt, 'p');\n\nexport const shouldFetchMore = (messageLength: number, maxMessages: number): boolean => {\n  if (typeof maxMessages !== 'number') {\n    return true;\n  }\n\n  if (typeof maxMessages === 'number'\n    && maxMessages > messageLength\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport const scrollIntoLast = (intialTry = 0): void => {\n  const MAX_TRIES = 10;\n  const currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = document.querySelector('.sendbird-openchannel-conversation-scroll__container__item-container');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nexport const isSameGroup = (\n  message: AdminMessage | UserMessage | FileMessage,\n  comparingMessage: AdminMessage | UserMessage | FileMessage,\n): boolean => {\n  if (!(\n    message\n    && comparingMessage\n    && message?.messageType\n    && message.messageType !== 'admin'\n    && comparingMessage?.messageType\n    && comparingMessage.messageType !== 'admin'\n    && (message as UserMessage | FileMessage)?.sender\n    && (comparingMessage as UserMessage | FileMessage)?.sender\n    && message?.createdAt\n    && comparingMessage?.createdAt\n    && (message as UserMessage | FileMessage)?.sender?.userId\n    && (comparingMessage as UserMessage | FileMessage)?.sender?.userId\n  )) {\n    return false\n  }\n  // to fix typecasting\n  const message_ = message as UserMessage;\n  const comparingMessage_ = comparingMessage as UserMessage;\n  return (\n    message_?.sendingStatus === comparingMessage_?.sendingStatus\n    && message_?.sender?.userId === comparingMessage_?.sender?.userId\n    && (\n      getMessageCreatedAt(message as UserMessage | FileMessage) === getMessageCreatedAt(comparingMessage as UserMessage | FileMessage)\n    )\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage: AdminMessage | UserMessage | FileMessage,\n  currMessage: AdminMessage | UserMessage | FileMessage,\n  nextMessage: AdminMessage | UserMessage | FileMessage,\n): [boolean, boolean] => (\n  [\n    isSameGroup(prevMessage, currMessage),\n    isSameGroup(currMessage, nextMessage),\n  ]\n);\n\nexport const kFormatter = (num: number): string => {\n  if (Math.abs(num) > 999999) {\n    return `${(Math.abs(num) / 1000000).toFixed(1)}M`;\n  }\n\n  if (Math.abs(num) > 999) {\n    return `${(Math.abs(num) / 1000).toFixed(1)}K`;\n  }\n\n  return `${num}`;\n};\n\nexport const isOperator = (openChannel: OpenChannel, userId: string): boolean => {\n  const operators = openChannel?.operators;\n  if (operators.map(operator => operator.userId).indexOf(userId) < 0) {\n    return false;\n  }\n  return true;\n};\n\nexport const isDisabledBecauseFrozen = (openChannel: OpenChannel, userId: string): boolean => {\n  const isFrozen = openChannel?.isFrozen;\n  return isFrozen && !isOperator(openChannel, userId);\n};\n\nexport const isDisabledBecauseMuted = (mutedParticipantIds: Array<string>, userId: string): boolean => {\n  return mutedParticipantIds.indexOf(userId) > -1;\n};\n\nexport const fetchWithListQuery = (\n  listQuery: ParticipantListQuery,\n  logger: Logger,\n  eachQueryNextCallback: (users: Array<User>) => void,\n): void => {\n  const fetchList = (query: ParticipantListQuery) => {\n    const { hasNext } = query;\n    if (hasNext) {\n      query.next().then((users) => {\n        eachQueryNextCallback(users);\n        fetchList(query);\n      }).catch((error) => {\n        logger.warning('OpenChannel | FetchUserList failed', error);\n      });\n    } else {\n      logger.info('OpenChannel | FetchUserList finished');\n    }\n  };\n  logger.info('OpenChannel | FetchUserList start', listQuery);\n  fetchList(listQuery);\n};\n\nexport const pxToNumber = (px: string | number): number | void => {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    const parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\n","export const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nexport const RESET_MESSAGES = 'RESET_MESSAGES';\nexport const GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START';\nexport const GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS';\nexport const GET_PREV_MESSAGES_FAIL = 'GET_PREV_MESSAGES_FAIL';\nexport const SENDING_MESSAGE_FAILED = 'SENDING_MESSAGE_FAILED';\nexport const SENDING_MESSAGE_SUCCEEDED = 'SENDING_MESSAGE_SUCCEEDED';\nexport const SENDING_MESSAGE_START = 'SENDING_MESSAGE_START';\nexport const RESENDING_MESSAGE_START = 'RESENDING_MESSAGE_START';\nexport const FETCH_PARTICIPANT_LIST = 'FETCH_PARTICIPANT_LIST';\nexport const FETCH_BANNED_USER_LIST = 'FETCH_BANNED_USER_LIST';\nexport const FETCH_MUTED_USER_LIST= 'FETCH_MUTED_USER_LIST';\nexport const TRIM_MESSAGE_LIST= 'TRIM_MESSAGE_LIST';\n\n// event handlers\nexport const ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nexport const ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nexport const ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nexport const ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\nexport const ON_OPERATOR_UPDATED = 'ON_OPERATOR_UPDATED';\nexport const ON_USER_ENTERED = 'ON_USER_ENTERED';\nexport const ON_USER_EXITED = 'ON_USER_EXITED';\nexport const ON_USER_MUTED = 'ON_USER_MUTED';\nexport const ON_USER_UNMUTED = 'ON_USER_UNMUTED';\nexport const ON_USER_BANNED = 'ON_USER_BANNED';\nexport const ON_USER_UNBANNED = 'ON_USER_UNBANNED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nexport const ON_META_DATA_CREATED = 'ON_META_DATA_CREATED';\nexport const ON_META_DATA_UPDATED = 'ON_META_DATA_UPDATED';\nexport const ON_META_DATA_DELETED = 'ON_META_DATA_DELETED';\nexport const ON_META_COUNTERS_CREATED = 'ON_META_COUNTERS_CREATED';\nexport const ON_META_COUNTERS_UPDATED = 'ON_META_COUNTERS_UPDATED';\nexport const ON_META_COUNTERS_DELETED = 'ON_META_COUNTERS_DELETED';\nexport const ON_MENTION_RECEIVED = 'ON_MENTION_RECEIVED';\n","import { State as initialStateInterface } from './initialState';\nimport * as actionTypes from './actionTypes';\n\nimport compareIds from '../../../../utils/compareIds.js';\nimport { FileMessage, UserMessage } from '@sendbird/chat/message';\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\n// @ts-ignore: Unreachable code error\ninterface ActionInterface {\n  type: string;\n  payload?: any;\n}\n\nexport default function reducer(\n  state: initialStateInterface,\n  action: ActionInterface,\n): initialStateInterface {\n  switch (action.type) {\n    case actionTypes.RESET_MESSAGES: {\n      return {\n        ...state,\n        allMessages: [],\n      };\n    }\n\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      const gottenChannel = action.payload;\n      const operators = gottenChannel.operators;\n      if (\n        !state.isInvalid\n        && state.currentOpenChannel\n        && state.currentOpenChannel.url\n        && (state.currentOpenChannel.url === gottenChannel.url)\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: gottenChannel,\n        isInvalid: false,\n        operators: operators,\n        participants: operators,\n        bannedParticipantIds: [],\n        mutedParticipantIds: [],\n      };\n    }\n    case actionTypes.SET_CHANNEL_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_START: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_SUCESS:\n    case actionTypes.GET_PREV_MESSAGES_FAIL: {\n      const isFailed = (action.type === actionTypes.GET_PREV_MESSAGES_FAIL);\n      const {\n        currentOpenChannel = {},\n        messages = [],\n        hasMore,\n        lastMessageTimestamp,\n      } = action.payload;\n      const actionChannelUrl = currentOpenChannel.url;\n      const receivedMessages = isFailed ? [] : messages;\n      const _hasMore = isFailed ? false : hasMore;\n      const _lastMessageTimestamp = isFailed ? 0 : lastMessageTimestamp;\n\n      const stateChannel = state.currentOpenChannel;\n      const stateChannelUrl = stateChannel.url;\n\n      if (actionChannelUrl !== stateChannelUrl) {\n        return state;\n      }\n\n      const filteredAllMessages = state.allMessages.filter((message) => (\n        !(receivedMessages.find(({ messageId }) => compareIds(messageId, message.messageId)))\n      ));\n      return {\n        ...state,\n        loading: false,\n        initialized: true,\n        hasMore: _hasMore,\n        lastMessageTimestamp: _lastMessageTimestamp,\n        allMessages: [\n          ...receivedMessages,\n          ...filteredAllMessages,\n        ],\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_START: {\n      const {\n        message,\n        channel,\n      } = action.payload;\n      if (channel?.url !== state.currentOpenChannel.url\n        || state.allMessages.some((m) => (m as UserMessage | FileMessage).reqId === message.reqId)\n        // Handing failed first than sending start issue\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: [\n          ...state.allMessages,\n          message,\n        ],\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_SUCCEEDED: {\n      const sentMessage = action.payload;\n      const newMessages = state.allMessages.map((m) => (\n        compareIds((m as UserMessage | FileMessage).reqId, sentMessage.reqId) ? sentMessage : m\n      ));\n      return {\n        ...state,\n        allMessages: newMessages,\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_FAILED: {\n      const sentMessage = action.payload;\n      if (!state.allMessages.some((m) => (m as UserMessage | FileMessage).reqId === sentMessage.reqId)) {\n        // Handling failed first than sending start issue\n        return {\n          ...state,\n          allMessages: [\n            ...state.allMessages.filter((m) => !compareIds((m as UserMessage | FileMessage).reqId, sentMessage)),\n            sentMessage,\n          ],\n        };\n      } else {\n        return {\n          ...state,\n          allMessages: state.allMessages.map((m) => (\n            compareIds((m as UserMessage | FileMessage).reqId, sentMessage.reqId) ? sentMessage : m\n          )),\n        };\n      }\n    }\n    case actionTypes.TRIM_MESSAGE_LIST: {\n      const { allMessages } = state;\n      const messageLimit = action.payload?.messageLimit;\n      if (messageLimit\n        && messageLimit > 0\n        && allMessages?.length > messageLimit\n      ) {\n        const sliceAt = allMessages.length - messageLimit;\n        return {\n          ...state,\n          allMessages: allMessages.slice(sliceAt),\n        }\n      }\n      return state;\n    }\n    case actionTypes.RESENDING_MESSAGE_START: {\n      const eventedChannel = action.payload.channel;\n      const resentMessage = action.payload.message;\n      if (eventedChannel.url !== state.currentOpenChannel.url) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds((m as UserMessage | FileMessage).reqId, resentMessage.reqId) ? resentMessage : m\n        )),\n      };\n    }\n    case actionTypes.FETCH_PARTICIPANT_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedParticipantList = action.payload.users;\n      if (eventedChannel.url !== state.currentOpenChannel.url) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: [...state.participants, ...fetchedParticipantList],\n        // Should check duplication\n      };\n    }\n    case actionTypes.FETCH_BANNED_USER_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedBannedUserList = action.payload.users;\n      if (\n        (eventedChannel.url !== state.currentOpenChannel.url)\n        || !(fetchedBannedUserList.every(user => typeof user.userId === 'string'))\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        bannedParticipantIds: [\n          ...state.bannedParticipantIds,\n          ...fetchedBannedUserList.map(user => user.userId),\n        ],\n        // Should check duplication\n      };\n    }\n    case actionTypes.FETCH_MUTED_USER_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedMutedUserList = action.payload.users;\n      if (\n        (eventedChannel.url !== state.currentOpenChannel.url)\n        || !(fetchedMutedUserList.every(user => typeof user.userId === 'string'))\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: [\n          ...state.mutedParticipantIds,\n          ...fetchedMutedUserList.map(user => user.userId),\n        ],\n        // Should check duplication\n      };\n    }\n    // events\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const eventedChannel = action.payload.channel;\n      const receivedMessage = action.payload.message;\n\n      const {\n        currentOpenChannel\n      } = state;\n\n      if (\n        !compareIds(eventedChannel.url, currentOpenChannel.url)\n        || (\n          !(state.allMessages.map(\n            (message) => message.messageId).indexOf(receivedMessage.messageId) < 0\n          ))\n      ) {\n        return state;\n      }\n\n      return {\n        ...state,\n        allMessages: [...state.allMessages, receivedMessage],\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const eventedChannel = action.payload.channel;\n      const updatedMessage = action.payload.message;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((message) => (\n          message.isIdentical(updatedMessage)\n            ? updatedMessage\n            : message\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED: {\n      const eventedChannel = action.payload.channel;\n      const deletedMessageId = action.payload.messageId;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((message) => (\n          !compareIds(message.messageId, deletedMessageId)\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID: {\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds((m as UserMessage | FileMessage).reqId, action.payload)\n        )),\n      };\n    }\n    case actionTypes.ON_OPERATOR_UPDATED: {\n      const eventedChannel = action.payload.channel;\n      const updatedOperators = action.payload.operators;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: eventedChannel,\n        operators: updatedOperators,\n      };\n    }\n    case actionTypes.ON_USER_ENTERED: {\n      const eventedChannel = action.payload.channel;\n      const enteredUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: [...state.participants, enteredUser],\n      };\n    }\n    case actionTypes.ON_USER_EXITED: {\n      const eventedChannel = action.payload.channel;\n      const exitedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: state.participants.filter((participant) => (\n          !compareIds(participant.userId, exitedUser.userId)\n        )),\n      };\n    }\n    case actionTypes.ON_USER_MUTED: {\n      const eventedChannel = action.payload.channel;\n      const mutedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.mutedParticipantIds.indexOf(mutedUser.userId) >= 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: [...state.mutedParticipantIds, mutedUser.userId],\n      };\n    }\n    case actionTypes.ON_USER_UNMUTED: {\n      const eventedChannel = action.payload.channel;\n      const unmutedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.mutedParticipantIds.indexOf(unmutedUser.userId) < 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: state.mutedParticipantIds.filter(userId => userId !== unmutedUser.userId),\n      };\n    }\n    case actionTypes.ON_USER_BANNED: {\n      const eventedChannel = action.payload.channel;\n      const bannedUser = action.payload.user;\n      const currentUser = action.payload.currentUser;\n      const currentChannel = state.currentOpenChannel;\n      if (currentChannel?.url === eventedChannel?.url && bannedUser?.userId === currentUser?.userId) {\n        return {\n          ...state,\n          currentOpenChannel: null,\n        }\n      } else if (currentChannel?.url === eventedChannel?.url) {\n        return {\n          ...state,\n          bannedParticipantIds: [...state.bannedParticipantIds, bannedUser.userId],\n        }\n      }\n      return state;\n    }\n    case actionTypes.ON_USER_UNBANNED: {\n      const eventedChannel = action.payload.channel;\n      const unbannedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (currentChannel?.url === eventedChannel?.url) {\n        return {\n          ...state,\n          bannedParticipantIds: state.bannedParticipantIds.filter((userId) => userId !== unbannedUser.userId),\n        }\n      }\n      return state;\n    }\n    case actionTypes.ON_CHANNEL_FROZEN: {\n      const frozenChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== frozenChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        frozen: true,\n      };\n    }\n    case actionTypes.ON_CHANNEL_UNFROZEN: {\n      const unfrozenChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== unfrozenChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        frozen: false,\n      };\n    }\n    case actionTypes.ON_CHANNEL_CHANGED: {\n      const changedChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== changedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: changedChannel,\n      };\n    }\n    case actionTypes.ON_CHANNEL_DELETED: {\n      const deletedChannelUrl = action.payload;\n      const currentChannel = state?.currentOpenChannel;\n      if (currentChannel?.url === deletedChannelUrl) {\n        return {\n          ...state,\n          currentOpenChannel: null,\n        }\n      }\n      return state;\n    }\n    case actionTypes.ON_META_DATA_CREATED: {\n      // const eventedChannel = action.payload.channel;\n      // const createdMetaData = action.payload.metaData;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_DATA_UPDATED: {\n      // const eventedChannel = action.payload.channel;\n      // const updatedMetaData = action.payload.metaData;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_DATA_DELETED: {\n      // const eventedChannel = action.payload.channel;\n      // const deletedMetaDataKeys = action.payload.metaDataKeys;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_CREATED: {\n      // const eventedChannel = action.payload.channel;\n      // const createdMetaCounter = action.payload.metaCounter;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_UPDATED: {\n      // const eventedChannel = action.payload.channel;\n      // const updatedMetaCounter = action.payload.metaCounter;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_DELETED: {\n      // const eventedChannel = action.payload.channel;\n      // const deletedMetaCounterKeys = action.payload.metaCounterKeys;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_MENTION_RECEIVED: {\n      // const eventedChannel = action.payload.channel;\n      // const mentionedMessage = action.payload.message;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    default:\n      return state;\n  }\n}\n","import type { User } from '@sendbird/chat';\nimport { AdminMessage, FileMessage, UserMessage } from '@sendbird/chat/message';\nimport type { OpenChannel } from '@sendbird/chat/openChannel';\n\nexport interface State {\n  allMessages: Array<AdminMessage | UserMessage | FileMessage>;\n  loading: boolean;\n  initialized: boolean;\n  currentOpenChannel: OpenChannel;\n  isInvalid: boolean;\n  hasMore: boolean;\n  lastMessageTimestamp: number;\n  frozen: boolean;\n  operators: Array<User>;\n  participants: Array<User>;\n  bannedParticipantIds: Array<string>;\n  mutedParticipantIds: Array<string>;\n}\n\nconst initialState: State = {\n  allMessages: [],\n  loading: false,\n  initialized: false,\n  currentOpenChannel: null,\n  isInvalid: false,\n  hasMore: false,\n  lastMessageTimestamp: 0,\n  frozen: false,\n  operators: [],\n  participants: [],\n  bannedParticipantIds: [],\n  mutedParticipantIds: [],\n};\n\nexport default initialState;\n","import type { SendbirdOpenChat } from '@sendbird/chat/openChannel';\nimport { useEffect } from 'react';\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  channelUrl: string;\n  sdkInit: boolean;\n  fetchingParticipants: boolean;\n  userId: string;\n}\ninterface StaticParams {\n  sdk: SendbirdOpenChat;\n  logger: Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSetChannel(\n  { channelUrl, sdkInit, fetchingParticipants, userId }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk?.openChannel) {\n      logger.info('OpenChannel | useSetChannel fetching channel', channelUrl);\n      sdk.openChannel.getChannel(channelUrl).then((openChannel) => {\n        logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n        messagesDispatcher({\n          type: messageActionTypes.SET_CURRENT_CHANNEL,\n          payload: openChannel,\n        });\n        openChannel.enter().then(() => {\n          if (openChannel.isOperator(userId)) { // only operator has a permission to fetch these list\n            const bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n            const mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n            utils.fetchWithListQuery(\n              bannedParticipantListQuery,\n              logger,\n              (users) => {\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_BANNED_USER_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users,\n                  },\n                });\n              },\n            );\n            utils.fetchWithListQuery(\n              mutedParticipantListQuery,\n              logger,\n              (users) => {\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_MUTED_USER_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users,\n                  },\n                });\n              },\n            );\n          }\n          if (fetchingParticipants) {\n            // fetch participants list\n            const participantListQuery = openChannel.createParticipantListQuery({});\n            utils.fetchWithListQuery(\n              participantListQuery,\n              logger,\n              (users) => {\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_PARTICIPANT_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users,\n                  },\n                });\n              },\n            );\n          }\n        }).catch((error) => {\n          logger.warning('OpenChannel | useSetChannel enter channel failed', { channelUrl, error });\n          messagesDispatcher({\n            type: messageActionTypes.SET_CHANNEL_INVALID,\n            payload: null,\n          });\n        });\n      }).catch(() => {\n        logger.warning('OpenChannel | useSetChannel fetching channel failed', { channelUrl, error });\n          messagesDispatcher({\n            type: messageActionTypes.SET_CHANNEL_INVALID,\n            payload: null,\n          });\n      });\n    }\n  }, [channelUrl, sdkInit, fetchingParticipants]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\nimport { ChannelType } from '@sendbird/chat';\nimport { OpenChannel, OpenChannelHandler, SendbirdOpenChat } from '@sendbird/chat/openChannel';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport uuidv4 from '../../../../utils/uuid';\nimport { scrollIntoLast } from '../utils';\nimport { Logger } from '../../../../lib/SendbirdState';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n  checkScrollBottom: () => boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdOpenChat;\n  logger: Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useHandleChannelEvents(\n  { currentOpenChannel, checkScrollBottom }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    const messageReceiverId = uuidv4();\n    if (currentOpenChannel && currentOpenChannel.url && sdk?.openChannel?.addOpenChannelHandler) {\n      logger.info('OpenChannel | useHandleChannelEvents: Setup evnet handler', messageReceiverId);\n      const channelHandlerParams: OpenChannelHandler = {\n        onMessageReceived: (channel, message) => {\n          const scrollToEnd = checkScrollBottom();\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMessageReceived', { channelUrl, message });\n          messagesDispatcher({\n            type: messageActionTypes.ON_MESSAGE_RECEIVED,\n            payload: { channel, message },\n          });\n          if (scrollToEnd) {\n            try {\n              setTimeout(() => {\n                scrollIntoLast();\n              });\n            } catch (error) {\n              logger.warning('OpenChannel | onMessageReceived | scroll to end failed');\n            }\n          }\n        },\n        onMessageUpdated: (channel, message) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMessageUpdated', { channelUrl, message });\n          messagesDispatcher({\n            type: messageActionTypes.ON_MESSAGE_UPDATED,\n            payload: { channel, message },\n          });\n        },\n        onMessageDeleted: (channel, messageId) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMessageDeleted', { channelUrl, messageId });\n          messagesDispatcher({\n            type: messageActionTypes.ON_MESSAGE_DELETED,\n            payload: { channel, messageId },\n          });\n        },\n        onOperatorUpdated: (channel, operators) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onOperatorUpdated', { channelUrl, operators });\n          messagesDispatcher({\n            type: messageActionTypes.ON_OPERATOR_UPDATED,\n            payload: { channel, operators },\n          });\n        },\n        onUserEntered: (channel, user) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onUserEntered', { channelUrl, user });\n          messagesDispatcher({\n            type: messageActionTypes.ON_USER_ENTERED,\n            payload: { channel, user },\n          });\n        },\n        onUserExited: (channel, user) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onUserExited', { channelUrl, user });\n          messagesDispatcher({\n            type: messageActionTypes.ON_USER_EXITED,\n            payload: { channel, user },\n          });\n        },\n        onUserMuted: (channel, user) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onUserMuted', { channelUrl, user });\n          messagesDispatcher({\n            type: messageActionTypes.ON_USER_MUTED,\n            payload: { channel, user },\n          });\n        },\n        onUserUnmuted: (channel, user) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onUserUnmuted', { channelUrl, user });\n          messagesDispatcher({\n            type: messageActionTypes.ON_USER_UNMUTED,\n            payload: { channel, user },\n          });\n        },\n        onUserBanned: (channel, user) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onUserBanned', { channelUrl, user });\n          messagesDispatcher({\n            type: messageActionTypes.ON_USER_BANNED,\n            payload: { channel, user, currentUser: sdk?.currentUser },\n          });\n        },\n        onUserUnbanned: (channel, user) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onUserUnbanned', { channelUrl, user });\n          messagesDispatcher({\n            type: messageActionTypes.ON_USER_UNBANNED,\n            payload: { channel, user },\n          });\n        },\n        onChannelFrozen: (channel) => {\n          logger.info('OpenChannel | useHandleChannelEvents: onChannelFrozen', channel);\n          messagesDispatcher({\n            type: messageActionTypes.ON_CHANNEL_FROZEN,\n            payload: channel,\n          });\n        },\n        onChannelUnfrozen: (channel) => {\n          logger.info('OpenChannel | useHandleChannelEvents: onChannelUnfrozen', channel);\n          messagesDispatcher({\n            type: messageActionTypes.ON_CHANNEL_UNFROZEN,\n            payload: channel,\n          });\n        },\n        onChannelChanged: (channel) => {\n          logger.info('OpenChannel | useHandleChannelEvents: onChannelChanged', channel);\n          messagesDispatcher({\n            type: messageActionTypes.ON_CHANNEL_CHANGED,\n            payload: channel,\n          });\n        },\n        onMetaDataCreated: (channel, metaData) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMetaDataCreated', { channelUrl, metaData });\n          messagesDispatcher({\n            type: messageActionTypes.ON_META_DATA_CREATED,\n            payload: { channel, metaData },\n          });\n        },\n        onMetaDataUpdated: (channel, metaData) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMetaDataUpdated', { channelUrl, metaData });\n          messagesDispatcher({\n            type: messageActionTypes.ON_META_DATA_UPDATED,\n            payload: { channel, metaData },\n          });\n        },\n        onMetaDataDeleted: (channel, metaDataKeys) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMetaDataDeleted', { channelUrl, metaDataKeys });\n          messagesDispatcher({\n            type: messageActionTypes.ON_META_DATA_DELETED,\n            payload: { channel, metaDataKeys },\n          });\n        },\n        onMetaCounterCreated: (channel, metaCounter) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersCreated', { channelUrl, metaCounter });\n          messagesDispatcher({\n            type: messageActionTypes.ON_META_COUNTERS_CREATED,\n            payload: { channel, metaCounter },\n          });\n        },\n        onMetaCounterUpdated: (channel, metaCounter) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersUpdated', { channelUrl, metaCounter });\n          messagesDispatcher({\n            type: messageActionTypes.ON_META_COUNTERS_UPDATED,\n            payload: { channel, metaCounter },\n          });\n        },\n        onMetaCounterDeleted: (channel, metaCounterKeys) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersDeleted', { channelUrl, metaCounterKeys });\n          messagesDispatcher({\n            type: messageActionTypes.ON_META_COUNTERS_DELETED,\n            payload: { channel, metaCounterKeys },\n          });\n        },\n        onMentionReceived: (channel, message) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMentionReceived', { channelUrl, message });\n          messagesDispatcher({\n            type: messageActionTypes.ON_MENTION_RECEIVED,\n            payload: { channel, message },\n          });\n        },\n        onChannelDeleted: (channelUrl, channelType) => {\n          if (channelType === ChannelType.OPEN && currentOpenChannel?.url === channelUrl) {\n            messagesDispatcher({\n              type: messageActionTypes.ON_CHANNEL_DELETED,\n              payload: channelUrl,\n            });\n          }\n        },\n      };\n\n      const ChannelHandler = new OpenChannelHandler(channelHandlerParams);\n\n      sdk?.openChannel?.addOpenChannelHandler(messageReceiverId, ChannelHandler);\n    }\n\n    return () => {\n      if (sdk?.openChannel?.removeOpenChannelHandler) {\n        logger.info('OpenChannel | useHandleChannelEvents: Removing message receiver handler', messageReceiverId);\n        sdk.openChannel.removeOpenChannelHandler(messageReceiverId);\n      }\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useHandleChannelEvents;\n","import { MessageListParams } from '@sendbird/chat/message';\nimport type { OpenChannel } from '@sendbird/chat/openChannel';\nimport { useEffect } from 'react';\n\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { scrollIntoLast } from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n  /* eslint-disable @typescript-eslint/no-explicit-any*/\n  userFilledMessageListParams?: Record<string, any>;\n}\ninterface StaticParams {\n  logger: Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useInitialMessagesFetch(\n  { currentOpenChannel, userFilledMessageListParams }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    logger.info('OpenChannel | useInitialMessagesFetch: Setup started', currentOpenChannel);\n    messagesDispatcher({\n      type: messageActionTypes.RESET_MESSAGES,\n      payload: null,\n    });\n\n    if (currentOpenChannel && currentOpenChannel.getMessagesByTimestamp) {\n      const messageListParams: MessageListParams = {\n        nextResultSize: 0,\n        prevResultSize: 30,\n        isInclusive: true,\n        includeReactions: false,\n      };\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach((key) => {\n          messageListParams[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useInitialMessagesFetch: Used customizedMessageListParams');\n      }\n\n      logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages', { currentOpenChannel, messageListParams });\n      messagesDispatcher({\n        type: messageActionTypes.GET_PREV_MESSAGES_START,\n        payload: null,\n      });\n      currentOpenChannel.getMessagesByTimestamp(new Date().getTime(), messageListParams).then((messages) => {\n        logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages succeeded', messages);\n        const hasMore = (messages && messages.length > 0);\n        const lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n        messagesDispatcher({\n          type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n          payload: {\n            currentOpenChannel,\n            messages,\n            hasMore,\n            lastMessageTimestamp,\n          },\n        });\n        setTimeout(() => { scrollIntoLast(); });\n      }).catch((error) => {\n        logger.error('OpenChannel | useInitialMessagesFetch: Fetching messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.GET_PREV_MESSAGES_FAIL,\n          payload: {\n            currentOpenChannel,\n            messages: [],\n            hasMore: false,\n            lastMessageTimestamp: 0,\n          },\n        });\n      });\n    }\n  }, [currentOpenChannel, userFilledMessageListParams]);\n}\n\nexport default useInitialMessagesFetch;\n","import { useCallback } from 'react';\nimport type { MessageListParams } from '@sendbird/chat/message';\nimport type { OpenChannel, SendbirdOpenChat } from '@sendbird/chat/openChannel';\n\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n  lastMessageTimestamp: number;\n  fetchMore?: boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdOpenChat;\n  logger: Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n  hasMore: boolean;\n  /* eslint-disable @typescript-eslint/no-explicit-any*/\n  userFilledMessageListParams?: Record<string, any>;\n}\ntype CallbackReturn = (callback: () => void) => void;\n\nfunction useScrollCallback(\n  { currentOpenChannel, lastMessageTimestamp, fetchMore }: DynamicParams,\n  { sdk, logger, messagesDispatcher, hasMore, userFilledMessageListParams }: StaticParams,\n): CallbackReturn {\n  return useCallback((callback) => {\n    if (fetchMore && hasMore) {\n      logger.info('OpenChannel | useScrollCallback: start');\n      const messageListParams: MessageListParams = {\n        prevResultSize: 30,\n        includeReactions: false,\n        nextResultSize: 0,\n      };\n\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach((key) => {\n          messageListParams[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useScrollCallback: Used userFilledMessageListParams', userFilledMessageListParams);\n      }\n\n      logger.info('OpenChannel | useScrollCallback: Fetching messages', { currentOpenChannel, messageListParams });\n\n      currentOpenChannel.getMessagesByTimestamp(lastMessageTimestamp || new Date().getTime(), messageListParams).then((messages) => {\n        logger.info('OpenChannel | useScrollCallback: Fetching messages succeeded', messages);\n        const hasMore = (messages && messages.length > 0);\n        const lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n        messagesDispatcher({\n          type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n          payload: {\n            currentOpenChannel,\n            messages,\n            hasMore,\n            lastMessageTimestamp,\n          }\n        });\n        setTimeout(() => {\n          callback();\n        });\n      }).catch((error) => {\n        logger.error('OpenChannel | useScrollCallback: Fetching messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.GET_PREV_MESSAGES_FAIL,\n          payload: {\n            currentOpenChannel,\n            messages: [],\n            hasMore: false,\n            lastMessageTimestamp: 0,\n          }\n        });\n      });\n    }\n  }, [currentOpenChannel, lastMessageTimestamp, fetchMore, sdk]);\n}\n\nexport default useScrollCallback;\n","import { useCallback } from 'react';\nimport { Logger } from '../../../../module';\n\ninterface DynamicParams {\n  conversationScrollRef: React.RefObject<HTMLDivElement>;\n}\ninterface StaticParams {\n  logger: Logger;\n}\n\nfunction useCheckScrollBottom(\n  { conversationScrollRef }: DynamicParams,\n  { logger }: StaticParams,\n): () => boolean {\n  return useCallback(() => {\n    let isBottom = true;\n    if (conversationScrollRef && conversationScrollRef?.current) {\n      try {\n        const conversationScroll = conversationScrollRef.current;\n        isBottom = conversationScroll.scrollHeight <= conversationScroll.scrollTop + conversationScroll.clientHeight;\n      } catch(error) {\n        logger.error('OpenChannel | useCheckScrollBottom', error);\n      }\n    }\n    return isBottom;\n  }, [conversationScrollRef])\n}\n\nexport default useCheckScrollBottom;\n","import type { UserMessageCreateParams } from '@sendbird/chat/message';\nimport type { OpenChannel, SendbirdOpenChat } from '@sendbird/chat/openChannel';\n\nimport { useCallback } from 'react';\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n  onBeforeSendUserMessage: (text: string) => UserMessageCreateParams;\n  checkScrollBottom: () => boolean;\n  messageInputRef: React.RefObject<HTMLInputElement>;\n}\ninterface StaticParams {\n  sdk: SendbirdOpenChat;\n  logger: Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSendMessageCallback(\n  { currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): () => void {\n  return useCallback(() => {\n    if (sdk) {\n      const text = messageInputRef.current.innerText;\n      const createParamsDefault = (txt: string | number): UserMessageCreateParams => {\n        const message = typeof txt === 'string' ? txt.trim() : txt.toString(10).trim();\n        const params: UserMessageCreateParams = {\n          message: message,\n        };\n        return params;\n      }\n      const createCustomParams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function';\n      if (createCustomParams) {\n        logger.info('OpenChannel | useSendMessageCallback: Creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n      const params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n      logger.info('OpenChannel | useSendMessageCallback: Sending message has started', params);\n\n      const isBottom = checkScrollBottom();\n      currentOpenChannel.sendUserMessage(params)\n        .onPending((pendingMessage) => {\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_START,\n            payload: {\n              message: pendingMessage,\n              channel: currentOpenChannel,\n            }\n          });\n        })\n        .onSucceeded((message) => {\n          logger.info('OpenChannel | useSendMessageCallback: Sending message succeeded', message);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n            payload: message,\n          });\n          if (isBottom) {\n            setTimeout(() => {\n              utils.scrollIntoLast();\n            });\n          }\n        })\n        .onFailed((error, message) => {\n          logger.warning('OpenChannel | useSendMessageCallback: Sending message failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_FAILED,\n            payload: message,\n          });\n          // https://sendbird.com/docs/chat/v3/javascript/guides/error-codes#2-server-error-codes\n          // TODO: Do we need to handle the error cases?\n          // @ts-ignore\n          if (error?.code === 900041) {\n            messagesDispatcher({\n              type: messageActionTypes.ON_USER_MUTED,\n              payload: {\n                channel: currentOpenChannel,\n                user: sdk.currentUser,\n              },\n            });\n          }\n        });\n    }\n  }, [currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef]);\n}\n\nexport default useSendMessageCallback;\n","import { useCallback } from 'react';\nimport type { OpenChannel, SendbirdOpenChat } from '@sendbird/chat/openChannel';\nimport type { FileMessageCreateParams } from '@sendbird/chat/message';\n\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n  onBeforeSendFileMessage: (file: File) => FileMessageCreateParams;\n  checkScrollBottom: () => boolean;\n  imageCompression?: {\n    compressionRate?: number,\n    resizingWidth?: number | string,\n    resizingHeight?: number | string,\n  };\n}\ninterface StaticParams {\n  sdk: SendbirdOpenChat;\n  logger: Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\ntype CallbackReturn = (file: File) => void;\n\nfunction useFileUploadCallback(\n  {\n    currentOpenChannel,\n    checkScrollBottom,\n    imageCompression = {},\n    onBeforeSendFileMessage,\n  }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((file) => {\n    if (sdk) {\n      const {\n        compressionRate,\n        resizingWidth,\n        resizingHeight,\n      } = imageCompression;\n      const createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n\n      const compressibleFileType = (file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg');\n      const compressibleRatio = (compressionRate > 0) && (compressionRate < 1);\n      // pxToNumber returns null if values are invalid\n      const compressibleDiamensions = utils.pxToNumber(resizingWidth)\n        || utils.pxToNumber(resizingHeight);\n\n      const canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n\n      const createParamsDefault = (file_): FileMessageCreateParams => {\n        const params: FileMessageCreateParams = {};\n        params.file = file_;\n        return params;\n      };\n\n      if (canCompressImage) { // Using image compression\n        try {\n          const image: HTMLImageElement = document.createElement('img');\n          image.src = URL.createObjectURL(file);\n          image.onload = () => {\n            URL.revokeObjectURL(image.src);\n            const canvas = document.createElement('canvas');\n            const imageWidth = image.naturalWidth || image.width;\n            const imageHeight = image.naturalHeight || image.height;\n            let targetWidth = utils.pxToNumber(resizingWidth) || imageWidth;\n            let targetHeight = utils.pxToNumber(resizingHeight) || imageHeight;\n\n            // In canvas.toBlob(callback, mimeType, qualityArgument)\n            // qualityArgument doesnt work\n            // so in case compressibleDiamensions are not present, we use ratio\n            if (file.type === 'image/png' && !compressibleDiamensions) {\n              targetWidth *= compressionRate;\n              targetHeight *= compressionRate;\n            }\n\n            canvas.width = targetWidth;\n            canvas.height = targetHeight;\n            const context = canvas.getContext('2d');\n            context.drawImage(image, 0, 0, targetWidth, targetHeight);\n            context.canvas.toBlob(\n              (newImageBlob) => {\n                const compressedFile = new File([newImageBlob], file.name, { type: file.type });\n                if (createCustomParams) {\n                  logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n                }\n                const params = onBeforeSendFileMessage ? onBeforeSendFileMessage(compressedFile) : createParamsDefault(compressedFile);\n                logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n\n                const isBottom = checkScrollBottom();\n                currentOpenChannel.sendFileMessage(params)\n                  .onPending((pendingMessage) => {\n                    messagesDispatcher({\n                      type: messageActionTypes.SENDING_MESSAGE_START,\n                      payload: {\n                        message: {\n                          ...pendingMessage,\n                          url: URL.createObjectURL(file),\n                          // pending thumbnail message seems to be failed\n                          requestState: 'pending',\n                        },\n                        channel: currentOpenChannel,\n                      }\n                    });\n                  })\n                  .onSucceeded((message) => {\n                    logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n                    messagesDispatcher({\n                      type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n                      payload: message,\n                    });\n                    if (isBottom) {\n                      setTimeout(() => {\n                        utils.scrollIntoLast();\n                      });\n                    }\n                  })\n                  .onFailed((error, message) => {\n                    logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', { message, error });\n                    // @ts-ignore\n                    message.localUrl = URL.createObjectURL(file);\n                    // @ts-ignore\n                    message.file = file;\n                    messagesDispatcher({\n                      type: messageActionTypes.SENDING_MESSAGE_FAILED,\n                      payload: message,\n                    });\n                  });\n              },\n              file.type,\n              compressionRate,\n            );\n          }\n        } catch (error) {\n          logger.warning('OpenChannel | useFileUploadCallback: Sending file message with image compression failed', error);\n        }\n      } else { // Not using image compression\n        if (createCustomParams) {\n          logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n        }\n        const params = onBeforeSendFileMessage ? onBeforeSendFileMessage(file) : createParamsDefault(file);\n        logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n\n        const isBottom = checkScrollBottom();\n        currentOpenChannel.sendFileMessage(params)\n          .onPending((pendingMessage) => {\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_START,\n              payload: {\n                message: {\n                  ...pendingMessage,\n                  url: URL.createObjectURL(file),\n                  // pending thumbnail message seems to be failed\n                  requestState: 'pending',\n                },\n                channel: currentOpenChannel,\n              }\n            });\n          })\n          .onSucceeded((message) => {\n            logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n              payload: message,\n            });\n            if (isBottom) {\n              setTimeout(() => {\n                utils.scrollIntoLast();\n              });\n            }\n          })\n          .onFailed((error, message) => {\n            logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', { message, error });\n            // @ts-ignore\n            message.localUrl = URL.createObjectURL(file);\n            // @ts-ignore\n            message.file = file;\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_FAILED,\n              payload: message,\n            });\n          });\n      }\n    }\n  }, [currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression]);\n}\n\nexport default useFileUploadCallback;\n","import type { UserMessageUpdateParams } from '@sendbird/chat/message';\n\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport type { OpenChannel } from '@sendbird/chat/openChannel';\nimport { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n  onBeforeSendUserMessage?: (text) => UserMessageUpdateParams;\n}\ninterface StaticParams {\n  logger: Logger;\n  messagesDispatcher: ({ type: string, payload :any }) => void;\n}\ntype CallbackReturn = (messageId, text, callback) => void;\n\nfunction useUpdateMessageCallback(\n  { currentOpenChannel, onBeforeSendUserMessage }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((messageId, text, callback) => {\n    const createParamsDefault = (txt) => {\n      const params = {\n        message: txt,\n      };\n      return params;\n    };\n\n    if (onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function') {\n      logger.info('OpenChannel | useUpdateMessageCallback: Creating params using onBeforeUpdateUserMessage');\n    }\n    const params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n    currentOpenChannel.updateUserMessage(messageId, params)\n      .then((message) => {\n        if (callback) {\n          callback();\n        }\n        logger.info('OpenChannel | useUpdateMessageCallback: Updating message succeeded', { message, params });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentOpenChannel,\n            message,\n          },\n        });\n      });\n  }, [currentOpenChannel, onBeforeSendUserMessage]);\n}\n\nexport default useUpdateMessageCallback;\n","import type { FileMessage, UserMessage } from '@sendbird/chat/message';\nimport type { OpenChannel } from '@sendbird/chat/openChannel';\nimport { useCallback } from 'react';\nimport { Logger } from '../../../../module';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n}\n\ntype MessagesDispatcherType = {\n  type: string, payload: any,\n};\n\ninterface StaticParams {\n  logger: Logger;\n  messagesDispatcher: (dispatcher: MessagesDispatcherType) => void;\n}\n\ntype CallbackReturn = (\n  message: UserMessage | FileMessage,\n  callback?: () => void,\n) => void;\n\nfunction useDeleteMessageCallback(\n  { currentOpenChannel }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((message, callback) => {\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message', message);\n    const { sendingStatus } = message;\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message requestState', sendingStatus);\n\n    if (sendingStatus === 'failed' || sendingStatus === 'pending') {\n      logger.info('OpenChannel | useDeleteMessageCallback: Deleted message from local', message);\n      messagesDispatcher({\n        type: messageActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n        payload: message.reqId,\n      });\n      if (callback) {\n        callback();\n      }\n    } else {\n      if (!(message.messageType ==='file' || message.messageType === 'user')) {\n        return;\n      }\n      const messageToDelete = message as UserMessage;\n      currentOpenChannel.deleteMessage(messageToDelete).then(() => {\n        logger.info('OpenChannel | useDeleteMessageCallback: Deleting message on server', sendingStatus);\n        if (callback) {\n          callback();\n        }\n        logger.info('OpenChannel | useDeleteMessageCallback: Deleting message succeeded', message);\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED,\n          payload: {\n            channel: currentOpenChannel,\n            messageId: message.messageId,\n          },\n        });\n      }).catch((error) => {\n        logger.warning('OpenChannel | useDeleteMessageCallback: Deleting message failed', error);\n      });\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useDeleteMessageCallback;\n","import type { FileMessage, UserMessage } from '@sendbird/chat/message';\nimport type { OpenChannel } from '@sendbird/chat/openChannel';\nimport { useCallback } from 'react';\nimport { Logger } from '../../../../module';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n}\n\ntype MessagesDispatcherType = { type: string, payload: any };\n\ninterface StaticParams {\n  logger: Logger;\n  messagesDispatcher: (dispatcher: MessagesDispatcherType) => void;\n}\ntype CallbackReturn = (failedMessage: UserMessage | FileMessage) => void;\n\nfunction useResendMessageCallback(\n  { currentOpenChannel }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((failedMessage) => {\n    logger.info('OpenChannel | useResendMessageCallback: Resending message has started', failedMessage);\n    // eslint-disable-next-line no-param-reassign\n    const { messageType, file } = failedMessage as FileMessage;\n    if (failedMessage && typeof failedMessage.isResendable === 'function' && failedMessage.isResendable) {\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      messagesDispatcher({\n        type: messageActionTypes.RESENDING_MESSAGE_START,\n        payload: {\n          channel: currentOpenChannel,\n          message: failedMessage,\n        },\n      });\n\n      // userMessage\n      if (messageType === 'user' && failedMessage.messageType === 'user') {\n        currentOpenChannel.resendUserMessage(failedMessage).then((message) => {\n          logger.info('OpenChannel | useResendMessageCallback: Reseding message succeeded', message);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n            payload: message,\n          });\n        }).catch((error) => {\n          logger.warning('OpenChannel | useResendMessageCallback: Resending message failed', error);\n          // eslint-disable-next-line no-param-reassign\n          failedMessage.requestState = 'failed';\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_FAILED,\n            payload: failedMessage,\n          });\n        });\n      }\n\n      // fileMessage\n      if (messageType === 'file' && failedMessage.messageType === 'file') {\n        currentOpenChannel.resendFileMessage(failedMessage, file).then((message) => {\n          logger.info('OpenChannel | useResendMessageCallback: Resending file message succeeded', message);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n            payload: message,\n          });\n        }).catch((error) => {\n          logger.warning('OpenChannel | useResendMessageCallback: Resending file message failed', error);\n          // eslint-disable-next-line no-param-reassign\n          failedMessage.requestState = 'failed';\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_FAILED,\n            payload: failedMessage,\n          });\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('OpenChannel | useResendMessageCallback: Message is not resendable');\n      logger.warning('OpenChannel | useResendMessageCallback: Message is not resendable', failedMessage);\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useResendMessageCallback;\n","import { useEffect, useState } from 'react';\nimport { Logger } from '../../../../module';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  messagesLength: number;\n  messageLimit: number;\n}\n\n\ntype MessagesDispatcherType = {\n  type: string,\n  payload: { messageLimit: number }\n};\n\ninterface StaticParams {\n  messagesDispatcher: (dispatcher: MessagesDispatcherType) => void;\n  logger: Logger;\n}\n\nconst THROTTLE_TIMER = 5000;\n\n// to trim message list so that we wont keep thousands of messages in memory\n// We are throttling here; not debouncing\n// it will be called once very 5 sec if messagesLength, messageLimit changes\n// we check if messagesLength > messageLimit before dispatching action\nfunction useTrimMessageList(\n  { messagesLength, messageLimit }: DynamicParams,\n  { messagesDispatcher, logger }: StaticParams,\n): void {\n  const [inProgress, setInProgress] = useState(false);\n  useEffect(() => {\n    if (inProgress) {\n      return;\n    }\n    if (typeof messagesLength === 'number' && messagesLength > messageLimit) {\n      logger.info('Trimming MessageList');\n      messagesDispatcher({\n        type: messageActionTypes.TRIM_MESSAGE_LIST,\n        payload: { messageLimit },\n      });\n    }\n    setInProgress(true);\n    setTimeout(() => { setInProgress(false); }, THROTTLE_TIMER);\n  }, [messagesLength, messageLimit]);\n}\n\nexport default useTrimMessageList;\n","import React, {\n  useRef,\n  useEffect,\n  useReducer,\n  useMemo,\n} from 'react';\nimport type { FileMessageCreateParams, UserMessageCreateParams } from '@sendbird/chat/message';\nimport type { SendbirdOpenChat } from '@sendbird/chat/openChannel';\n\nimport * as utils from './utils';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport { RenderUserProfileProps } from '../../../types';\nimport messagesReducer from './dux/reducers';\nimport messagesInitialState, {\n  State as MessageStoreState,\n} from './dux/initialState';\nimport * as messageActionTypes from './dux/actionTypes';\nimport { scrollIntoLast } from './utils';\nimport * as topics from '../../../lib/pubSub/topics';\n\n// hooks\nimport useSetChannel from './hooks/useSetChannel';\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useInitialMessagesFetch from './hooks/useInitialMessagesFetch';\nimport useScrollCallback from './hooks/useScrollCallback';\nimport useCheckScrollBottom from './hooks/useCheckScrollBottom';\nimport useSendMessageCallback from './hooks/useSendMessageCallback';\nimport useFileUploadCallback from './hooks/useFileUploadCallback';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useTrimMessageList from './hooks/useTrimMessageList';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\n\ntype OpenChannelQueries = {\n  // https://sendbird.github.io/core-sdk-javascript/module-model_params_messageListParams-MessageListParams.html\n  messageListParams?: {\n    replyType?: string,\n    messageType?: string,\n    prevResultSize?: number,\n    nextResultSize?: number,\n    reverse?: boolean,\n    isInclusive?: boolean,\n    includeMetaArray?: boolean,\n    // UIKit doesn't support emoji reaction in OpenChannel\n    // includeReactions?: boolean,\n    // UIKit doesn't support message threading in OpenChannel\n    // includeThreadInfo?: boolean,\n    includePollDetails?: boolean,\n    includeParentMessageInfo?: boolean,\n    showSubchannelMessagesOnly?: boolean,\n    customTypes?: Array<string>,\n    senderUserIds?: Array<string>,\n  },\n};\n\nexport interface OpenChannelProviderProps {\n  channelUrl: string;\n  children?: React.ReactNode;\n  isMessageGroupingEnabled?: boolean;\n  queries?: OpenChannelQueries;\n  messageLimit?: number;\n  onBeforeSendUserMessage?(text: string): UserMessageCreateParams;\n  onBeforeSendFileMessage?(file_: File): FileMessageCreateParams;\n  onChatHeaderActionClick?(): void;\n  disableUserProfile?: boolean;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactNode;\n}\n\n\ninterface OpenChannelInterface extends OpenChannelProviderProps, MessageStoreState {\n  // derived/utils\n  messageInputRef: React.RefObject<HTMLInputElement>;\n  conversationScrollRef: React.RefObject<HTMLDivElement>;\n  disabled: boolean;\n  amIBanned: boolean;\n  amIMuted: boolean;\n  amIOperator: boolean;\n  fetchMore: boolean;\n  checkScrollBottom: () => boolean;\n  onScroll: (callback: () => void) => void;\n  handleSendMessage: any;\n  handleFileUpload: any;\n  updateMessage: any;\n  deleteMessage: any;\n  resendMessage: any;\n}\n\nconst OpenChannelContext = React.createContext<OpenChannelInterface | null>(undefined);\n\nconst OpenChannelProvider: React.FC<OpenChannelProviderProps> = (props: OpenChannelProviderProps) => {\n  const {\n    channelUrl,\n    children,\n    isMessageGroupingEnabled,\n    queries,\n    onBeforeSendUserMessage,\n    messageLimit,\n    onBeforeSendFileMessage,\n    onChatHeaderActionClick,\n  } = props;\n\n  // We didn't decide to support fetching participant list\n  const fetchingParticipants = false;\n  const globalStore = useSendbirdStateContext();\n\n  const sdk = globalStore?.stores?.sdkStore?.sdk as SendbirdOpenChat;\n  const sdkInit = globalStore?.stores?.sdkStore?.initialized;\n  const user = globalStore?.stores?.userStore?.user;\n  const config = globalStore?.config;\n  const {\n    userId,\n    isOnline,\n    logger,\n    pubSub,\n    imageCompression,\n  } = config;\n\n  // hook variables\n  const [messagesStore, messagesDispatcher] = useReducer(messagesReducer, messagesInitialState);\n  const {\n    allMessages,\n    loading,\n    initialized,\n    currentOpenChannel,\n    isInvalid,\n    hasMore,\n    lastMessageTimestamp,\n    operators,\n    bannedParticipantIds,\n    mutedParticipantIds,\n  } = messagesStore;\n  // ref\n  const messageInputRef = useRef(null); // useSendMessageCallback\n  const conversationScrollRef = useRef(null); // useScrollAfterSendMessageCallback\n\n  // const\n  const userFilledMessageListParams = queries?.messageListParams;\n  const disabled = !initialized\n    || !isOnline\n    || utils.isDisabledBecauseFrozen(currentOpenChannel, userId)\n    || utils.isDisabledBecauseMuted(mutedParticipantIds, userId);\n\n  // useMemo\n  const amIBanned = useMemo(() => {\n    return bannedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, bannedParticipantIds, user]);\n  const amIMuted = useMemo(() => {\n    return mutedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, mutedParticipantIds, user]);\n  const amIOperator = useMemo(() => {\n    return operators.map(operator => operator.userId).indexOf(user.userId) >= 0;\n  }, [channelUrl, operators, user]);\n\n  // use hooks\n  useSetChannel(\n    { channelUrl, sdkInit, fetchingParticipants, userId },\n    { sdk, logger, messagesDispatcher },\n  );\n\n  const checkScrollBottom = useCheckScrollBottom(\n    { conversationScrollRef },\n    { logger },\n  );\n  useHandleChannelEvents(\n    { currentOpenChannel, checkScrollBottom },\n    { sdk, logger, messagesDispatcher },\n  );\n  useInitialMessagesFetch(\n    { currentOpenChannel, userFilledMessageListParams },\n    { logger, messagesDispatcher },\n  );\n\n  const fetchMore: boolean = utils.shouldFetchMore(allMessages?.length, messageLimit);\n  // donot fetch more for streaming\n  const onScroll = useScrollCallback(\n    { currentOpenChannel, lastMessageTimestamp, fetchMore },\n    { sdk, logger, messagesDispatcher, hasMore, userFilledMessageListParams },\n  );\n  const handleSendMessage = useSendMessageCallback(\n    { currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef },\n    { sdk, logger, messagesDispatcher },\n  );\n  const handleFileUpload = useFileUploadCallback(\n    { currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression },\n    { sdk, logger, messagesDispatcher },\n  );\n  const updateMessage = useUpdateMessageCallback(\n    { currentOpenChannel, onBeforeSendUserMessage },\n    { logger, messagesDispatcher },\n  );\n  const deleteMessage = useDeleteMessageCallback(\n    { currentOpenChannel },\n    { logger, messagesDispatcher },\n  );\n  const resendMessage = useResendMessageCallback(\n    { currentOpenChannel },\n    { logger, messagesDispatcher },\n  );\n\n  useTrimMessageList(\n    { messagesLength: allMessages?.length, messageLimit },\n    { messagesDispatcher, logger }\n  );\n\n  // handle API calls from withSendbird\n  useEffect(() => {\n    const subscriber = new Map();\n    if (!pubSub || !pubSub.subscribe) {\n      return;\n    }\n    subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (msg) => {\n      const { channel, message } = msg;\n      scrollIntoLast();\n      if (channel && (channelUrl === channel?.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n          payload: message,\n        });\n      }\n    }));\n    subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n      const { channel, message } = msg;\n      if (channel && (channelUrl === channel?.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_START,\n          payload: { message, channel },\n        });\n      }\n    }));\n    subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (msg) => {\n      const { channel, message } = msg;\n      scrollIntoLast();\n      if (channel && (channelUrl === channel?.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n          payload: { message, channel },\n        });\n      }\n    }));\n    subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n      const { channel, message, fromSelector } = msg;\n      if (fromSelector && channel && (channelUrl === channel?.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: { channel, message },\n        });\n      }\n    }));\n    subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (msg) => {\n      const { channel, messageId } = msg;\n      if (channel && (channelUrl === channel?.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED,\n          payload: messageId,\n        });\n      }\n    }));\n\n    return () => {\n      if (subscriber) {\n        subscriber.forEach((s) => {\n          try {\n            s.remove();\n          } catch {\n            //\n          }\n        });\n      }\n    };\n  }, [channelUrl, sdkInit]);\n  return (\n    <OpenChannelContext.Provider value={{\n      // props\n      channelUrl,\n      children,\n      isMessageGroupingEnabled,\n      queries,\n      onBeforeSendUserMessage,\n      messageLimit,\n      onBeforeSendFileMessage,\n      onChatHeaderActionClick,\n      // store\n      allMessages,\n      loading,\n      initialized,\n      currentOpenChannel,\n      isInvalid,\n      hasMore,\n      lastMessageTimestamp,\n      operators,\n      bannedParticipantIds,\n      mutedParticipantIds,\n      // derived/utils\n      messageInputRef,\n      conversationScrollRef,\n      disabled,\n      amIBanned,\n      amIMuted,\n      amIOperator,\n      checkScrollBottom,\n      fetchMore,\n      onScroll,\n      handleSendMessage,\n      handleFileUpload,\n      updateMessage,\n      deleteMessage,\n      resendMessage,\n    }}>\n      <UserProfileProvider\n        isOpenChannel\n        renderUserProfile={props?.renderUserProfile}\n        disableUserProfile={props?.disableUserProfile}\n      >\n        {children}\n      </UserProfileProvider>\n    </OpenChannelContext.Provider>\n  );\n}\n\nexport type UseOpenChannelType = () => OpenChannelInterface;\nconst useOpenChannelContext: UseOpenChannelType = () => React.useContext(OpenChannelContext);\n\nexport {\n  OpenChannelProvider,\n  useOpenChannelContext,\n};\n"],"names":["getMessageCreatedAt","message","format","createdAt","shouldFetchMore","messageLength","maxMessages","scrollIntoLast","intialTry","MAX_TRIES","currentTry","scrollDOM","document","querySelector","scrollTop","scrollHeight","error","setTimeout","isSameGroup","comparingMessage","messageType","sender","userId","message_","comparingMessage_","sendingStatus","compareMessagesForGrouping","prevMessage","currMessage","nextMessage","kFormatter","num","Math","abs","toFixed","isOperator","openChannel","operators","map","operator","indexOf","isDisabledBecauseFrozen","isFrozen","isDisabledBecauseMuted","mutedParticipantIds","fetchWithListQuery","listQuery","logger","eachQueryNextCallback","fetchList","query","hasNext","next","then","users","catch","warning","info","pxToNumber","px","parsed","Number","parseFloat","isNaN","SET_CURRENT_CHANNEL","SET_CHANNEL_INVALID","RESET_MESSAGES","GET_PREV_MESSAGES_START","GET_PREV_MESSAGES_SUCESS","GET_PREV_MESSAGES_FAIL","SENDING_MESSAGE_FAILED","SENDING_MESSAGE_SUCCEEDED","SENDING_MESSAGE_START","RESENDING_MESSAGE_START","FETCH_PARTICIPANT_LIST","FETCH_BANNED_USER_LIST","FETCH_MUTED_USER_LIST","TRIM_MESSAGE_LIST","ON_MESSAGE_RECEIVED","ON_MESSAGE_UPDATED","ON_MESSAGE_DELETED","ON_MESSAGE_DELETED_BY_REQ_ID","ON_OPERATOR_UPDATED","ON_USER_ENTERED","ON_USER_EXITED","ON_USER_MUTED","ON_USER_UNMUTED","ON_USER_BANNED","ON_USER_UNBANNED","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_CHANNEL_CHANGED","ON_CHANNEL_DELETED","ON_META_DATA_CREATED","ON_META_DATA_UPDATED","ON_META_DATA_DELETED","ON_META_COUNTERS_CREATED","ON_META_COUNTERS_UPDATED","ON_META_COUNTERS_DELETED","ON_MENTION_RECEIVED","reducer","state","action","type","actionTypes","allMessages","gottenChannel","payload","isInvalid","currentOpenChannel","url","participants","bannedParticipantIds","loading","isFailed","_b","_c","_d","messages","hasMore","lastMessageTimestamp","actionChannelUrl","receivedMessages_1","_hasMore","_lastMessageTimestamp","stateChannel","stateChannelUrl","filteredAllMessages","filter","find","_a","messageId","compareIds","initialized","_e","message_1","channel","some","m","reqId","sentMessage_1","newMessages","sentMessage_2","messageLimit","length","sliceAt","slice","eventedChannel","resentMessage_1","fetchedParticipantList","fetchedBannedUserList","every","user","fetchedMutedUserList","receivedMessage","updatedMessage_1","currentChannel","isIdentical","deletedMessageId_1","updatedOperators","enteredUser","exitedUser_1","participant","mutedUser","unmutedUser_1","bannedUser","currentUser","unbannedUser_1","frozenChannel","frozen","unfrozenChannel","changedChannel","deletedChannelUrl","initialState","useSetChannel","channelUrl","sdkInit","fetchingParticipants","sdk","messagesDispatcher","useEffect","getChannel","messageActionTypes","enter","bannedParticipantListQuery","createBannedUserListQuery","mutedParticipantListQuery","createMutedUserListQuery","utils","participantListQuery","createParticipantListQuery","useHandleChannelEvents","checkScrollBottom","messageReceiverId","uuidv4","addOpenChannelHandler","channelHandlerParams","onMessageReceived","scrollToEnd","onMessageUpdated","onMessageDeleted","onOperatorUpdated","onUserEntered","onUserExited","onUserMuted","onUserUnmuted","onUserBanned","onUserUnbanned","onChannelFrozen","onChannelUnfrozen","onChannelChanged","onMetaDataCreated","metaData","onMetaDataUpdated","onMetaDataDeleted","metaDataKeys","onMetaCounterCreated","metaCounter","onMetaCounterUpdated","onMetaCounterDeleted","metaCounterKeys","onMentionReceived","onChannelDeleted","channelType","ChannelType","OPEN","ChannelHandler","OpenChannelHandler","removeOpenChannelHandler","useInitialMessagesFetch","userFilledMessageListParams","getMessagesByTimestamp","messageListParams_1","nextResultSize","prevResultSize","isInclusive","includeReactions","Object","keys","forEach","key","messageListParams","Date","getTime","useScrollCallback","fetchMore","useCallback","callback","useCheckScrollBottom","conversationScrollRef","isBottom","current","conversationScroll","clientHeight","useSendMessageCallback","onBeforeSendUserMessage","messageInputRef","text","innerText","createParamsDefault","txt","trim","toString","params","createCustomParams","isBottom_1","sendUserMessage","onPending","pendingMessage","onSucceeded","onFailed","code","useFileUploadCallback","imageCompression","onBeforeSendFileMessage","file","compressionRate_1","resizingWidth_1","resizingHeight_1","createCustomParams_1","compressibleFileType","compressibleRatio","compressibleDiamensions_1","canCompressImage","createParamsDefault_1","file_","image_1","createElement","src","URL","createObjectURL","onload","revokeObjectURL","canvas","imageWidth","naturalWidth","width","imageHeight","naturalHeight","height","targetWidth","targetHeight","context","getContext","drawImage","toBlob","newImageBlob","compressedFile","File","name","sendFileMessage","requestState","localUrl","useUpdateMessageCallback","updateUserMessage","useDeleteMessageCallback","messageToDelete","deleteMessage","useResendMessageCallback","failedMessage","isResendable","resendUserMessage","resendFileMessage","console","THROTTLE_TIMER","useTrimMessageList","messagesLength","useState","inProgress","setInProgress","OpenChannelContext","React","createContext","undefined","OpenChannelProvider","props","children","isMessageGroupingEnabled","queries","onChatHeaderActionClick","globalStore","useSendbirdStateContext","stores","sdkStore","userStore","config","isOnline","pubSub","_g","useReducer","messagesReducer","messagesInitialState","messagesStore","useRef","disabled","amIBanned","useMemo","amIMuted","amIOperator","onScroll","handleSendMessage","handleFileUpload","updateMessage","resendMessage","subscriber","Map","subscribe","set","topics","msg","fromSelector","s","remove","UserProfileProvider","renderUserProfile","disableUserProfile","useOpenChannelContext","useContext"],"mappings":"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"}