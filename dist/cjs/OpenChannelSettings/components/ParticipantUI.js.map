{"version":3,"file":"ParticipantUI.js","sources":["../../../../src/smart-components/OpenChannelSettings/components/ParticipantUI/ParticipantItem.tsx","../../../../src/smart-components/OpenChannelSettings/components/ParticipantUI/index.tsx"],"sourcesContent":["import React, {\n  ReactElement,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport type { User } from '@sendbird/chat';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\n\nimport { UserProfileContext } from '../../../../lib/UserProfileContext';\nimport Button, { ButtonTypes, ButtonSizes } from '../../../../ui/Button';\nimport Accordion from '../../../../ui/Accordion';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\nimport Avatar from '../../../../ui/Avatar/index';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport ParticipantsModal from './ParticipantsModal';\nimport UserProfile from '../../../../ui/UserProfile';\nimport ContextMenu, { MenuItems } from '../../../../ui/ContextMenu';\nimport { useOpenChannelSettingsContext } from '../../context/OpenChannelSettingsProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\n\nconst SHOWN_MEMBER_MAX = 10;\n\ninterface UserListItemProps {\n  member: User;\n  currentUser?: string;\n}\n\nexport const UserListItem: React.FC<UserListItemProps> = ({\n  member,\n  currentUser,\n}: UserListItemProps) => {\n  const avatarRef = useRef(null);\n  const {\n    disableUserProfile,\n    renderUserProfile,\n  } = useContext(UserProfileContext);\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-participants-accordion__member\">\n      <div className=\"sendbird-participants-accordion__member-avatar\">\n        <ContextMenu\n          menuTrigger={(toggleDropdown) => (\n            <Avatar\n              onClick={() => {\n                if (!disableUserProfile) {\n                  toggleDropdown();\n                }\n              }}\n              ref={avatarRef}\n              src={member.profileUrl}\n              width={24}\n              height={24}\n            />\n          )}\n          menuItems={(closeDropdown) => (\n            <MenuItems\n              openLeft\n              parentRef={avatarRef}\n              // for catching location(x, y) of MenuItems\n              parentContainRef={avatarRef}\n              // for toggling more options(menus & reactions)\n              closeDropdown={closeDropdown}\n              style={{ paddingTop: 0, paddingBottom: 0 }}\n            >\n              {\n                renderUserProfile\n                  ? renderUserProfile({\n                    user: member,\n                    currentUserId: currentUser,\n                    close: closeDropdown,\n                  })\n                  : (\n                    <UserProfile\n                      disableMessaging\n                      user={member}\n                      currentUserId={currentUser}\n                      onSuccess={closeDropdown}\n                    />\n                  )\n              }\n            </MenuItems>\n          )}\n        />\n      </div>\n      <Label type={LabelTypography.SUBTITLE_2} color={LabelColors.ONBACKGROUND_1}>\n        {member.nickname || stringSet.NO_NAME}\n        {\n          (currentUser === member.userId) && (\n            stringSet.CHANNEL_SETTING__MEMBERS__YOU\n          )\n        }\n      </Label>\n    </div>\n  );\n};\n\nexport interface ParticipantsAccordionProps {\n  maxMembers?: number;\n}\n\nexport default function ParticipantsAccordion(props: ParticipantsAccordionProps): ReactElement {\n  const maxMembers = props?.maxMembers || SHOWN_MEMBER_MAX;\n  const { channel } = useOpenChannelSettingsContext();\n  const globalState = useSendbirdStateContext();\n  const currentUser = globalState?.config?.userId;\n  const [participants, setParticipants] = useState([]);\n  const [showMoreModal, setShowMoreModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  useEffect(() => {\n    if (!channel || !channel?.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel?.createParticipantListQuery({});\n    participantListQuery.next().then((participantList) => {\n      setParticipants(participantList);\n    });\n  }, [channel]);\n\n  return (\n    <Accordion\n      className=\"sendbird-participants-accordion\"\n      id=\"participants\"\n      renderTitle={() => (\n        <>\n          <Icon\n            type={IconTypes.MEMBERS}\n            fillColor={IconColors.PRIMARY}\n            width={24}\n            height={24}\n            className=\"sendbird-openchannel-settings__accordion-icon\"\n          />\n          <Label\n            type={LabelTypography.SUBTITLE_1}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE}\n          </Label>\n        </>\n      )}\n      renderContent={() => (\n        <div className=\"\">\n          <div className=\"sendbird-participants-accordion__list\">\n            {\n              participants.slice(0, maxMembers).map((p) => (\n                <UserListItem\n                  member={p}\n                  currentUser={currentUser}\n                  key={p.userId}\n                />\n              ))\n            }\n            {\n              (participants && participants.length === 0)\n                ? (\n                    <Label\n                      className=\"sendbird-channel-settings__empty-list\"\n                      type={LabelTypography.SUBTITLE_2}\n                      color={LabelColors.ONBACKGROUND_3}\n                    >\n                      {stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST}\n                    </Label>\n                ): null\n            }\n          </div>\n          {\n            participants.length >= maxMembers && (\n              <div className=\"sendbird-participants-accordion__footer\">\n                <Button\n                  className=\"sendbird-participants-accordion__footer__all-participants\"\n                  type={ButtonTypes.SECONDARY}\n                  size={ButtonSizes.SMALL}\n                  onClick={() => setShowMoreModal(true)}\n                >\n                  {stringSet.OPEN_CHANNEL_SETTINGS__SEE_ALL}\n                </Button>\n                {\n                  showMoreModal && (\n                    <ParticipantsModal\n                      onCancel={() => {\n                        setShowMoreModal(false);\n                      }}\n                    />\n                  )\n                }\n              </div>\n            )\n          }\n        </div>\n      )}\n    />\n  );\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\nimport type { User } from '@sendbird/chat';\nimport type { ParticipantListQuery } from '@sendbird/chat/openChannel';\n\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\n\nimport { UserListItem } from './ParticipantItem';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport { useOpenChannelSettingsContext } from '../../context/OpenChannelSettingsProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\n\nexport default function ParticipantsList(): ReactElement {\n  const globalState = useSendbirdStateContext();\n  const currentUser = globalState?.config?.userId;\n  const { channel } = useOpenChannelSettingsContext();\n  const { stringSet } = useContext(LocalizationContext);\n  const [participants, setParticipants] = useState<Array<User>|null>([]);\n  const [participantListQuery, setParticipantListQuery] = useState<ParticipantListQuery | null>(null);\n  useEffect(() => {\n    if (!channel || !channel?.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel?.createParticipantListQuery({});\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next().then((participantList) => {\n      setParticipants(participantList);\n    });\n  }, [channel]);\n  return (\n    <div\n      className=\"sendbird-openchannel-settings__participants-list\"\n      onScroll={(e) => {\n        const { hasNext } = participantListQuery;\n        const target = e.target as HTMLTextAreaElement;\n        const fetchMore = (\n          target.clientHeight + target.scrollTop === target.scrollHeight\n        );\n\n        if (hasNext && fetchMore) {\n          participantListQuery.next().then((fetchedParticipants) => {\n            setParticipants([\n              ...participants,\n              ...fetchedParticipants,\n            ])\n          });\n        }\n      }}\n    >\n      <div>\n        {\n          participants.map((p: User) => (\n            <UserListItem\n              member={p}\n              currentUser={currentUser}\n              key={p.userId}\n            />\n          ))\n        }\n        {\n          (participants && participants.length === 0)\n            ? (\n                <Label\n                  className=\"sendbird-channel-settings__empty-list\"\n                  type={LabelTypography.SUBTITLE_2}\n                  color={LabelColors.ONBACKGROUND_3}\n                >\n                  {stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST}\n                </Label>\n            ): null\n        }\n      </div>\n    </div>\n  )\n}\n"],"names":["UserListItem","_a","member","currentUser","avatarRef","useRef","_b","useContext","UserProfileContext","disableUserProfile","renderUserProfile","stringSet","LocalizationContext","React","ContextMenu","toggleDropdown","Avatar","profileUrl","closeDropdown","MenuItems","paddingTop","paddingBottom","user","currentUserId","close","UserProfile","Label","LabelTypography","SUBTITLE_2","LabelColors","ONBACKGROUND_1","nickname","NO_NAME","userId","CHANNEL_SETTING__MEMBERS__YOU","ParticipantsList","globalState","useSendbirdStateContext","config","channel","useOpenChannelSettingsContext","useState","participants","setParticipants","_c","participantListQuery","setParticipantListQuery","useEffect","createParticipantListQuery","next","then","participantList","e","hasNext","target","fetchMore","clientHeight","scrollTop","scrollHeight","fetchedParticipants","__spreadArray","map","p","length","ONBACKGROUND_3","OPEN_CHANNEL_SETTINGS__EMPTY_LIST"],"mappings":"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"}