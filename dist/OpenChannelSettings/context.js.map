{"version":3,"file":"context.js","sources":["../../src/smart-components/OpenChannelSettings/context/OpenChannelSettingsProvider.tsx"],"sourcesContent":["import React, {\n  useEffect,\n  useState,\n} from 'react';\nimport type { OpenChannel, OpenChannelUpdateParams, SendbirdOpenChat } from '@sendbird/chat/openChannel';\n\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport { RenderUserProfileProps } from '../../../types';\n\nexport interface OpenChannelSettingsContextProps {\n  channelUrl: string;\n  children?: React.ReactNode;\n  onCloseClick?(): void;\n  onBeforeUpdateChannel?(currentTitle: string, currentImg: File, data: string): OpenChannelUpdateParams;\n  onChannelModified?(channel: OpenChannel): void;\n  onDeleteChannel?(channel: OpenChannel): void;\n  disableUserProfile?: boolean;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactNode;\n}\n\ninterface OpenChannelSettingsContextType {\n  channelUrl: string;\n  channel?: OpenChannel;\n  setChannel?: React.Dispatch<React.SetStateAction<OpenChannel>>;\n  onCloseClick?(): void;\n  onBeforeUpdateChannel?(currentTitle: string, currentImg: File, data: string): OpenChannelUpdateParams;\n  onChannelModified?(channel: OpenChannel): void;\n  onDeleteChannel?(channel: OpenChannel): void;\n}\n\nconst OpenChannelSettingsContext = React.createContext<OpenChannelSettingsContextType | null>(undefined);\n\nconst OpenChannelSettingsProvider: React.FC<OpenChannelSettingsContextProps> = (props: OpenChannelSettingsContextProps) => {\n  const {\n    children,\n    channelUrl,\n    onCloseClick,\n    onChannelModified,\n    onBeforeUpdateChannel,\n    onDeleteChannel,\n  } = props;\n\n  // fetch store from <SendbirdProvider />\n  const globalStore = useSendbirdStateContext();\n  const sdk = globalStore?.stores?.sdkStore?.sdk as SendbirdOpenChat;\n\n  const logger = globalStore?.config?.logger;\n\n  const [channel, setChannel] = useState<OpenChannel | null>(null);\n  useEffect(() => {\n    if (!channelUrl || !sdk.openChannel) {\n      setChannel(null);\n      return;\n    }\n\n    sdk.openChannel.getChannel(channelUrl)\n      .then((channel) => {\n        logger.info('open channel setting: fetched', channel);\n        setChannel(channel);\n      })\n      .catch((error) => {\n        logger.error('open channel setting: error fetching', error);\n        setChannel(null);\n      });\n  }, [channelUrl, sdk]);\n\n  return (\n    <OpenChannelSettingsContext.Provider value={{\n      channelUrl,\n      channel,\n      setChannel,\n      onCloseClick,\n      onChannelModified,\n      onBeforeUpdateChannel,\n      onDeleteChannel,\n    }}>\n      <UserProfileProvider\n        isOpenChannel\n        renderUserProfile={props?.renderUserProfile}\n        disableUserProfile={props?.disableUserProfile}\n      >\n        {children}\n      </UserProfileProvider>\n    </OpenChannelSettingsContext.Provider>\n  );\n}\n\ntype useOpenChannelSettingsType = () => OpenChannelSettingsContextType;\nconst useOpenChannelSettingsContext: useOpenChannelSettingsType = () => React.useContext(OpenChannelSettingsContext);\n\nexport {\n  OpenChannelSettingsProvider,\n  useOpenChannelSettingsContext,\n};\n"],"names":["OpenChannelSettingsContext","React","createContext","undefined","OpenChannelSettingsProvider","props","children","channelUrl","onCloseClick","onChannelModified","onBeforeUpdateChannel","onDeleteChannel","globalStore","useSendbirdStateContext","sdk","_b","_a","stores","sdkStore","logger","_c","config","_d","useState","channel","setChannel","useEffect","openChannel","getChannel","then","info","catch","error","renderUserProfile","disableUserProfile","useOpenChannelSettingsContext","useContext"],"mappings":"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"}