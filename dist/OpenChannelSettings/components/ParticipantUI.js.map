{"version":3,"file":"ParticipantUI.js","sources":["../../../src/smart-components/OpenChannelSettings/components/ParticipantUI/ParticipantItem.tsx","../../../src/smart-components/OpenChannelSettings/components/ParticipantUI/index.tsx"],"sourcesContent":["import React, {\n  ReactElement,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport type { User } from '@sendbird/chat';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\n\nimport { UserProfileContext } from '../../../../lib/UserProfileContext';\nimport Button, { ButtonTypes, ButtonSizes } from '../../../../ui/Button';\nimport Accordion from '../../../../ui/Accordion';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\nimport Avatar from '../../../../ui/Avatar/index';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport ParticipantsModal from './ParticipantsModal';\nimport UserProfile from '../../../../ui/UserProfile';\nimport ContextMenu, { MenuItems } from '../../../../ui/ContextMenu';\nimport { useOpenChannelSettingsContext } from '../../context/OpenChannelSettingsProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\n\nconst SHOWN_MEMBER_MAX = 10;\n\ninterface UserListItemProps {\n  member: User;\n  currentUser?: string;\n}\n\nexport const UserListItem: React.FC<UserListItemProps> = ({\n  member,\n  currentUser,\n}: UserListItemProps) => {\n  const avatarRef = useRef(null);\n  const {\n    disableUserProfile,\n    renderUserProfile,\n  } = useContext(UserProfileContext);\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-participants-accordion__member\">\n      <div className=\"sendbird-participants-accordion__member-avatar\">\n        <ContextMenu\n          menuTrigger={(toggleDropdown) => (\n            <Avatar\n              onClick={() => {\n                if (!disableUserProfile) {\n                  toggleDropdown();\n                }\n              }}\n              ref={avatarRef}\n              src={member.profileUrl}\n              width={24}\n              height={24}\n            />\n          )}\n          menuItems={(closeDropdown) => (\n            <MenuItems\n              openLeft\n              parentRef={avatarRef}\n              // for catching location(x, y) of MenuItems\n              parentContainRef={avatarRef}\n              // for toggling more options(menus & reactions)\n              closeDropdown={closeDropdown}\n              style={{ paddingTop: 0, paddingBottom: 0 }}\n            >\n              {\n                renderUserProfile\n                  ? renderUserProfile({\n                    user: member,\n                    currentUserId: currentUser,\n                    close: closeDropdown,\n                  })\n                  : (\n                    <UserProfile\n                      disableMessaging\n                      user={member}\n                      currentUserId={currentUser}\n                      onSuccess={closeDropdown}\n                    />\n                  )\n              }\n            </MenuItems>\n          )}\n        />\n      </div>\n      <Label type={LabelTypography.SUBTITLE_2} color={LabelColors.ONBACKGROUND_1}>\n        {member.nickname || stringSet.NO_NAME}\n        {\n          (currentUser === member.userId) && (\n            stringSet.CHANNEL_SETTING__MEMBERS__YOU\n          )\n        }\n      </Label>\n    </div>\n  );\n};\n\nexport interface ParticipantsAccordionProps {\n  maxMembers?: number;\n}\n\nexport default function ParticipantsAccordion(props: ParticipantsAccordionProps): ReactElement {\n  const maxMembers = props?.maxMembers || SHOWN_MEMBER_MAX;\n  const { channel } = useOpenChannelSettingsContext();\n  const globalState = useSendbirdStateContext();\n  const currentUser = globalState?.config?.userId;\n  const [participants, setParticipants] = useState([]);\n  const [showMoreModal, setShowMoreModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  useEffect(() => {\n    if (!channel || !channel?.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel?.createParticipantListQuery({});\n    participantListQuery.next().then((participantList) => {\n      setParticipants(participantList);\n    });\n  }, [channel]);\n\n  return (\n    <Accordion\n      className=\"sendbird-participants-accordion\"\n      id=\"participants\"\n      renderTitle={() => (\n        <>\n          <Icon\n            type={IconTypes.MEMBERS}\n            fillColor={IconColors.PRIMARY}\n            width={24}\n            height={24}\n            className=\"sendbird-openchannel-settings__accordion-icon\"\n          />\n          <Label\n            type={LabelTypography.SUBTITLE_1}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE}\n          </Label>\n        </>\n      )}\n      renderContent={() => (\n        <div className=\"\">\n          <div className=\"sendbird-participants-accordion__list\">\n            {\n              participants.slice(0, maxMembers).map((p) => (\n                <UserListItem\n                  member={p}\n                  currentUser={currentUser}\n                  key={p.userId}\n                />\n              ))\n            }\n            {\n              (participants && participants.length === 0)\n                ? (\n                    <Label\n                      className=\"sendbird-channel-settings__empty-list\"\n                      type={LabelTypography.SUBTITLE_2}\n                      color={LabelColors.ONBACKGROUND_3}\n                    >\n                      {stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST}\n                    </Label>\n                ): null\n            }\n          </div>\n          {\n            participants.length >= maxMembers && (\n              <div className=\"sendbird-participants-accordion__footer\">\n                <Button\n                  className=\"sendbird-participants-accordion__footer__all-participants\"\n                  type={ButtonTypes.SECONDARY}\n                  size={ButtonSizes.SMALL}\n                  onClick={() => setShowMoreModal(true)}\n                >\n                  {stringSet.OPEN_CHANNEL_SETTINGS__SEE_ALL}\n                </Button>\n                {\n                  showMoreModal && (\n                    <ParticipantsModal\n                      onCancel={() => {\n                        setShowMoreModal(false);\n                      }}\n                    />\n                  )\n                }\n              </div>\n            )\n          }\n        </div>\n      )}\n    />\n  );\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\nimport type { User } from '@sendbird/chat';\nimport type { ParticipantListQuery } from '@sendbird/chat/openChannel';\n\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\n\nimport { UserListItem } from './ParticipantItem';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport { useOpenChannelSettingsContext } from '../../context/OpenChannelSettingsProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\n\nexport default function ParticipantsList(): ReactElement {\n  const globalState = useSendbirdStateContext();\n  const currentUser = globalState?.config?.userId;\n  const { channel } = useOpenChannelSettingsContext();\n  const { stringSet } = useContext(LocalizationContext);\n  const [participants, setParticipants] = useState<Array<User>|null>([]);\n  const [participantListQuery, setParticipantListQuery] = useState<ParticipantListQuery | null>(null);\n  useEffect(() => {\n    if (!channel || !channel?.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel?.createParticipantListQuery({});\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next().then((participantList) => {\n      setParticipants(participantList);\n    });\n  }, [channel]);\n  return (\n    <div\n      className=\"sendbird-openchannel-settings__participants-list\"\n      onScroll={(e) => {\n        const { hasNext } = participantListQuery;\n        const target = e.target as HTMLTextAreaElement;\n        const fetchMore = (\n          target.clientHeight + target.scrollTop === target.scrollHeight\n        );\n\n        if (hasNext && fetchMore) {\n          participantListQuery.next().then((fetchedParticipants) => {\n            setParticipants([\n              ...participants,\n              ...fetchedParticipants,\n            ])\n          });\n        }\n      }}\n    >\n      <div>\n        {\n          participants.map((p: User) => (\n            <UserListItem\n              member={p}\n              currentUser={currentUser}\n              key={p.userId}\n            />\n          ))\n        }\n        {\n          (participants && participants.length === 0)\n            ? (\n                <Label\n                  className=\"sendbird-channel-settings__empty-list\"\n                  type={LabelTypography.SUBTITLE_2}\n                  color={LabelColors.ONBACKGROUND_3}\n                >\n                  {stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST}\n                </Label>\n            ): null\n        }\n      </div>\n    </div>\n  )\n}\n"],"names":["UserListItem","_a","member","currentUser","avatarRef","useRef","_b","useContext","UserProfileContext","disableUserProfile","renderUserProfile","stringSet","LocalizationContext","React","toggleDropdown","profileUrl","closeDropdown","paddingTop","paddingBottom","user","currentUserId","close","UserProfile","LabelTypography","SUBTITLE_2","LabelColors","ONBACKGROUND_1","nickname","NO_NAME","userId","CHANNEL_SETTING__MEMBERS__YOU","ParticipantsList","globalState","useSendbirdStateContext","config","channel","useOpenChannelSettingsContext","useState","participants","setParticipants","_c","participantListQuery","setParticipantListQuery","useEffect","createParticipantListQuery","next","then","participantList","e","hasNext","target","fetchMore","clientHeight","scrollTop","scrollHeight","fetchedParticipants","map","p","length","ONBACKGROUND_3","OPEN_CHANNEL_SETTINGS__EMPTY_LIST"],"mappings":"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"}