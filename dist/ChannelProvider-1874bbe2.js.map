{"version":3,"file":"ChannelProvider-1874bbe2.js","sources":["../src/smart-components/Channel/context/dux/actionTypes.js","../src/smart-components/Channel/context/utils.js","../src/smart-components/Channel/context/dux/initialState.js","../src/smart-components/Channel/context/dux/reducers.js","../src/smart-components/Channel/context/hooks/useHandleChannelEvents.ts","../src/smart-components/Channel/context/hooks/useGetChannel.js","../src/smart-components/Channel/context/hooks/useInitialMessagesFetch.js","../src/smart-components/Channel/context/hooks/useHandleReconnect.ts","../src/smart-components/Channel/context/hooks/useScrollCallback.js","../src/smart-components/Channel/context/hooks/useScrollDownCallback.js","../src/smart-components/Channel/context/hooks/useDeleteMessageCallback.js","../src/smart-components/Channel/context/hooks/useUpdateMessageCallback.js","../src/smart-components/Channel/context/hooks/useResendMessageCallback.js","../src/smart-components/Channel/context/hooks/useSendMessageCallback.js","../src/smart-components/Channel/context/hooks/useSendFileMessageCallback.js","../src/smart-components/Channel/context/hooks/useMemoizedEmojiListItems.jsx","../src/smart-components/Channel/context/hooks/useToggleReactionCallback.js","../src/smart-components/Channel/context/hooks/useScrollToMessage.ts","../src/smart-components/Channel/context/ChannelProvider.tsx"],"sourcesContent":["export const RESET_MESSAGES = 'RESET_MESSAGES';\n\nexport const FETCH_INITIAL_MESSAGES_START = 'FETCH_INITIAL_MESSAGES_START';\nexport const FETCH_INITIAL_MESSAGES_SUCCESS = 'FETCH_INITIAL_MESSAGES_SUCCESS';\nexport const FETCH_INITIAL_MESSAGES_FAILURE = 'FETCH_INITIAL_MESSAGES_FAILURE';\nexport const FETCH_PREV_MESSAGES_SUCCESS = 'FETCH_PREV_MESSAGES_SUCCESS';\nexport const FETCH_PREV_MESSAGES_FAILURE = 'FETCH_PREV_MESSAGES_FAILURE';\nexport const FETCH_NEXT_MESSAGES_SUCCESS = 'FETCH_NEXT_MESSAGES_SUCCESS';\nexport const FETCH_NEXT_MESSAGES_FAILURE = 'FETCH_NEXT_MESSAGES_FAILURE';\n\nexport const SEND_MESSAGEGE_START = 'SEND_MESSAGEGE_START';\nexport const SEND_MESSAGEGE_SUCESS = 'SEND_MESSAGEGE_SUCESS';\nexport const SEND_MESSAGEGE_FAILURE = 'SEND_MESSAGEGE_FAILURE';\n\nexport const RESEND_MESSAGEGE_START = 'RESEND_MESSAGEGE_START';\n\nexport const ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nexport const ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nexport const ON_MESSAGE_THREAD_INFO_UPDATED = 'ON_MESSAGE_THREAD_INFO_UPDATED';\nexport const ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nexport const ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nexport const MARK_AS_READ = 'MARK_AS_READ';\n\nexport const ON_REACTION_UPDATED = 'ON_REACTION_UPDATED';\nexport const SET_EMOJI_CONTAINER = 'SET_EMOJI_CONTAINER';\n\nexport const MESSAGE_LIST_PARAMS_CHANGED = 'MESSAGE_LIST_PARAMS_CHANGED';\n","import format from 'date-fns/format';\nimport * as channelActions from './dux/actionTypes';\nimport * as topics from '../../../lib/pubSub/topics';\n\nimport {\n  getSendingMessageStatus,\n  getOutgoingMessageStates,\n  isReadMessage,\n} from '../../../utils';\n\nconst MessageStatusType = getOutgoingMessageStates();\nconst UNDEFINED = 'undefined';\nconst { SUCCEEDED, FAILED, PENDING } = getSendingMessageStatus();\n\nexport const scrollIntoLast = (intialTry = 0) => {\n  const MAX_TRIES = 10;\n  const currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = document.querySelector('.sendbird-conversation__messages-padding');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = (channelUrl, pubSub, dispatcher) => {\n  const subscriber = new Map();\n  if (!pubSub || !pubSub.subscribe) return subscriber;\n  subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    scrollIntoLast();\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_SUCESS,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel, message } = msg;\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_START,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    scrollIntoLast();\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_SUCESS,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message, fromSelector } = msg;\n    if (fromSelector && (channelUrl === channel?.url)) {\n      dispatcher({\n        type: channelActions.ON_MESSAGE_UPDATED,\n        payload: { channel, message },\n      });\n    }\n  }));\n  subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (msg) => {\n    const { channel, messageId } = msg;\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.ON_MESSAGE_DELETED,\n        payload: messageId,\n      });\n    }\n  }));\n\n  return subscriber;\n};\n\nexport const getParsedStatus = (message, currentGroupChannel) => {\n  if (message.requestState === FAILED) {\n    return MessageStatusType.FAILED;\n  }\n\n  if (message.requestState === PENDING) {\n    return MessageStatusType.PENDING;\n  }\n\n  if (message.requestState === SUCCEEDED) {\n    if (!currentGroupChannel) {\n      return MessageStatusType.SENT;\n    }\n\n    const unreadMemberCount = currentGroupChannel?.getUnreadMemberCount(message);\n    if (unreadMemberCount === 0) {\n      return MessageStatusType.READ;\n    }\n\n    const isDelivered = currentGroupChannel?.getUndeliveredMemberCount(message) === 0;\n    if (isDelivered) {\n      return MessageStatusType.DELIVERED;\n    }\n\n    return MessageStatusType.SENT;\n  }\n\n  return null;\n};\n\nexport const isOperator = (groupChannel = {}) => {\n  const myRole = groupChannel?.myRole;\n  return myRole === 'operator';\n};\n\nexport const isDisabledBecauseFrozen = (groupChannel = {}) => {\n  const isFrozen = groupChannel?.isFrozen;\n  return isFrozen && !isOperator(groupChannel);\n};\n\nexport const isDisabledBecauseMuted = (groupChannel = {}) => {\n  const myMutedState = groupChannel?.myMutedState;\n  return myMutedState === 'muted';\n};\n\nexport const getEmojiCategoriesFromEmojiContainer = (emojiContainer = {}) => (\n  emojiContainer.emojiCategories ? emojiContainer.emojiCategories : []\n);\n\nexport const getAllEmojisFromEmojiContainer = (emojiContainer = {}) => {\n  const { emojiCategories = [] } = emojiContainer;\n  const allEmojis = [];\n\n  for (let categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    const { emojis } = emojiCategories[categoryIndex];\n    for (let emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      allEmojis.push(emojis[emojiIndex]);\n    }\n  }\n  return allEmojis;\n};\n\nexport const getEmojisFromEmojiContainer = (emojiContainer = {}, emojiCategoryId = '') => (\n  emojiContainer.emojiCategories\n    ? emojiContainer.emojiCategories\n      .filter((emojiCategory) => emojiCategory.id === emojiCategoryId)[0].emojis\n    : []\n);\n\nexport const getAllEmojisMapFromEmojiContainer = (emojiContainer = {}) => {\n  const { emojiCategories = [] } = emojiContainer;\n  const allEmojisMap = new Map();\n\n  for (let categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    const { emojis } = emojiCategories[categoryIndex];\n    for (let emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      const { key, url } = emojis[emojiIndex];\n      allEmojisMap.set(key, url);\n    }\n  }\n  return allEmojisMap;\n};\n\nexport const getNicknamesMapFromMembers = (members = []) => {\n  const nicknamesMap = new Map();\n  for (let memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    const { userId, nickname } = members[memberIndex];\n    nicknamesMap.set(userId, nickname);\n  }\n  return nicknamesMap;\n};\n\nexport const getMessageCreatedAt = (message) => format(message.createdAt, 'p');\n\nexport const isSameGroup = (message, comparingMessage, currentChannel) => {\n  if (!(message\n    && comparingMessage\n    && message.messageType\n    && message.messageType !== 'admin'\n    && comparingMessage.messageType\n    && comparingMessage?.messageType !== 'admin'\n    && message?.sender\n    && comparingMessage?.sender\n    && message?.createdAt\n    && comparingMessage?.createdAt\n    && message?.sender?.userId\n    && comparingMessage?.sender?.userId\n  )) {\n    return false;\n  }\n  return (\n    message?.sendingStatus === comparingMessage?.sendingStatus\n    && message?.sender?.userId === comparingMessage?.sender?.userId\n    && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)\n    && isReadMessage(currentChannel, message) === isReadMessage(currentChannel, comparingMessage)\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage,\n  currMessage,\n  nextMessage,\n  currentChannel,\n) => {\n  const sendingStatus = currMessage?.sendingStatus || '';\n  const isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [\n    isSameGroup(prevMessage, currMessage, currentChannel) && isAcceptable,\n    isSameGroup(currMessage, nextMessage, currentChannel) && isAcceptable,\n  ];\n};\n\nexport const hasOwnProperty = (property) => (payload) => {\n  // eslint-disable-next-line no-prototype-builtins\n  if (payload && payload.hasOwnProperty && payload.hasOwnProperty(property)) {\n    return true;\n  }\n  return false;\n};\n\nexport const passUnsuccessfullMessages = (allMessages, newMessage) => {\n  const { sendingStatus = UNDEFINED } = newMessage;\n  if (sendingStatus === SUCCEEDED || sendingStatus === PENDING) {\n    const lastIndexOfSucceededMessage = allMessages\n      .map((message) => (\n        message.sendingStatus\n        || ((message.isAdminMessage && message.isAdminMessage()) ? SUCCEEDED : UNDEFINED)\n      ))\n      .lastIndexOf(SUCCEEDED);\n    if (lastIndexOfSucceededMessage + 1 < allMessages.length) {\n      const messages = [...allMessages];\n      messages.splice(lastIndexOfSucceededMessage + 1, 0, newMessage);\n      return messages;\n    }\n  }\n  return [\n    ...allMessages,\n    newMessage,\n  ];\n};\n\nexport const pxToNumber = (px) => {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    const parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\n\nexport const isAboutSame = (a, b, px) => (Math.abs(a - b) <= px);\n\nexport default getParsedStatus;\n","export default {\n  initialized: false,\n  loading: false,\n  allMessages: [],\n  currentGroupChannel: { members: [] },\n  // for scrollup\n  hasMorePrev: false,\n  oldestMessageTimeStamp: 0,\n  // for scroll down\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMorePrev, onScrollCallback -> scroll up(default behavior)\n  // hasMoreNext, onScrollDownCallback -> scroll down\n  hasMoreNext: false,\n  latestMessageTimeStamp: 0,\n  emojiContainer: {},\n  unreadSince: null,\n  isInvalid: false,\n  messageListParams: null,\n};\n","import format from 'date-fns/format';\n\nimport * as actionTypes from './actionTypes';\nimport compareIds from '../../../../utils/compareIds';\nimport { PREV_RESULT_SIZE, NEXT_RESULT_SIZE } from '../const';\nimport { passUnsuccessfullMessages } from '../utils';\nimport { filterMessageListParams, getSendingMessageStatus } from '../../../../utils';\n\nconst {\n  SUCCEEDED,\n  FAILED,\n  PENDING,\n} = getSendingMessageStatus();\nconst getOldestMessageTimeStamp = (messages = []) => {\n  const oldestMessage = messages[0];\n  return (oldestMessage && oldestMessage.createdAt) || null;\n};\nconst getLatestMessageTimeStamp = (messages = []) => {\n  const latestMessage = messages[messages.length - 1];\n  return (latestMessage && latestMessage.createdAt) || null;\n};\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actionTypes.RESET_MESSAGES:\n      return {\n        ...state,\n        // when user switches channel, if the previous channel `hasMorePrev`\n        // the onScroll gets called twice, setting hasMorePrev false prevents this\n        hasMorePrev: false,\n        hasMoreNext: false,\n        allMessages: [],\n      };\n    case actionTypes.FETCH_INITIAL_MESSAGES_START: {\n      return {\n        ...state,\n        loading: true,\n        allMessages: [\n          ...state.allMessages.filter((m) => (\n            m.sendingStatus !== SUCCEEDED\n          )),\n        ],\n      };\n    }\n    case actionTypes.FETCH_INITIAL_MESSAGES_SUCCESS: {\n      const {\n        currentGroupChannel,\n        messages,\n      } = action.payload;\n      if (!(currentGroupChannel?.url === state.currentGroupChannel?.url)) {\n        return state;\n      }\n      const oldestMessageTimeStamp = getOldestMessageTimeStamp(messages);\n      const latestMessageTimeStamp = getLatestMessageTimeStamp(messages);\n      return {\n        ...state,\n        loading: false,\n        initialized: true,\n        hasMorePrev: true,\n        hasMoreNext: true,\n        oldestMessageTimeStamp,\n        latestMessageTimeStamp,\n        allMessages: [...messages],\n      };\n    }\n    case actionTypes.FETCH_PREV_MESSAGES_SUCCESS: {\n      const {\n        currentGroupChannel,\n        messages,\n      } = action.payload;\n      if (!(currentGroupChannel?.url === state.currentGroupChannel?.url)) {\n        return state;\n      }\n      const hasMorePrev = messages && messages.length === PREV_RESULT_SIZE + 1;\n      const oldestMessageTimeStamp = getOldestMessageTimeStamp(messages);\n\n      // Remove duplicated messages\n      const duplicatedMessageIds = [];\n      const updatedOldMessages = state.allMessages.map((msg) => {\n        const duplicatedMessage = messages.find(({ messageId }) => (\n          compareIds(messageId, msg.messageId)\n        ));\n        if (!duplicatedMessage) {\n          return msg;\n        }\n        duplicatedMessageIds.push(duplicatedMessage.messageId);\n        return (duplicatedMessage.updatedAt > msg.updatedAt) ? duplicatedMessage : msg;\n      });\n      const filteredNewMessages = (duplicatedMessageIds.length > 0)\n        ? messages.filter((msg) => (\n          !duplicatedMessageIds.find((messageId) => compareIds(messageId, msg.messageId))\n        ))\n        : messages;\n\n      return {\n        ...state,\n        hasMorePrev,\n        oldestMessageTimeStamp,\n        allMessages: [\n          ...filteredNewMessages,\n          ...updatedOldMessages,\n        ],\n      };\n    }\n    case actionTypes.FETCH_NEXT_MESSAGES_SUCCESS: {\n      const {\n        currentGroupChannel,\n        messages,\n      } = action.payload;\n      if (!(currentGroupChannel?.url === state.currentGroupChannel?.url)) {\n        return state;\n      }\n      const hasMoreNext = messages && messages.length === NEXT_RESULT_SIZE + 1;\n      const latestMessageTimeStamp = getLatestMessageTimeStamp(messages);\n\n      // Remove duplicated messages\n      const duplicatedMessageIds = [];\n      const updatedOldMessages = state.allMessages.map((msg) => {\n        const duplicatedMessage = messages.find(({ messageId }) => (\n          compareIds(messageId, msg.messageId)\n        ));\n        if (!duplicatedMessage) {\n          return msg;\n        }\n        duplicatedMessageIds.push(duplicatedMessage.messageId);\n        return (duplicatedMessage.updatedAt > msg.updatedAt) ? duplicatedMessage : msg;\n      });\n      const filteredNewMessages = (duplicatedMessageIds.length > 0)\n        ? messages.filter((msg) => (\n          !duplicatedMessageIds.find((messageId) => compareIds(messageId, msg.messageId))\n        ))\n        : messages;\n\n      return {\n        ...state,\n        hasMoreNext,\n        latestMessageTimeStamp,\n        allMessages: [\n          ...updatedOldMessages,\n          ...filteredNewMessages,\n        ],\n      };\n    }\n    case actionTypes.FETCH_INITIAL_MESSAGES_FAILURE:\n    case actionTypes.FETCH_PREV_MESSAGES_FAILURE:\n    case actionTypes.FETCH_NEXT_MESSAGES_FAILURE: {\n      const { currentGroupChannel } = action.payload;\n      if (currentGroupChannel?.url !== state?.currentGroupChannel?.url) {\n        return state;\n      }\n      return {\n        ...state,\n        loading: false,\n        initialized: false,\n        allMessages: [],\n        hasMorePrev: false,\n        hasMoreNext: false,\n        oldestMessageTimeStamp: null,\n        latestMessageTimeStamp: null,\n      };\n    }\n    case actionTypes.SEND_MESSAGEGE_START:\n      return {\n        ...state,\n        allMessages: [\n          ...state.allMessages,\n          { ...action.payload },\n        ],\n      };\n    case actionTypes.SEND_MESSAGEGE_SUCESS: {\n      const newMessages = state.allMessages.map((m) => (\n        compareIds(m.reqId, action.payload.reqId) ? action.payload : m\n      ));\n      [...newMessages].sort((a, b) => (\n        (\n          a.sendingStatus\n          && b.sendingStatus\n          && a.sendingStatus === SUCCEEDED\n          && (\n            b.sendingStatus === PENDING\n            || b.sendingStatus === FAILED\n          )\n        ) ? -1 : 1\n      ));\n      return {\n        ...state,\n        allMessages: newMessages,\n      };\n    }\n    case actionTypes.SEND_MESSAGEGE_FAILURE: {\n      // eslint-disable-next-line no-param-reassign\n      action.payload.failed = true;\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, action.payload.reqId)\n            ? action.payload\n            : m\n        )),\n      };\n    }\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      return {\n        ...state,\n        currentGroupChannel: action.payload,\n        isInvalid: false,\n      };\n    }\n    case actionTypes.SET_CHANNEL_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      };\n    }\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const { channel, message } = action.payload;\n      const { members } = channel;\n      const { sender } = message;\n      const { currentGroupChannel = {}, unreadSince } = state;\n      const currentGroupChannelUrl = currentGroupChannel?.url;\n\n      if (!compareIds(channel?.url, currentGroupChannelUrl)) {\n        return state;\n      }\n      // Excluded overlapping messages\n      if (state.allMessages.some((msg) => msg.messageId === message.messageId)) {\n        return state;\n      }\n      // Filter by userFilledQuery\n      if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n        return state;\n      }\n\n      if (message.isAdminMessage && message.isAdminMessage()) {\n        return {\n          ...state,\n          allMessages: passUnsuccessfullMessages(state.allMessages, message),\n        };\n      }\n\n      // Update members when sender profileUrl, nickname, friendName has been changed\n      const senderMember = members?.find((m) => (m?.userId === sender?.userId));\n      if ((senderMember?.profileUrl !== sender?.profileUrl)\n        || (senderMember?.friendName !== sender?.friendName)\n        || (senderMember?.nickname !== sender?.nickname)) {\n        channel.members = members.map((member) => {\n          if (member.userId === sender.userId) {\n            return sender;\n          }\n          return member;\n        });\n      }\n      return {\n        ...state,\n        currentGroupChannel: channel,\n        unreadSince: state?.unreadSince ? unreadSince : format(new Date(), 'p MMM dd'),\n        allMessages: passUnsuccessfullMessages(state.allMessages, message),\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const { channel, message } = action.payload;\n      const currentGroupChannelUrl = state?.currentGroupChannel?.url || '';\n      if (!compareIds(channel?.url, currentGroupChannelUrl)) {\n        return state; // Ignore event when it is not for the current channel\n      }\n      if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n        // Delete the message if it doesn't match to the params anymore\n        return {\n          ...state,\n          allMessages: state.allMessages.filter((m) => (\n            !compareIds(m.messageId, message?.messageId)\n          )),\n        };\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, message.messageId)) {\n            return message;\n          }\n          if (compareIds(m.parentMessageId, message.messageId)) {\n            m.parentMessage = message;// eslint-disable-line no-param-reassign\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.ON_MESSAGE_THREAD_INFO_UPDATED: {\n      const { channel, event } = action.payload;\n      const { channelUrl, threadInfo, targetMessageId } = event;\n      const currentGroupChannelUrl = state?.currentGroupChannel?.url || '';\n      if (\n        !compareIds(channel?.url, currentGroupChannelUrl)\n        || !compareIds(channel?.url, channelUrl)\n      ) {\n        return state; // Ignore event when it is not for the current channel\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, targetMessageId)) {\n            // eslint-disable-next-line no-param-reassign\n            m.threadInfo = threadInfo; // Upsert threadInfo to the target message\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.RESEND_MESSAGEGE_START:\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, action.payload.reqId)\n            ? action.payload\n            : m\n        )),\n      };\n    case actionTypes.MARK_AS_READ:\n      if (state.currentGroupChannel?.url !== action.payload?.channel?.url) {\n        return state;\n      }\n      return {\n        ...state,\n        unreadSince: null,\n      };\n    case actionTypes.ON_MESSAGE_DELETED:\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.messageId, action.payload)\n        )),\n      };\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID:\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.reqId, action.payload)\n        )),\n      };\n    case actionTypes.SET_EMOJI_CONTAINER: {\n      return {\n        ...state,\n        emojiContainer: action.payload,\n      };\n    }\n    case actionTypes.ON_REACTION_UPDATED: {\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, action.payload.messageId)) {\n            if (m.applyReactionEvent && typeof m.applyReactionEvent === 'function') {\n              m.applyReactionEvent(action.payload);\n            }\n            return m;\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.MESSAGE_LIST_PARAMS_CHANGED: {\n      return {\n        ...state,\n        messageListParams: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { useEffect } from \"react\";\nimport { GroupChannel, GroupChannelHandler, SendbirdGroupChat } from \"@sendbird/chat/groupChannel\";\nimport { FileMessage, UserMessage } from \"@sendbird/chat/message\";\n\nimport { scrollIntoLast } from '../utils';\n\nimport { CustomUseReducerDispatcher, Logger } from \"../../../../lib/SendbirdState\";\nimport uuidv4 from \"../../../../utils/uuid\";\nimport compareIds from '../../../../utils/compareIds';\nimport * as messageActions from '../dux/actionTypes';\n\n/**\n * Handles ChannelEvents and send values to dispatcher using messagesDispatcher\n * messagesDispatcher: Dispatcher\n * sdk: sdkInstance\n * logger: loggerInstance\n * channelUrl: string\n * sdkInit: bool\n */\ninterface DynamicParams {\n  sdkInit: boolean;\n  hasMoreNext: boolean;\n  currentGroupChannel: GroupChannel;\n}\ninterface StaticParams {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  scrollRef: React.RefObject<HTMLDivElement>;\n  setQuoteMessage: React.Dispatch<React.SetStateAction<UserMessage | FileMessage>>;\n  messagesDispatcher: CustomUseReducerDispatcher;\n}\n\nfunction useHandleChannelEvents(\n  {\n    sdkInit,\n    hasMoreNext,\n    currentGroupChannel,\n  }: DynamicParams,\n  {\n    sdk,\n    logger,\n    scrollRef,\n    setQuoteMessage,\n    messagesDispatcher,\n  }: StaticParams,\n): void {\n  useEffect(() => {\n    const channelUrl = currentGroupChannel?.url;\n    const channelHandlerId = uuidv4();\n    if (channelUrl && sdkInit) {\n      const channelHandler: GroupChannelHandler = {\n        onMessageReceived: (channel, message) => {\n          // Do not update when hasMoreNext\n          if (compareIds(channel?.url, channelUrl) && !hasMoreNext) {\n            let scrollToEnd = false;\n            try {\n              const { current } = scrollRef;\n              scrollToEnd = current.offsetHeight + current.scrollTop >= current.scrollHeight;\n            } catch (error) {\n              //\n            }\n\n            logger.info('Channel | useHandleChannelEvents: onMessageReceived', message);\n            messagesDispatcher({\n              type: messageActions.ON_MESSAGE_RECEIVED,\n              payload: { channel, message },\n            });\n\n            if (scrollToEnd) {\n              try {\n                setTimeout(() => {\n                  currentGroupChannel?.markAsRead?.();\n                  scrollIntoLast();\n                });\n              } catch (error) {\n                logger.warning('Channel | onMessageReceived | scroll to end failed');\n              }\n            }\n          }\n        },\n        onUnreadMemberStatusUpdated: (channel) => {\n          logger.info('Channel | useHandleChannelEvents: onUnreadMemberStatusUpdated', channel);\n          if (compareIds(channel?.url, channelUrl)) {\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        // before(onDeliveryReceiptUpdated)\n        onUndeliveredMemberStatusUpdated: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onDeliveryReceiptUpdated', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onMessageUpdated: (channel, message) => {\n          logger.info('Channel | useHandleChannelEvents: onMessageUpdated', message);\n          messagesDispatcher({\n            type: messageActions.ON_MESSAGE_UPDATED,\n            payload: { channel, message },\n          });\n        },\n        onThreadInfoUpdated: (channel, threadInfoUpdateEvent) => {\n          logger.info('Channel | useHandleChannelEvents: onThreadInfoUpdated', { channel, threadInfoUpdateEvent });\n          messagesDispatcher({\n            type: messageActions.ON_MESSAGE_THREAD_INFO_UPDATED,\n            payload: { channel, event: threadInfoUpdateEvent },\n          });\n        },\n        onMessageDeleted: (channel, messageId) => {\n          logger.info('Channel | useHandleChannelEvents: onMessageDeleted', { channel, messageId });\n          setQuoteMessage(null);\n          messagesDispatcher({\n            type: messageActions.ON_MESSAGE_DELETED,\n            payload: messageId,\n          });\n        },\n        onReactionUpdated: (channel, reactionEvent) => {\n          logger.info('Channel | useHandleChannelEvents: onReactionUpdated', { channel, reactionEvent });\n          messagesDispatcher({\n            type: messageActions.ON_REACTION_UPDATED,\n            payload: reactionEvent,\n          });\n        },\n        onChannelChanged: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onChannelChanged', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onChannelFrozen: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onChannelFrozen', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onChannelUnfrozen: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onChannelUnFrozen', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onUserMuted: (channel, user) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onUserMuted', { channel, user });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onUserUnmuted: (channel, user) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onUserUnmuted', { channel, user });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onUserBanned: (channel, user) => {\n          if (compareIds(channel?.url, channelUrl) && user?.userId === sdk?.currentUser?.userId) {\n            logger.info('Channel | useHandleChannelEvents: onUserBanned', { channel, user });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: null,\n            });\n          }\n        },\n        onOperatorUpdated: (channel, users) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onOperatorUpdated', { channel, users });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n      };\n      logger.info('Channel | useHandleChannelEvents: Setup event handler', channelHandlerId);\n      // Add this group channel handler to the Sendbird chat instance\n      sdk.groupChannel?.addGroupChannelHandler(channelHandlerId, new GroupChannelHandler(channelHandler));\n    }\n    return () => {\n      if (sdk?.groupChannel?.removeGroupChannelHandler) {\n        logger.info('Channel | useHandleChannelEvents: Removing message reciver handler', channelHandlerId);\n        sdk.groupChannel.removeGroupChannelHandler(channelHandlerId);\n      } else if (sdk?.groupChannel) {\n        logger.error('Channel | useHandleChannelEvents: Not found the removeGroupChannelHandler');\n      }\n    }\n  }, [currentGroupChannel?.url, sdkInit]);\n}\n\nexport default useHandleChannelEvents;\n","import { useEffect } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useSetChannel({ channelUrl, sdkInit }, {\n  messagesDispatcher,\n  sdk,\n  logger,\n}) {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk && sdk.groupChannel) {\n      logger.info('Channel | useSetChannel fetching channel', channelUrl);\n      sdk.groupChannel.getChannel(channelUrl)\n        .then((groupChannel) => {\n          logger.info('Channel | useSetChannel fetched channel', groupChannel);\n          messagesDispatcher({\n            type: messageActionTypes.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n\n          logger.info('Channel: Mark as read', groupChannel);\n          // this order is important - this mark as read should update the event handler up above\n          groupChannel.markAsRead();\n        })\n        .catch((e) => {\n          logger.warning('Channel | useSetChannel fetch channel failed', { channelUrl, e });\n          messagesDispatcher({\n            type: messageActionTypes.SET_CHANNEL_INVALID,\n          });\n        });\n      sdk.getAllEmoji().then((emojiContainer_) => {\n        logger.info('Channel: Getting emojis success', emojiContainer_);\n        messagesDispatcher({\n          type: messageActionTypes.SET_EMOJI_CONTAINER,\n          payload: emojiContainer_,\n        });\n      }).catch((err) => {\n        logger.error('Channel: Getting emojis failed', err);\n      });\n      sdk.getAllEmoji();\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\nimport { ReplyType } from '@sendbird/chat/message';\n\nimport * as utils from '../utils';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { PREV_RESULT_SIZE, NEXT_RESULT_SIZE } from '../const';\n\nfunction useInitialMessagesFetch({\n  currentGroupChannel,\n  userFilledMessageListQuery,\n  initialTimeStamp,\n  replyType,\n}, {\n  logger,\n  messagesDispatcher,\n}) {\n  const channelUrl = currentGroupChannel?.url;\n  useEffect(() => {\n    logger.info('Channel useInitialMessagesFetch: Setup started', currentGroupChannel);\n    messagesDispatcher({\n      type: messageActionTypes.RESET_MESSAGES,\n      payload: null,\n    });\n\n    if (currentGroupChannel && currentGroupChannel?.getMessagesByTimestamp) {\n      const messageListParams = {};\n      messageListParams.prevResultSize = PREV_RESULT_SIZE;\n      if (initialTimeStamp) {\n        messageListParams.nextResultSize = NEXT_RESULT_SIZE;\n      }\n      messageListParams.isInclusive = true;\n      messageListParams.includeReactions = true;\n      if (replyType && replyType === 'QUOTE_REPLY') {\n        messageListParams.includeThreadInfo = true;\n        messageListParams.includeParentMessageInfo = true;\n        messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n      }\n      if (userFilledMessageListQuery) {\n        Object.keys(userFilledMessageListQuery).forEach((key) => {\n          messageListParams[key] = userFilledMessageListQuery[key];\n        });\n      }\n      if ((replyType && replyType === 'QUOTE_REPLY') || userFilledMessageListQuery) {\n        logger.info('Channel useInitialMessagesFetch: Setup messageListParams', messageListParams);\n        messagesDispatcher({\n          type: messageActionTypes.MESSAGE_LIST_PARAMS_CHANGED,\n          payload: messageListParams,\n        });\n      }\n\n      logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n      messagesDispatcher({\n        type: messageActionTypes.FETCH_INITIAL_MESSAGES_START,\n        payload: null,\n      });\n\n      currentGroupChannel.getMessagesByTimestamp(\n        initialTimeStamp || new Date().getTime(),\n        messageListParams,\n      )\n        .then((messages) => {\n          messagesDispatcher({\n            type: messageActionTypes.FETCH_INITIAL_MESSAGES_SUCCESS,\n            payload: {\n              currentGroupChannel,\n              messages,\n            },\n          });\n        })\n        .catch((error) => {\n          logger.error('Channel: Fetching messages failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.FETCH_INITIAL_MESSAGES_FAILURE,\n            payload: { currentGroupChannel },\n          });\n        })\n        .finally(() => {\n          if (!initialTimeStamp) {\n            setTimeout(() => utils.scrollIntoLast());\n          }\n        });\n    }\n  }, [channelUrl, userFilledMessageListQuery, initialTimeStamp]);\n  /**\n   * Note - useEffect(() => {}, [currentGroupChannel])\n   * was buggy, that is why we did\n   * const channelUrl = currentGroupChannel && currentGroupChannel.url;\n   * useEffect(() => {}, [channelUrl])\n   * Again, this hook is supposed to execute when currentGroupChannel changes\n   * The 'channelUrl' here is not the same memory reference from Conversation.props\n   */\n}\n\nexport default useInitialMessagesFetch;\n","import { useEffect } from 'react';\n\nimport type { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport {\n  MessageListParams,\n  ReplyType,\n} from '@sendbird/chat/message';\nimport * as utils from '../utils';\nimport { PREV_RESULT_SIZE } from '../const';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { Logger } from '../../../../lib/SendbirdState';\nimport { NEXT_RESULT_SIZE } from '../const';\ninterface DynamicParams {\n  isOnline: boolean;\n  replyType?: string;\n}\n\ninterface StaticParams {\n  logger: Logger;\n  sdk: SendbirdGroupChat;\n  currentGroupChannel: GroupChannel;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n  userFilledMessageListQuery?: Record<string, any>;\n}\n\nfunction useHandleReconnect(\n  { isOnline, replyType }: DynamicParams,\n  {\n    logger,\n    sdk,\n    currentGroupChannel,\n    messagesDispatcher,\n    userFilledMessageListQuery,\n  }: StaticParams,\n): void {\n  useEffect(() => {\n    const wasOffline = !isOnline;\n    return () => {\n      // state changed from offline to online\n      if (wasOffline && currentGroupChannel?.url) {\n        logger.info('Refreshing conversation state');\n        const isReactionEnabled = sdk?.appInfo?.useReaction || false;\n\n        const messageListParams: MessageListParams = {\n          prevResultSize: PREV_RESULT_SIZE,\n          isInclusive: true,\n          includeReactions: isReactionEnabled,\n          nextResultSize: NEXT_RESULT_SIZE,\n        };\n        if (replyType && replyType === 'QUOTE_REPLY') {\n          messageListParams.includeThreadInfo = true;\n          messageListParams.includeParentMessageInfo = true;\n          messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n        }\n        if (userFilledMessageListQuery) {\n          Object.keys(userFilledMessageListQuery).forEach((key) => {\n            messageListParams[key] = userFilledMessageListQuery[key];\n          });\n        }\n        logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_INITIAL_MESSAGES_START,\n          payload: null,\n        });\n\n        sdk?.groupChannel?.getChannel(currentGroupChannel?.url)\n          .then((groupChannel) => {\n            const lastMessageTime = new Date().getTime();\n\n            groupChannel.getMessagesByTimestamp(\n              lastMessageTime,\n              messageListParams,\n            )\n              .then((messages) => {\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_INITIAL_MESSAGES_SUCCESS,\n                  payload: {\n                    currentGroupChannel,\n                    messages,\n                  },\n                });\n                setTimeout(() => utils.scrollIntoLast());\n              })\n              .catch((error) => {\n                logger.error('Channel: Fetching messages failed', error);\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_INITIAL_MESSAGES_FAILURE,\n                  payload: { currentGroupChannel },\n                });\n              })\n              .finally(() => {\n                currentGroupChannel?.markAsRead?.();\n              });\n          });\n      }\n    };\n  }, [isOnline, replyType]);\n}\n\nexport default useHandleReconnect;\n","import { useCallback } from 'react';\nimport { ReplyType } from '@sendbird/chat/message';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { PREV_RESULT_SIZE } from '../const';\n\nfunction useScrollCallback({\n  currentGroupChannel,\n  oldestMessageTimeStamp,\n  userFilledMessageListQuery,\n  replyType,\n}, {\n  hasMorePrev,\n  logger,\n  messagesDispatcher,\n  sdk,\n}) {\n  return useCallback((cb) => {\n    if (!hasMorePrev) { return; }\n    const { appInfo = {} } = sdk;\n    const isReactionEnabled = appInfo.useReaction || false;\n\n    const messageListParams = {\n      prevResultSize: PREV_RESULT_SIZE,\n      isInclusive: true,\n      includeReactions: isReactionEnabled,\n    };\n    if (replyType && replyType === 'QUOTE_REPLY') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach((key) => {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n\n    currentGroupChannel.getMessagesByTimestamp(\n      oldestMessageTimeStamp || new Date().getTime(),\n      messageListParams,\n    )\n      .then((messages) => {\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_PREV_MESSAGES_SUCCESS,\n          payload: { currentGroupChannel, messages },\n        });\n        cb([messages, null]);\n      })\n      .catch((error) => {\n        logger.error('Channel: Fetching messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_PREV_MESSAGES_FAILURE,\n          payload: { currentGroupChannel },\n        });\n        cb([null, error]);\n      });\n  }, [currentGroupChannel, oldestMessageTimeStamp, replyType]);\n}\n\nexport default useScrollCallback;\n","import { useCallback } from 'react';\nimport { ReplyType } from '@sendbird/chat/message';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { NEXT_RESULT_SIZE } from '../const';\n\nfunction useScrollDownCallback({\n  currentGroupChannel,\n  latestMessageTimeStamp,\n  userFilledMessageListQuery,\n  hasMoreNext,\n  replyType,\n}, {\n  logger,\n  messagesDispatcher,\n  sdk,\n}) {\n  return useCallback((cb) => {\n    if (!hasMoreNext) { return; }\n    const { appInfo = {} } = sdk;\n    const isReactionEnabled = appInfo.useReaction || false;\n    const messageListParams = {\n      nextResultSize: NEXT_RESULT_SIZE,\n      isInclusive: true,\n      includeReactions: isReactionEnabled,\n    };\n    if (replyType && replyType === 'QUOTE_REPLY') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach((key) => {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching later messages', { currentGroupChannel, userFilledMessageListQuery });\n\n    currentGroupChannel.getMessagesByTimestamp(\n      latestMessageTimeStamp || new Date().getTime(),\n      messageListParams,\n    )\n      .then((messages) => {\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_NEXT_MESSAGES_SUCCESS,\n          payload: { currentGroupChannel, messages },\n        });\n        cb([messages, null]);\n      })\n      .catch((error) => {\n        logger.error('Channel: Fetching later messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_NEXT_MESSAGES_FAILURE,\n          payload: { currentGroupChannel },\n        });\n        cb([null, error]);\n      });\n  }, [currentGroupChannel, latestMessageTimeStamp, hasMoreNext, replyType]);\n}\n\nexport default useScrollDownCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher }, { logger }) {\n  return useCallback((message) => {\n    logger.info('Channel | useDeleteMessageCallback: Deleting message', message);\n    const { requestState } = message;\n    return new Promise((resolve, reject) => {\n      logger.info('Channel | useDeleteMessageCallback: Deleting message requestState:', requestState);\n      // Message is only on local\n      if (requestState === 'failed' || requestState === 'pending') {\n        logger.info('Channel | useDeleteMessageCallback: Deleted message from local:', message);\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n          payload: message.reqId,\n        });\n        resolve(message);\n      }\n\n      logger.info('Channel | useDeleteMessageCallback: Deleting message from remote:', requestState);\n      currentGroupChannel.deleteMessage(message)\n        .then(() => {\n          logger.info('Channel | useDeleteMessageCallback: Deleting message success!', message);\n          messagesDispatcher({\n            type: messageActionTypes.ON_MESSAGE_DELETED,\n            payload: message.messageId,\n          });\n          resolve(message);\n        })\n        .catch((err) => {\n          logger.warning('Channel | useDeleteMessageCallback: Deleting message failed!', err);\n          reject(err);\n        });\n    });\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nexport default useDeleteMessageCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as topics from '../../../../lib/pubSub/topics';\n\nfunction useUpdateMessageCallback({\n  currentGroupChannel,\n  messagesDispatcher,\n  onBeforeUpdateUserMessage,\n  isMentionEnabled,\n}, {\n  logger,\n  pubSub,\n}) {\n  return useCallback((props, callback) => {\n    const {\n      messageId,\n      message,\n      mentionedUsers,\n      mentionTemplate,\n    } = props;\n    const createParamsDefault = () => {\n      const params = {};\n      params.message = message;\n      if (isMentionEnabled && mentionedUsers?.length > 0) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      } else {\n        params.mentionedMessageTemplate = message;\n      }\n      return params;\n    };\n\n    const createCustomPrams = onBeforeUpdateUserMessage\n      && typeof onBeforeUpdateUserMessage === 'function';\n\n    if (createCustomPrams) {\n      logger.info('Channel: creating params using onBeforeUpdateUserMessage', onBeforeUpdateUserMessage);\n    }\n\n    const params = onBeforeUpdateUserMessage\n      ? onBeforeUpdateUserMessage(message)\n      : createParamsDefault(message);\n\n    logger.info('Channel: Updating message!', params);\n    currentGroupChannel.updateUserMessage(messageId, params).then((msg, err) => {\n      if (callback) {\n        callback(err, msg);\n      }\n\n      logger.info('Channel: Updating message success!', msg);\n      messagesDispatcher({\n        type: messageActionTypes.ON_MESSAGE_UPDATED,\n        payload: {\n          channel: currentGroupChannel,\n          message: msg,\n        },\n      });\n      pubSub.publish(\n        topics.UPDATE_USER_MESSAGE,\n        {\n          message: msg,\n          channel: currentGroupChannel,\n        },\n      );\n    });\n  }, [currentGroupChannel?.url, messagesDispatcher, onBeforeUpdateUserMessage]);\n}\n\nexport default useUpdateMessageCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useResendMessageCallback({\n  currentGroupChannel,\n  messagesDispatcher,\n}, {\n  logger,\n}) {\n  return useCallback((failedMessage) => {\n    logger.info('Channel: Resending message has started', failedMessage);\n    const { messageType, file } = failedMessage;\n    if (failedMessage && typeof failedMessage.isResendable === 'function'\n      && failedMessage.isResendable()\n    ) {\n      // Move the logic setting sendingStatus to pending into the reducer\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.sendingStatus = 'pending';\n      messagesDispatcher({\n        type: messageActionTypes.RESEND_MESSAGEGE_START,\n        payload: failedMessage,\n      });\n\n      // userMessage\n      if (messageType === 'user') {\n        currentGroupChannel.resendUserMessage(failedMessage)\n          .then((message) => {\n            logger.info('Channel: Resending message success!', message);\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n              payload: message,\n            });\n          })\n          .catch((e) => {\n            logger.warning('Channel: Resending message failed!', e);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.sendingStatus = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n              payload: failedMessage,\n            });\n          });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.sendingStatus = 'pending';\n        messagesDispatcher({\n          type: messageActionTypes.RESEND_MESSAGEGE_START,\n          payload: failedMessage,\n        });\n        return;\n      }\n\n      if (messageType === 'file') {\n        currentGroupChannel\n          .resendFileMessage(failedMessage, file)\n          .then((message) => {\n            logger.info('Channel: Resending file message success!', message);\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n              payload: message,\n            });\n          })\n          .catch((e) => {\n            logger.warning('Channel: Resending file message failed!', e);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.sendingStatus = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n              payload: failedMessage,\n            });\n          });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.sendingStatus = 'pending';\n        messagesDispatcher({\n          type: messageActionTypes.RESEND_MESSAGEGE_START,\n          payload: failedMessage,\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('Message is not resendable');\n      logger.warning('Message is not resendable', failedMessage);\n    }\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nexport default useResendMessageCallback;\n","import { useRef, useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport * as topics from '../../../../lib/pubSub/topics';\n\nexport default function useSendMessageCallback({\n  isMentionEnabled,\n  currentGroupChannel,\n  onBeforeSendUserMessage,\n}, {\n  logger,\n  pubSub,\n  messagesDispatcher,\n}) {\n  const messageInputRef = useRef(null);\n\n  const sendMessage = useCallback(\n    (props) => {\n      const {\n        quoteMessage = null,\n        message,\n        mentionTemplate,\n        // mentionedUserIds,\n        mentionedUsers,\n      } = props;\n      const createParamsDefault = () => {\n        const params = {};\n        params.message = message?.trim() || message;\n        // if (isMentionEnabled && mentionedUserIds?.length > 0) {\n        if (isMentionEnabled && mentionedUsers?.length > 0) {\n          // params.mentionedUserIds = mentionedUserIds;\n          params.mentionedUsers = mentionedUsers;\n        }\n        // if (isMentionEnabled && mentionTemplate && mentionedUserIds?.length > 0) {\n        if (isMentionEnabled && mentionTemplate && mentionedUsers?.length > 0) {\n          params.mentionedMessageTemplate = mentionTemplate?.trim() || mentionTemplate;\n        }\n        if (quoteMessage) {\n          params.isReplyToChannel = true;\n          params.parentMessageId = quoteMessage.messageId;\n        }\n        return params;\n      };\n\n      const createCustomPrams = onBeforeSendUserMessage\n        && typeof onBeforeSendUserMessage === 'function';\n\n      if (createCustomPrams) {\n        logger.info('Channel: creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n\n      const params = onBeforeSendUserMessage\n        ? onBeforeSendUserMessage(message, quoteMessage)\n        : createParamsDefault();\n\n      logger.info('Channel: Sending message has started', params);\n      currentGroupChannel.sendUserMessage(params)\n        .onPending((pendingMsg) => {\n          pubSub.publish(topics.SEND_MESSAGE_START, {\n            /* pubSub is used instead of messagesDispatcher\n              to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n            message: pendingMsg,\n            channel: currentGroupChannel,\n          });\n          setTimeout(() => utils.scrollIntoLast());\n        })\n        .onFailed((err, msg) => {\n          logger.warning('Channel: Sending message failed!', { message: msg, error: err });\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n            payload: msg,\n          });\n        })\n        .onSucceeded((msg) => {\n          logger.info('Channel: Sending message success!', msg);\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n            payload: msg,\n          });\n        });\n    },\n    [currentGroupChannel, onBeforeSendUserMessage],\n  );\n\n  return [messageInputRef, sendMessage];\n}\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport * as topics from '../../../../lib/pubSub/topics';\n\nexport default function useSendFileMessageCallback({\n  currentGroupChannel,\n  onBeforeSendFileMessage,\n  imageCompression = {},\n}, {\n  logger,\n  pubSub,\n  messagesDispatcher,\n}) {\n  const sendMessage = useCallback((file, quoteMessage = null) => {\n    const {\n      compressionRate,\n      resizingWidth,\n      resizingHeight,\n    } = imageCompression;\n    const createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n\n    const compressibleFileType = (file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg');\n    const compressibleRatio = (compressionRate > 0) && (compressionRate < 1);\n    // pxToNumber returns null if values are invalid\n    const compressibleDiamensions = utils.pxToNumber(resizingWidth)\n      || utils.pxToNumber(resizingHeight);\n\n    const canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n\n    const createParamsDefault = (file_) => {\n      const params = {};\n      params.file = file_;\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n\n    if (canCompressImage) { // Using image compression\n      try {\n        const image = document.createElement('img');\n        image.src = URL.createObjectURL(file);\n        image.onload = () => {\n          URL.revokeObjectURL(image.src);\n          const canvas = document.createElement('canvas');\n          const imageWdith = image.naturalWidth || image.width;\n          const imageHeight = image.naturalHeight || image.height;\n\n          let targetWidth = utils.pxToNumber(resizingWidth) || imageWdith;\n          let targetHeight = utils.pxToNumber(resizingHeight) || imageHeight;\n\n          // In canvas.toBlob(callback, mimeType, qualityArgument)\n          // qualityArgument doesnt work\n          // so in case compressibleDiamensions are not present, we use ratio\n          if (file.type === 'image/png' && !compressibleDiamensions) {\n            targetWidth *= compressionRate;\n            targetHeight *= compressionRate;\n          }\n\n          canvas.width = targetWidth;\n          canvas.height = targetHeight;\n          const context = canvas.getContext('2d');\n          context.drawImage(image, 0, 0, targetWidth, targetHeight);\n          context.canvas.toBlob(\n            (newImageBlob) => {\n              const compressedFile = new File([newImageBlob], file.name, { type: file.type });\n              if (createCustomParams) {\n                logger.info('Channel: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n              }\n              const params = createCustomParams\n                ? onBeforeSendFileMessage(compressedFile, quoteMessage)\n                : createParamsDefault(compressedFile);\n              logger.info('Channel: Uploading file message start!', params);\n              currentGroupChannel.sendFileMessage(params)\n                .onPending((pendingMessage) => {\n                  pubSub.publish(topics.SEND_MESSAGE_START, {\n                    /* pubSub is used instead of messagesDispatcher\n                      to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n                    message: {\n                      ...pendingMessage,\n                      url: URL.createObjectURL(compressedFile),\n                      // pending thumbnail message seems to be failed\n                      requestState: 'pending',\n                    },\n                    channel: currentGroupChannel,\n                  });\n                  setTimeout(() => utils.scrollIntoLast(), 1000);\n                })\n                .onFailed((err, failedMessage) => {\n                  logger.error('Channel: Sending file message failed!', { failedMessage, err });\n                  // eslint-disable-next-line no-param-reassign\n                  failedMessage.localUrl = URL.createObjectURL(compressedFile);\n                  // eslint-disable-next-line no-param-reassign\n                  failedMessage.file = compressedFile;\n                  messagesDispatcher({\n                    type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n                    payload: failedMessage,\n                  });\n                })\n                .onSucceeded((succeededMessage) => {\n                  logger.info('Channel: Sending file message success!', succeededMessage);\n                  messagesDispatcher({\n                    type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n                    payload: succeededMessage,\n                  });\n                });\n            },\n            file.type,\n            compressionRate,\n          );\n        };\n      } catch (error) {\n        logger.error('Channel: Sending file message failed!', error);\n      }\n    } else { // Not using image compression\n      if (createCustomParams) {\n        logger.info('Channel: creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n      }\n      const params = onBeforeSendFileMessage\n        ? onBeforeSendFileMessage(file, quoteMessage)\n        : createParamsDefault(file);\n      logger.info('Channel: Uploading file message start!', params);\n\n      currentGroupChannel.sendFileMessage(params)\n        .onPending((pendingMsg) => {\n          pubSub.publish(topics.SEND_MESSAGE_START, {\n            /* pubSub is used instead of messagesDispatcher\n              to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n            message: {\n              ...pendingMsg,\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending',\n            },\n            channel: currentGroupChannel,\n          });\n          setTimeout(() => utils.scrollIntoLast(), 1000);\n        })\n        .onFailed((error, message) => {\n          logger.error('Channel: Sending file message failed!', { message, error });\n          // eslint-disable-next-line no-param-reassign\n          message.localUrl = URL.createObjectURL(file);\n          // eslint-disable-next-line no-param-reassign\n          message.file = file;\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n            payload: message,\n          });\n        })\n        .onSucceeded((message) => {\n          logger.info('Channel: Sending message success!', message);\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n            payload: message,\n          });\n        });\n    }\n  }, [currentGroupChannel, onBeforeSendFileMessage, imageCompression]);\n  return [sendMessage];\n}\n","import React, { useMemo } from 'react';\n\nimport { EmojiListItems } from '../../../../ui/ContextMenu';\nimport ReactionButton from '../../../../ui/ReactionButton';\nimport ImageRenderer from '../../../../ui/ImageRenderer';\nimport Icon, { IconTypes } from '../../../../ui/Icon';\n\nexport default function useMemoizedEmojiListItems({\n  emojiContainer, toggleReaction,\n}, {\n  isReactionEnabled,\n  logger,\n  userId,\n  emojiAllList,\n}) {\n  /* eslint-disable react/prop-types */\n  return useMemo(() => ({\n    parentRef,\n    parentContainRef,\n    message,\n    closeDropdown,\n    spaceFromTrigger = {},\n  }) => {\n    if (!isReactionEnabled || !(parentRef || parentContainRef || message || closeDropdown)) {\n      logger.warning('Channel: Invalid Params in memoizedEmojiListItems');\n      return null;\n    }\n\n    return (\n      <EmojiListItems\n        parentRef={parentRef}\n        parentContainRef={parentContainRef}\n        closeDropdown={closeDropdown}\n        spaceFromTrigger={spaceFromTrigger}\n      >\n        {\n          emojiAllList.map((emoji) => {\n            const reactedReaction = message.reactions\n              .filter((reaction) => reaction.key === emoji.key)[0];\n            const isReacted = reactedReaction\n              ? !(reactedReaction.userIds.indexOf(userId) < 0)\n              : false;\n            return (\n              <ReactionButton\n                key={emoji.key}\n                width=\"36px\"\n                height=\"36px\"\n                selected={isReacted}\n                onClick={() => {\n                  closeDropdown();\n                  toggleReaction(message, emoji.key, isReacted);\n                }}\n              >\n                <ImageRenderer\n                  url={emoji.url}\n                  width=\"28px\"\n                  height=\"28px\"\n                  defaultComponent={\n                    <Icon width=\"28px\" height=\"28px\" type={IconTypes.QUESTION} />\n                  }\n                />\n              </ReactionButton>\n            );\n          })\n        }\n      </EmojiListItems>\n    );\n  }, [emojiContainer, toggleReaction]);\n}\n","import { useCallback } from 'react';\n\nexport default function useToggleReactionCallback({ currentGroupChannel }, { logger }) {\n  return useCallback((message, key, isReacted) => {\n    if (isReacted) {\n      currentGroupChannel.deleteReaction(message, key)\n        .then((res) => {\n          logger.info('Delete reaction success', res);\n        })\n        .catch((err) => {\n          logger.warning('Delete reaction failed', err);\n        });\n      return;\n    }\n    currentGroupChannel.addReaction(message, key)\n      .then((res) => {\n        logger.info('Add reaction success', res);\n      })\n      .catch((err) => {\n        logger.warning('Add reaction failed', err);\n      });\n  }, [currentGroupChannel]);\n}\n","import type { BaseMessage } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\n\nimport { Logger } from '../../../../index';\n\ninterface DynamicParams {\n  setInitialTimeStamp: React.Dispatch<React.SetStateAction<number>>;\n  setAnimatedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  allMessages: BaseMessage[];\n}\n\ninterface StaticParams {\n  logger: Logger;\n}\n\nfunction useScrollToMessage({\n  setInitialTimeStamp,\n  setAnimatedMessageId,\n  allMessages,\n}: DynamicParams,\n  { logger }: StaticParams,\n): (createdAt: number, messageId: number) => void {\n  return useCallback(\n    (createdAt: number, messageId: number) => {\n      const isPresent = allMessages.find((m) => (\n        m.messageId === messageId\n      ));\n      setAnimatedMessageId(null);\n      setTimeout(() => {\n        if (isPresent) {\n          logger.info('Channel: scroll to message - message is present');\n          setAnimatedMessageId(messageId);\n        } else {\n          logger.info('Channel: scroll to message - fetching older messages');\n          setInitialTimeStamp(null);\n          setInitialTimeStamp(createdAt);\n          setAnimatedMessageId(messageId);\n        }\n      });\n    }, [\n    setInitialTimeStamp,\n    setAnimatedMessageId,\n    allMessages,\n  ],\n  );\n}\n\nexport default useScrollToMessage;\n","\nimport React, {\n  useEffect,\n  useState,\n  useReducer,\n  useRef,\n  useMemo,\n} from 'react';\n\nimport type { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport type {\n  FileMessage,\n  FileMessageCreateParams,\n  UserMessage,\n  UserMessageCreateParams,\n  UserMessageUpdateParams,\n} from '@sendbird/chat/message';\nimport type { SendbirdError, User } from '@sendbird/chat';\n\nimport { ReplyType, RenderUserProfileProps } from '../../../types';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { CoreMessageType } from '../../../utils';\n\nimport * as utils from './utils';\n\nimport messagesInitialState from './dux/initialState';\nimport messagesReducer from './dux/reducers';\nimport * as messageActionTypes from './dux/actionTypes';\n\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useGetChannel from './hooks/useGetChannel';\nimport useInitialMessagesFetch from './hooks/useInitialMessagesFetch';\nimport useHandleReconnect from './hooks/useHandleReconnect';\nimport useScrollCallback from './hooks/useScrollCallback';\nimport useScrollDownCallback from './hooks/useScrollDownCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useSendMessageCallback from './hooks/useSendMessageCallback';\nimport useSendFileMessageCallback from './hooks/useSendFileMessageCallback';\nimport useMemoizedEmojiListItems from './hooks/useMemoizedEmojiListItems';\nimport useToggleReactionCallback from './hooks/useToggleReactionCallback';\nimport useScrollToMessage from './hooks/useScrollToMessage';\nimport { CustomUseReducerDispatcher } from '../../../lib/SendbirdState';\n\nexport type MessageListParams = {\n  // https://sendbird.github.io/core-sdk-javascript/module-model_params_messageListParams-MessageListParams.html\n  replyType?: string,\n  messageType?: string,\n  prevResultSize?: number,\n  nextResultSize?: number,\n  reverse?: boolean,\n  isInclusive?: boolean,\n  includeMetaArray?: boolean,\n  includeReactions?: boolean,\n  includeThreadInfo?: boolean,\n  includePollDetails?: boolean,\n  includeParentMessageInfo?: boolean,\n  showSubchannelMessagesOnly?: boolean,\n  customTypes?: Array<string>,\n  senderUserIds?: Array<string>,\n};\n\nexport type ChannelQueries = {\n  messageListParams?: MessageListParams;\n};\n\nexport type ChannelContextProps = {\n  children?: React.ReactNode;\n  channelUrl: string;\n  isReactionEnabled?: boolean;\n  isMessageGroupingEnabled?: boolean;\n  showSearchIcon?: boolean;\n  highlightedMessage?: number;\n  startingPoint?: number;\n  onBeforeSendUserMessage?(text: string, quotedMessage?: UserMessage | FileMessage): UserMessageCreateParams;\n  onBeforeSendFileMessage?(file: File, quotedMessage?: UserMessage | FileMessage): FileMessageCreateParams;\n  onBeforeUpdateUserMessage?(text: string): UserMessageUpdateParams;\n  onChatHeaderActionClick?(event: React.MouseEvent<HTMLElement>): void;\n  onSearchClick?(): void;\n  replyType?: ReplyType;\n  queries?: ChannelQueries;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactNode;\n  disableUserProfile?: boolean;\n};\n\ninterface MessageStoreInterface {\n  allMessages: CoreMessageType[];\n  loading: boolean;\n  initialized: boolean;\n  unreadSince: string;\n  isInvalid: boolean;\n  currentGroupChannel: GroupChannel;\n  hasMorePrev: boolean;\n  oldestMessageTimeStamp: number;\n  hasMoreNext: boolean;\n  latestMessageTimeStamp: number;\n  emojiContainer: any;\n  readStatus: any;\n}\n\ninterface SendMessageParams {\n  message: string;\n  quoteMessage?: UserMessage | FileMessage;\n  // mentionedUserIds?: Array<string>;\n  mentionedUsers?: Array<User>;\n  mentionTemplate?: string;\n}\n\ninterface UpdateMessageProps {\n  messageId: string | number;\n  message: string;\n  mentionedUsers?: Array<User>;\n  mentionTemplate?: string;\n}\n\ninterface ChannelProviderInterface extends ChannelContextProps, MessageStoreInterface {\n  scrollToMessage?(createdAt: number, messageId: number): void;\n  messageActionTypes: Record<string ,string>;\n  messagesDispatcher: CustomUseReducerDispatcher;\n  quoteMessage: UserMessage | FileMessage;\n  setQuoteMessage: React.Dispatch<React.SetStateAction<UserMessage | FileMessage>>;\n  initialTimeStamp: number;\n  setInitialTimeStamp: React.Dispatch<React.SetStateAction<number>>;\n  animatedMessageId: number;\n  highLightedMessageId: number;\n  nicknamesMap: Map<string, string>;\n  emojiAllMap: any;\n  onScrollCallback: any;\n  onScrollDownCallback: any;\n  memoizedEmojiListItems: any;\n  scrollRef: React.MutableRefObject<HTMLDivElement>;\n  setAnimatedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  setHighLightedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  messageInputRef: React.MutableRefObject<HTMLInputElement>,\n  deleteMessage(message: CoreMessageType): Promise<CoreMessageType>,\n  updateMessage(props: UpdateMessageProps, callback?: (err: SendbirdError, message: UserMessage) => void): Promise<CoreMessageType>,\n  resendMessage(failedMessage: UserMessage | FileMessage): Promise<UserMessage | FileMessage>,\n  // TODO: Good to change interface to using params / This part need refactoring\n  sendMessage(props: SendMessageParams): Promise<UserMessage>,\n  sendFileMessage(file: File, quoteMessage: UserMessage | FileMessage): Promise<FileMessage>,\n  // sendMessage(messageParams: SendBird.UserMessageParams): Promise<SendBird.UserMessage>,\n  // sendFileMessage(messageParams: SendBird.FileMessageParams): Promise<SendBird.FileMessage>,\n  toggleReaction(message: UserMessage | FileMessage, emojiKey: string, isReacted: boolean): void,\n  renderUserMentionItem?: (props: { user: User }) => JSX.Element;\n}\n\nconst ChannelContext = React.createContext<ChannelProviderInterface | null>(undefined);\n\nconst ChannelProvider: React.FC<ChannelContextProps> = (props: ChannelContextProps) => {\n  const {\n    channelUrl,\n    children,\n    isReactionEnabled,\n    isMessageGroupingEnabled,\n    showSearchIcon,\n    highlightedMessage,\n    startingPoint,\n    onBeforeSendUserMessage,\n    onBeforeSendFileMessage,\n    onBeforeUpdateUserMessage,\n    onChatHeaderActionClick,\n    onSearchClick,\n    replyType,\n    queries,\n  } = props;\n\n  const globalStore = useSendbirdStateContext();\n  const { config } = globalStore;\n  const { pubSub, logger, userId, isOnline, imageCompression, isMentionEnabled } = config;\n  const sdk = globalStore?.stores?.sdkStore?.sdk as SendbirdGroupChat;\n  const sdkInit = globalStore?.stores?.sdkStore?.initialized;\n\n  const [initialTimeStamp, setInitialTimeStamp] = useState(startingPoint);\n  useEffect(() => {\n    setInitialTimeStamp(startingPoint);\n  }, [startingPoint, channelUrl]);\n  const [animatedMessageId, setAnimatedMessageId] = useState(null);\n  const [highLightedMessageId, setHighLightedMessageId] = useState(highlightedMessage);\n  useEffect(() => {\n    setHighLightedMessageId(highlightedMessage);\n  }, [highlightedMessage]);\n  const userFilledMessageListQuery = queries?.messageListParams;\n  const [quoteMessage, setQuoteMessage] = useState<UserMessage | FileMessage>(null);\n\n  const [messagesStore, messagesDispatcher] = useReducer(\n    messagesReducer,\n    messagesInitialState,\n  ) as [MessageStoreInterface, CustomUseReducerDispatcher];\n  const scrollRef = useRef(null);\n\n  const {\n    allMessages,\n    loading,\n    initialized,\n    unreadSince,\n    isInvalid,\n    currentGroupChannel,\n    hasMorePrev,\n    oldestMessageTimeStamp,\n    hasMoreNext,\n    latestMessageTimeStamp,\n    emojiContainer,\n    readStatus,\n  } = messagesStore;\n\n  const isSuper = currentGroupChannel?.isSuper || false;\n  const isBroadcast = currentGroupChannel?.isBroadcast || false;\n  const { appInfo } = sdk;\n  const usingReaction = (\n    appInfo?.useReaction && !isBroadcast && !isSuper && isReactionEnabled\n    // TODO: Make isReactionEnabled independent from appInfo.useReaction\n  );\n\n  const emojiAllMap = useMemo(() => (\n    usingReaction\n      ? utils.getAllEmojisMapFromEmojiContainer(emojiContainer)\n      : new Map()\n  ), [emojiContainer]);\n  const emojiAllList = useMemo(() => (\n    usingReaction\n      ? utils.getAllEmojisFromEmojiContainer(emojiContainer)\n      : []\n  ), [emojiContainer]);\n  const nicknamesMap: Map<string, string> = useMemo(() => (\n    (usingReaction && currentGroupChannel)\n      ? utils.getNicknamesMapFromMembers(currentGroupChannel?.members)\n      : new Map()\n  ), [currentGroupChannel?.members]);\n\n  // Scrollup is default scroll for channel\n  const onScrollCallback = useScrollCallback({\n    currentGroupChannel, oldestMessageTimeStamp, userFilledMessageListQuery, replyType,\n  }, {\n    hasMorePrev,\n    logger,\n    messagesDispatcher,\n    sdk,\n  });\n\n  const scrollToMessage = useScrollToMessage({\n    setInitialTimeStamp,\n    setAnimatedMessageId,\n    allMessages,\n  }, { logger });\n\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMorePrev, onScrollCallback -> scroll up(default behavior)\n  // hasMoreNext, onScrollDownCallback -> scroll down\n  const onScrollDownCallback = useScrollDownCallback({\n    currentGroupChannel,\n    latestMessageTimeStamp,\n    userFilledMessageListQuery,\n    hasMoreNext,\n    replyType,\n  }, {\n    logger,\n    messagesDispatcher,\n    sdk,\n  });\n\n  const toggleReaction = useToggleReactionCallback({ currentGroupChannel }, { logger });\n\n  const memoizedEmojiListItems = useMemoizedEmojiListItems({\n    emojiContainer, toggleReaction,\n  }, {\n    isReactionEnabled: usingReaction,\n    logger,\n    userId,\n    emojiAllList,\n  });\n\n  // to create message-datasource\n  // this hook sets currentGroupChannel asynchronously\n  useGetChannel(\n    { channelUrl, sdkInit },\n    { messagesDispatcher, sdk, logger },\n  );\n\n  // to set quote message as null\n  useEffect(() => {\n    setQuoteMessage(null);\n  }, [channelUrl]);\n\n  // Hook to handle ChannelEvents and send values to useReducer using messagesDispatcher\n  useHandleChannelEvents(\n    { currentGroupChannel, sdkInit, hasMoreNext },\n    {\n      messagesDispatcher,\n      sdk,\n      logger,\n      scrollRef,\n      setQuoteMessage,\n    },\n  );\n\n  // hook that fetches messages when channel changes\n  // to be clear here useGetChannel sets currentGroupChannel\n  // and useInitialMessagesFetch executes when currentGroupChannel changes\n  // p.s This one executes on initialTimeStamp change too\n  useInitialMessagesFetch({\n    currentGroupChannel,\n    userFilledMessageListQuery,\n    initialTimeStamp,\n    latestMessageTimeStamp,\n    replyType,\n  }, {\n    logger,\n    messagesDispatcher,\n  });\n\n  // handles API calls from withSendbird\n  useEffect(() => {\n    const subScriber = utils.pubSubHandler(channelUrl, pubSub, messagesDispatcher);\n    return () => {\n      utils.pubSubHandleRemover(subScriber);\n    };\n  }, [channelUrl, sdkInit]);\n\n  // handling connection breaks\n  useHandleReconnect({ isOnline, replyType }, {\n    logger,\n    sdk,\n    currentGroupChannel,\n    messagesDispatcher,\n    userFilledMessageListQuery,\n  });\n\n  // callbacks for Message CURD actions\n  const deleteMessage = useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher },\n    { logger });\n  const updateMessage = useUpdateMessageCallback(\n    { currentGroupChannel, messagesDispatcher, onBeforeUpdateUserMessage, isMentionEnabled },\n    { logger, pubSub },\n  );\n  const resendMessage = useResendMessageCallback(\n    { currentGroupChannel, messagesDispatcher },\n    { logger },\n  );\n  const [messageInputRef, sendMessage] = useSendMessageCallback(\n    { currentGroupChannel, onBeforeSendUserMessage, isMentionEnabled },\n    {\n      logger,\n      pubSub,\n      messagesDispatcher,\n    },\n  );\n  const [sendFileMessage] = useSendFileMessageCallback(\n    { currentGroupChannel, onBeforeSendFileMessage, imageCompression },\n    {\n      logger,\n      pubSub,\n      messagesDispatcher,\n    },\n  );\n\n  return (\n    <ChannelContext.Provider value={{\n      // props\n      channelUrl,\n      isReactionEnabled: usingReaction,\n      isMessageGroupingEnabled,\n      showSearchIcon,\n      highlightedMessage,\n      startingPoint,\n      onBeforeSendUserMessage,\n      onBeforeSendFileMessage,\n      onBeforeUpdateUserMessage,\n      onChatHeaderActionClick,\n      onSearchClick,\n      replyType,\n      queries,\n\n      // messagesStore\n      allMessages,\n      loading,\n      initialized,\n      unreadSince,\n      isInvalid,\n      currentGroupChannel,\n      hasMorePrev,\n      hasMoreNext,\n      oldestMessageTimeStamp,\n      latestMessageTimeStamp,\n      emojiContainer,\n      readStatus,\n\n      // utils\n      scrollToMessage,\n      quoteMessage,\n      setQuoteMessage,\n      deleteMessage,\n      updateMessage,\n      resendMessage,\n      messageInputRef,\n      sendMessage,\n      sendFileMessage,\n      initialTimeStamp,\n      messageActionTypes,\n      messagesDispatcher,\n      setInitialTimeStamp,\n      setAnimatedMessageId,\n      setHighLightedMessageId,\n      animatedMessageId,\n      highLightedMessageId,\n      nicknamesMap,\n      emojiAllMap,\n      onScrollCallback,\n      onScrollDownCallback,\n      memoizedEmojiListItems,\n      scrollRef,\n      toggleReaction,\n    }}>\n      <UserProfileProvider\n        disableUserProfile={props?.disableUserProfile}\n        renderUserProfile={props?.renderUserProfile}\n      >\n        {children}\n      </UserProfileProvider>\n    </ChannelContext.Provider>\n  );\n}\n\nexport type UseChannelType = () => ChannelProviderInterface;\nconst useChannelContext: UseChannelType = () => React.useContext(ChannelContext);\n\nexport {\n  ChannelProvider,\n  useChannelContext,\n};\n"],"names":["RESET_MESSAGES","FETCH_INITIAL_MESSAGES_START","FETCH_INITIAL_MESSAGES_SUCCESS","FETCH_INITIAL_MESSAGES_FAILURE","FETCH_PREV_MESSAGES_SUCCESS","FETCH_PREV_MESSAGES_FAILURE","FETCH_NEXT_MESSAGES_SUCCESS","FETCH_NEXT_MESSAGES_FAILURE","SEND_MESSAGEGE_START","SEND_MESSAGEGE_SUCESS","SEND_MESSAGEGE_FAILURE","RESEND_MESSAGEGE_START","ON_MESSAGE_RECEIVED","ON_MESSAGE_UPDATED","ON_MESSAGE_THREAD_INFO_UPDATED","ON_MESSAGE_DELETED","ON_MESSAGE_DELETED_BY_REQ_ID","SET_CURRENT_CHANNEL","SET_CHANNEL_INVALID","MARK_AS_READ","ON_REACTION_UPDATED","SET_EMOJI_CONTAINER","MESSAGE_LIST_PARAMS_CHANGED","getOutgoingMessageStates","UNDEFINED","SUCCEEDED","FAILED","PENDING","getSendingMessageStatus","scrollIntoLast","intialTry","MAX_TRIES","currentTry","scrollDOM","document","querySelector","scrollTop","scrollHeight","error","setTimeout","pubSubHandleRemover","subscriber","forEach","s","remove","pubSubHandler","channelUrl","pubSub","dispatcher","Map","subscribe","set","topics","msg","channel","message","url","type","channelActions","payload","fromSelector","messageId","isOperator","groupChannel","myRole","isDisabledBecauseFrozen","isFrozen","isDisabledBecauseMuted","myMutedState","getAllEmojisFromEmojiContainer","emojiContainer","emojiCategories","allEmojis","categoryIndex","length","emojis","emojiIndex","push","getAllEmojisMapFromEmojiContainer","allEmojisMap","key","getNicknamesMapFromMembers","members","nicknamesMap","memberIndex","userId","nickname","getMessageCreatedAt","format","createdAt","isSameGroup","comparingMessage","currentChannel","messageType","sender","sendingStatus","isReadMessage","compareMessagesForGrouping","prevMessage","currMessage","nextMessage","isAcceptable","passUnsuccessfullMessages","allMessages","newMessage","lastIndexOfSucceededMessage","map","isAdminMessage","lastIndexOf","messages","splice","pxToNumber","px","parsed","Number","parseFloat","isNaN","isAboutSame","a","b","Math","abs","initialized","loading","currentGroupChannel","hasMorePrev","oldestMessageTimeStamp","hasMoreNext","latestMessageTimeStamp","unreadSince","isInvalid","messageListParams","getOldestMessageTimeStamp","oldestMessage","getLatestMessageTimeStamp","latestMessage","reducer","state","action","actionTypes","_objectSpread","filter","m","PREV_RESULT_SIZE","duplicatedMessageIds","updatedOldMessages","duplicatedMessage","find","compareIds","updatedAt","filteredNewMessages","NEXT_RESULT_SIZE","newMessages","reqId","sort","failed","currentGroupChannelUrl","some","filterMessageListParams","senderMember","profileUrl","friendName","member","Date","parentMessageId","parentMessage","event","threadInfo","targetMessageId","applyReactionEvent","useHandleChannelEvents","_a","_b","sdkInit","sdk","logger","scrollRef","setQuoteMessage","messagesDispatcher","useEffect","channelHandlerId","uuidv4","channelHandler","onMessageReceived","scrollToEnd","current","offsetHeight","info","messageActions","markAsRead","warning","onUnreadMemberStatusUpdated","onUndeliveredMemberStatusUpdated","onMessageUpdated","onThreadInfoUpdated","threadInfoUpdateEvent","onMessageDeleted","onReactionUpdated","reactionEvent","onChannelChanged","onChannelFrozen","onChannelUnfrozen","onUserMuted","user","onUserUnmuted","onUserBanned","currentUser","onOperatorUpdated","users","addGroupChannelHandler","GroupChannelHandler","removeGroupChannelHandler","useSetChannel","getChannel","then","messageActionTypes","catch","e","getAllEmoji","emojiContainer_","err","useInitialMessagesFetch","userFilledMessageListQuery","initialTimeStamp","replyType","getMessagesByTimestamp","prevResultSize","nextResultSize","isInclusive","includeReactions","includeThreadInfo","includeParentMessageInfo","ReplyType","ONLY_REPLY_TO_CHANNEL","Object","keys","getTime","finally","utils","useHandleReconnect","isOnline","wasOffline","isReactionEnabled","appInfo","useReaction","messageListParams_1","lastMessageTime","useScrollCallback","useCallback","cb","useScrollDownCallback","useDeleteMessageCallback","requestState","Promise","resolve","reject","deleteMessage","useUpdateMessageCallback","onBeforeUpdateUserMessage","isMentionEnabled","props","callback","mentionedUsers","mentionTemplate","createParamsDefault","params","mentionedMessageTemplate","createCustomPrams","updateUserMessage","publish","useResendMessageCallback","failedMessage","file","isResendable","resendUserMessage","resendFileMessage","console","useSendMessageCallback","onBeforeSendUserMessage","messageInputRef","useRef","sendMessage","quoteMessage","trim","isReplyToChannel","sendUserMessage","onPending","pendingMsg","onFailed","onSucceeded","useSendFileMessageCallback","onBeforeSendFileMessage","imageCompression","compressionRate","resizingWidth","resizingHeight","createCustomParams","compressibleFileType","compressibleRatio","compressibleDiamensions","canCompressImage","file_","image","createElement","src","URL","createObjectURL","onload","revokeObjectURL","canvas","imageWdith","naturalWidth","width","imageHeight","naturalHeight","height","targetWidth","targetHeight","context","getContext","drawImage","toBlob","newImageBlob","compressedFile","File","name","sendFileMessage","pendingMessage","localUrl","succeededMessage","useMemoizedEmojiListItems","toggleReaction","emojiAllList","useMemo","parentRef","parentContainRef","closeDropdown","spaceFromTrigger","React","emoji","reactedReaction","reactions","reaction","isReacted","userIds","indexOf","IconTypes","QUESTION","useToggleReactionCallback","deleteReaction","res","addReaction","useScrollToMessage","setInitialTimeStamp","setAnimatedMessageId","isPresent","ChannelContext","createContext","undefined","ChannelProvider","children","isMessageGroupingEnabled","showSearchIcon","highlightedMessage","startingPoint","onChatHeaderActionClick","onSearchClick","queries","globalStore","useSendbirdStateContext","config","stores","sdkStore","_d","_c","_e","useState","_f","animatedMessageId","_g","highLightedMessageId","setHighLightedMessageId","_h","_j","useReducer","messagesReducer","messagesInitialState","messagesStore","readStatus","isSuper","isBroadcast","usingReaction","emojiAllMap","onScrollCallback","scrollToMessage","onScrollDownCallback","memoizedEmojiListItems","useGetChannel","subScriber","updateMessage","resendMessage","_k","disableUserProfile","renderUserProfile","useChannelContext","useContext"],"mappings":"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"}