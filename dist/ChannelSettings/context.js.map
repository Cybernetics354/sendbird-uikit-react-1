{"version":3,"file":"context.js","sources":["../../src/smart-components/ChannelSettings/context/ChannelSettingsProvider.tsx"],"sourcesContent":["\nimport React, {\n  useEffect,\n  useState,\n} from 'react';\nimport type {\n  GroupChannel,\n  GroupChannelUpdateParams,\n  SendbirdGroupChat,\n} from '@sendbird/chat/groupChannel';\n\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { RenderUserProfileProps } from '../../../types';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport uuidv4 from '../../../utils/uuid';\n\ninterface ApplicationUserListQuery {\n  limit?: number;\n  userIdsFilter?: Array<string>;\n  metaDataKeyFilter?: string;\n  metaDataValuesFilter?: Array<string>;\n}\n\ninterface ChannelSettingsQueries {\n  applicationUserListQuery?: ApplicationUserListQuery;\n}\n\nexport type ChannelSettingsContextProps = {\n  children: React.ReactNode;\n  channelUrl: string;\n  className?: string;\n  onCloseClick?(): void;\n  onChannelModified?(channel: GroupChannel): void;\n  onBeforeUpdateChannel?(currentTitle: string, currentImg: File, data: string): GroupChannelUpdateParams;\n  queries?: ChannelSettingsQueries;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactNode;\n  disableUserProfile?: boolean;\n}\n\ninterface ChannelSettingsProviderInterface {\n  channelUrl: string;\n  onCloseClick?(): void;\n  onChannelModified?(channel: GroupChannel): void;\n  onBeforeUpdateChannel?(currentTitle: string, currentImg: File, data: string): GroupChannelUpdateParams;\n  queries?: ChannelSettingsQueries;\n  setChannelUpdateId(uniqId: string): void;\n  forceUpdateUI(): void;\n  channel: GroupChannel;\n  invalidChannel: boolean;\n}\n\nconst ChannelSettingsContext = React.createContext<ChannelSettingsProviderInterface|null>(undefined);\n\nconst ChannelSettingsProvider: React.FC<ChannelSettingsContextProps> = (props: ChannelSettingsContextProps) => {\n  const {\n    children,\n    className,\n    channelUrl,\n    onCloseClick,\n    onChannelModified,\n    onBeforeUpdateChannel,\n    queries,\n  } = props;\n\n  // fetch store from <SendbirdProvider />\n  const globalStore = useSendbirdStateContext();\n  const { config, stores } = globalStore;\n  const { sdkStore } = stores;\n  const { logger } = config;\n\n  const { initialized } = sdkStore;\n  const sdk = sdkStore?.sdk as SendbirdGroupChat;\n\n  // hack to keep track of channel updates by triggering useEffect\n  const [channelUpdateId, setChannelUpdateId] = useState(uuidv4());\n  const [channel, setChannel] = useState(null);\n  const [invalidChannel, setInvalidChannel] = useState(false);\n\n  const forceUpdateUI = () => {\n    setChannelUpdateId(uuidv4());\n  }\n\n  useEffect(() => {\n    logger.info('ChannelSettings: Setting up');\n    if (!channelUrl || !initialized || !sdk) {\n      logger.warning('ChannelSettings: Setting up failed', 'No channelUrl or sdk uninitialized');\n      setInvalidChannel(false);\n    } else {\n      if (!sdk || !sdk.groupChannel) {\n        logger.warning('ChannelSettings: No GroupChannel');\n        return;\n      }\n      sdk.groupChannel.getChannel(channelUrl).then((groupChannel) => {\n        if (!groupChannel) {\n          logger.warning('ChannelSettings: Channel not found');\n          setInvalidChannel(true);\n        } else {\n          logger.info('ChannelSettings: Fetched group channel', groupChannel);\n          setInvalidChannel(false);\n          setChannel(groupChannel);\n        }\n      });\n    }\n  }, [channelUrl, initialized, channelUpdateId]);\n\n  return (\n    <ChannelSettingsContext.Provider value={{\n      channelUrl,\n      onCloseClick,\n      onChannelModified,\n      onBeforeUpdateChannel,\n      queries,\n      setChannelUpdateId,\n      forceUpdateUI,\n      channel,\n      invalidChannel,\n    }}>\n      <UserProfileProvider\n        renderUserProfile={props?.renderUserProfile}\n        disableUserProfile={props?.disableUserProfile}\n      >\n        <div className={`sendbird-channel-settings ${className}`}>\n          {children}\n        </div>\n      </UserProfileProvider>\n    </ChannelSettingsContext.Provider>\n  );\n}\n\nexport type UseChannelSettingsType = () => ChannelSettingsProviderInterface;\nconst useChannelSettingsContext: UseChannelSettingsType = () => React.useContext(ChannelSettingsContext);\n\nexport {\n  ChannelSettingsProvider,\n  useChannelSettingsContext,\n};\n"],"names":["ChannelSettingsContext","React","createContext","undefined","ChannelSettingsProvider","props","children","className","channelUrl","onCloseClick","onChannelModified","onBeforeUpdateChannel","queries","globalStore","useSendbirdStateContext","config","stores","sdkStore","logger","initialized","sdk","_a","useState","uuidv4","channelUpdateId","setChannelUpdateId","_b","channel","setChannel","_c","invalidChannel","setInvalidChannel","forceUpdateUI","useEffect","info","warning","groupChannel","getChannel","then","renderUserProfile","disableUserProfile","concat","useChannelSettingsContext","useContext"],"mappings":"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"}