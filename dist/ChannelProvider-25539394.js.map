{"version":3,"file":"ChannelProvider-25539394.js","sources":["../src/smart-components/Channel/context/dux/actionTypes.js","../src/smart-components/Channel/context/utils.js","../src/smart-components/Channel/context/dux/initialState.js","../src/smart-components/Channel/context/dux/reducers.js","../src/smart-components/Channel/context/hooks/useHandleChannelEvents.ts","../src/smart-components/Channel/context/hooks/useGetChannel.js","../src/smart-components/Channel/context/hooks/useInitialMessagesFetch.js","../src/smart-components/Channel/context/hooks/useHandleReconnect.ts","../src/smart-components/Channel/context/hooks/useScrollCallback.js","../src/smart-components/Channel/context/hooks/useScrollDownCallback.js","../src/smart-components/Channel/context/hooks/useDeleteMessageCallback.js","../src/smart-components/Channel/context/hooks/useUpdateMessageCallback.js","../src/smart-components/Channel/context/hooks/useResendMessageCallback.js","../src/smart-components/Channel/context/hooks/useSendMessageCallback.js","../src/smart-components/Channel/context/hooks/useSendFileMessageCallback.js","../src/smart-components/Channel/context/hooks/useMemoizedEmojiListItems.jsx","../src/smart-components/Channel/context/hooks/useToggleReactionCallback.js","../src/smart-components/Channel/context/hooks/useScrollToMessage.ts","../src/smart-components/Channel/context/ChannelProvider.tsx"],"sourcesContent":["export const RESET_MESSAGES = 'RESET_MESSAGES';\n\nexport const FETCH_INITIAL_MESSAGES_START = 'FETCH_INITIAL_MESSAGES_START';\nexport const FETCH_INITIAL_MESSAGES_SUCCESS = 'FETCH_INITIAL_MESSAGES_SUCCESS';\nexport const FETCH_INITIAL_MESSAGES_FAILURE = 'FETCH_INITIAL_MESSAGES_FAILURE';\nexport const FETCH_PREV_MESSAGES_SUCCESS = 'FETCH_PREV_MESSAGES_SUCCESS';\nexport const FETCH_PREV_MESSAGES_FAILURE = 'FETCH_PREV_MESSAGES_FAILURE';\nexport const FETCH_NEXT_MESSAGES_SUCCESS = 'FETCH_NEXT_MESSAGES_SUCCESS';\nexport const FETCH_NEXT_MESSAGES_FAILURE = 'FETCH_NEXT_MESSAGES_FAILURE';\n\nexport const SEND_MESSAGEGE_START = 'SEND_MESSAGEGE_START';\nexport const SEND_MESSAGEGE_SUCESS = 'SEND_MESSAGEGE_SUCESS';\nexport const SEND_MESSAGEGE_FAILURE = 'SEND_MESSAGEGE_FAILURE';\n\nexport const RESEND_MESSAGEGE_START = 'RESEND_MESSAGEGE_START';\n\nexport const ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nexport const ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nexport const ON_MESSAGE_THREAD_INFO_UPDATED = 'ON_MESSAGE_THREAD_INFO_UPDATED';\nexport const ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nexport const ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nexport const MARK_AS_READ = 'MARK_AS_READ';\n\nexport const ON_REACTION_UPDATED = 'ON_REACTION_UPDATED';\nexport const SET_EMOJI_CONTAINER = 'SET_EMOJI_CONTAINER';\n\nexport const MESSAGE_LIST_PARAMS_CHANGED = 'MESSAGE_LIST_PARAMS_CHANGED';\n","import format from 'date-fns/format';\nimport * as channelActions from './dux/actionTypes';\nimport * as topics from '../../../lib/pubSub/topics';\n\nimport {\n  getSendingMessageStatus,\n  getOutgoingMessageStates,\n  isReadMessage,\n} from '../../../utils';\n\nconst MessageStatusType = getOutgoingMessageStates();\nconst UNDEFINED = 'undefined';\nconst { SUCCEEDED, FAILED, PENDING } = getSendingMessageStatus();\n\nexport const scrollIntoLast = (intialTry = 0) => {\n  const MAX_TRIES = 10;\n  const currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = document.querySelector('.sendbird-conversation__messages-padding');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = (channelUrl, pubSub, dispatcher) => {\n  const subscriber = new Map();\n  if (!pubSub || !pubSub.subscribe) return subscriber;\n  subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    scrollIntoLast();\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_SUCESS,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel, message } = msg;\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_START,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    scrollIntoLast();\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_SUCESS,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message, fromSelector } = msg;\n    if (fromSelector && (channelUrl === channel?.url)) {\n      dispatcher({\n        type: channelActions.ON_MESSAGE_UPDATED,\n        payload: { channel, message },\n      });\n    }\n  }));\n  subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (msg) => {\n    const { channel, messageId } = msg;\n    if (channelUrl === channel?.url) {\n      dispatcher({\n        type: channelActions.ON_MESSAGE_DELETED,\n        payload: messageId,\n      });\n    }\n  }));\n\n  return subscriber;\n};\n\nexport const getParsedStatus = (message, currentGroupChannel) => {\n  if (message.requestState === FAILED) {\n    return MessageStatusType.FAILED;\n  }\n\n  if (message.requestState === PENDING) {\n    return MessageStatusType.PENDING;\n  }\n\n  if (message.requestState === SUCCEEDED) {\n    if (!currentGroupChannel) {\n      return MessageStatusType.SENT;\n    }\n\n    const unreadMemberCount = currentGroupChannel?.getUnreadMemberCount(message);\n    if (unreadMemberCount === 0) {\n      return MessageStatusType.READ;\n    }\n\n    const isDelivered = currentGroupChannel?.getUndeliveredMemberCount(message) === 0;\n    if (isDelivered) {\n      return MessageStatusType.DELIVERED;\n    }\n\n    return MessageStatusType.SENT;\n  }\n\n  return null;\n};\n\nexport const isOperator = (groupChannel = {}) => {\n  const myRole = groupChannel?.myRole;\n  return myRole === 'operator';\n};\n\nexport const isDisabledBecauseFrozen = (groupChannel = {}) => {\n  const isFrozen = groupChannel?.isFrozen;\n  return isFrozen && !isOperator(groupChannel);\n};\n\nexport const isDisabledBecauseMuted = (groupChannel = {}) => {\n  const myMutedState = groupChannel?.myMutedState;\n  return myMutedState === 'muted';\n};\n\nexport const getEmojiCategoriesFromEmojiContainer = (emojiContainer = {}) => (\n  emojiContainer.emojiCategories ? emojiContainer.emojiCategories : []\n);\n\nexport const getAllEmojisFromEmojiContainer = (emojiContainer = {}) => {\n  const { emojiCategories = [] } = emojiContainer;\n  const allEmojis = [];\n\n  for (let categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    const { emojis } = emojiCategories[categoryIndex];\n    for (let emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      allEmojis.push(emojis[emojiIndex]);\n    }\n  }\n  return allEmojis;\n};\n\nexport const getEmojisFromEmojiContainer = (emojiContainer = {}, emojiCategoryId = '') => (\n  emojiContainer.emojiCategories\n    ? emojiContainer.emojiCategories\n      .filter((emojiCategory) => emojiCategory.id === emojiCategoryId)[0].emojis\n    : []\n);\n\nexport const getAllEmojisMapFromEmojiContainer = (emojiContainer = {}) => {\n  const { emojiCategories = [] } = emojiContainer;\n  const allEmojisMap = new Map();\n\n  for (let categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    const { emojis } = emojiCategories[categoryIndex];\n    for (let emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      const { key, url } = emojis[emojiIndex];\n      allEmojisMap.set(key, url);\n    }\n  }\n  return allEmojisMap;\n};\n\nexport const getNicknamesMapFromMembers = (members = []) => {\n  const nicknamesMap = new Map();\n  for (let memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    const { userId, nickname } = members[memberIndex];\n    nicknamesMap.set(userId, nickname);\n  }\n  return nicknamesMap;\n};\n\nexport const getMessageCreatedAt = (message) => format(message.createdAt, 'p');\n\nexport const isSameGroup = (message, comparingMessage, currentChannel) => {\n  if (!(message\n    && comparingMessage\n    && message.messageType\n    && message.messageType !== 'admin'\n    && comparingMessage.messageType\n    && comparingMessage?.messageType !== 'admin'\n    && message?.sender\n    && comparingMessage?.sender\n    && message?.createdAt\n    && comparingMessage?.createdAt\n    && message?.sender?.userId\n    && comparingMessage?.sender?.userId\n  )) {\n    return false;\n  }\n  return (\n    message?.sendingStatus === comparingMessage?.sendingStatus\n    && message?.sender?.userId === comparingMessage?.sender?.userId\n    && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)\n    && isReadMessage(currentChannel, message) === isReadMessage(currentChannel, comparingMessage)\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage,\n  currMessage,\n  nextMessage,\n  currentChannel,\n) => {\n  const sendingStatus = currMessage?.sendingStatus || '';\n  const isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [\n    isSameGroup(prevMessage, currMessage, currentChannel) && isAcceptable,\n    isSameGroup(currMessage, nextMessage, currentChannel) && isAcceptable,\n  ];\n};\n\nexport const hasOwnProperty = (property) => (payload) => {\n  // eslint-disable-next-line no-prototype-builtins\n  if (payload && payload.hasOwnProperty && payload.hasOwnProperty(property)) {\n    return true;\n  }\n  return false;\n};\n\nexport const passUnsuccessfullMessages = (allMessages, newMessage) => {\n  const { sendingStatus = UNDEFINED } = newMessage;\n  if (sendingStatus === SUCCEEDED || sendingStatus === PENDING) {\n    const lastIndexOfSucceededMessage = allMessages\n      .map((message) => (\n        message.sendingStatus\n        || ((message.isAdminMessage && message.isAdminMessage()) ? SUCCEEDED : UNDEFINED)\n      ))\n      .lastIndexOf(SUCCEEDED);\n    if (lastIndexOfSucceededMessage + 1 < allMessages.length) {\n      const messages = [...allMessages];\n      messages.splice(lastIndexOfSucceededMessage + 1, 0, newMessage);\n      return messages;\n    }\n  }\n  return [\n    ...allMessages,\n    newMessage,\n  ];\n};\n\nexport const pxToNumber = (px) => {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    const parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\n\nexport const isAboutSame = (a, b, px) => (Math.abs(a - b) <= px);\n\nexport default getParsedStatus;\n","export default {\n  initialized: false,\n  loading: false,\n  allMessages: [],\n  currentGroupChannel: { members: [] },\n  // for scrollup\n  hasMorePrev: false,\n  oldestMessageTimeStamp: 0,\n  // for scroll down\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMorePrev, onScrollCallback -> scroll up(default behavior)\n  // hasMoreNext, onScrollDownCallback -> scroll down\n  hasMoreNext: false,\n  latestMessageTimeStamp: 0,\n  emojiContainer: {},\n  unreadSince: null,\n  isInvalid: false,\n  messageListParams: null,\n};\n","import format from 'date-fns/format';\n\nimport * as actionTypes from './actionTypes';\nimport compareIds from '../../../../utils/compareIds';\nimport { PREV_RESULT_SIZE, NEXT_RESULT_SIZE } from '../const';\nimport { passUnsuccessfullMessages } from '../utils';\nimport { filterMessageListParams, getSendingMessageStatus } from '../../../../utils';\n\nconst {\n  SUCCEEDED,\n  FAILED,\n  PENDING,\n} = getSendingMessageStatus();\nconst getOldestMessageTimeStamp = (messages = []) => {\n  const oldestMessage = messages[0];\n  return (oldestMessage && oldestMessage.createdAt) || null;\n};\nconst getLatestMessageTimeStamp = (messages = []) => {\n  const latestMessage = messages[messages.length - 1];\n  return (latestMessage && latestMessage.createdAt) || null;\n};\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actionTypes.RESET_MESSAGES:\n      return {\n        ...state,\n        // when user switches channel, if the previous channel `hasMorePrev`\n        // the onScroll gets called twice, setting hasMorePrev false prevents this\n        hasMorePrev: false,\n        hasMoreNext: false,\n        allMessages: [],\n      };\n    case actionTypes.FETCH_INITIAL_MESSAGES_START: {\n      return {\n        ...state,\n        loading: true,\n        allMessages: [\n          ...state.allMessages.filter((m) => (\n            m.sendingStatus !== SUCCEEDED\n          )),\n        ],\n      };\n    }\n    case actionTypes.FETCH_INITIAL_MESSAGES_SUCCESS: {\n      const {\n        currentGroupChannel,\n        messages,\n      } = action.payload;\n      if (!(currentGroupChannel?.url === state.currentGroupChannel?.url)) {\n        return state;\n      }\n      const oldestMessageTimeStamp = getOldestMessageTimeStamp(messages);\n      const latestMessageTimeStamp = getLatestMessageTimeStamp(messages);\n      return {\n        ...state,\n        loading: false,\n        initialized: true,\n        hasMorePrev: true,\n        hasMoreNext: true,\n        oldestMessageTimeStamp,\n        latestMessageTimeStamp,\n        allMessages: [...messages],\n      };\n    }\n    case actionTypes.FETCH_PREV_MESSAGES_SUCCESS: {\n      const {\n        currentGroupChannel,\n        messages,\n      } = action.payload;\n      if (!(currentGroupChannel?.url === state.currentGroupChannel?.url)) {\n        return state;\n      }\n      const hasMorePrev = messages && messages.length === PREV_RESULT_SIZE + 1;\n      const oldestMessageTimeStamp = getOldestMessageTimeStamp(messages);\n\n      // Remove duplicated messages\n      const duplicatedMessageIds = [];\n      const updatedOldMessages = state.allMessages.map((msg) => {\n        const duplicatedMessage = messages.find(({ messageId }) => (\n          compareIds(messageId, msg.messageId)\n        ));\n        if (!duplicatedMessage) {\n          return msg;\n        }\n        duplicatedMessageIds.push(duplicatedMessage.messageId);\n        return (duplicatedMessage.updatedAt > msg.updatedAt) ? duplicatedMessage : msg;\n      });\n      const filteredNewMessages = (duplicatedMessageIds.length > 0)\n        ? messages.filter((msg) => (\n          !duplicatedMessageIds.find((messageId) => compareIds(messageId, msg.messageId))\n        ))\n        : messages;\n\n      return {\n        ...state,\n        hasMorePrev,\n        oldestMessageTimeStamp,\n        allMessages: [\n          ...filteredNewMessages,\n          ...updatedOldMessages,\n        ],\n      };\n    }\n    case actionTypes.FETCH_NEXT_MESSAGES_SUCCESS: {\n      const {\n        currentGroupChannel,\n        messages,\n      } = action.payload;\n      if (!(currentGroupChannel?.url === state.currentGroupChannel?.url)) {\n        return state;\n      }\n      const hasMoreNext = messages && messages.length === NEXT_RESULT_SIZE + 1;\n      const latestMessageTimeStamp = getLatestMessageTimeStamp(messages);\n\n      // Remove duplicated messages\n      const duplicatedMessageIds = [];\n      const updatedOldMessages = state.allMessages.map((msg) => {\n        const duplicatedMessage = messages.find(({ messageId }) => (\n          compareIds(messageId, msg.messageId)\n        ));\n        if (!duplicatedMessage) {\n          return msg;\n        }\n        duplicatedMessageIds.push(duplicatedMessage.messageId);\n        return (duplicatedMessage.updatedAt > msg.updatedAt) ? duplicatedMessage : msg;\n      });\n      const filteredNewMessages = (duplicatedMessageIds.length > 0)\n        ? messages.filter((msg) => (\n          !duplicatedMessageIds.find((messageId) => compareIds(messageId, msg.messageId))\n        ))\n        : messages;\n\n      return {\n        ...state,\n        hasMoreNext,\n        latestMessageTimeStamp,\n        allMessages: [\n          ...updatedOldMessages,\n          ...filteredNewMessages,\n        ],\n      };\n    }\n    case actionTypes.FETCH_INITIAL_MESSAGES_FAILURE:\n    case actionTypes.FETCH_PREV_MESSAGES_FAILURE:\n    case actionTypes.FETCH_NEXT_MESSAGES_FAILURE: {\n      const { currentGroupChannel } = action.payload;\n      if (currentGroupChannel?.url !== state?.currentGroupChannel?.url) {\n        return state;\n      }\n      return {\n        ...state,\n        loading: false,\n        initialized: false,\n        allMessages: [],\n        hasMorePrev: false,\n        hasMoreNext: false,\n        oldestMessageTimeStamp: null,\n        latestMessageTimeStamp: null,\n      };\n    }\n    case actionTypes.SEND_MESSAGEGE_START:\n      return {\n        ...state,\n        allMessages: [\n          ...state.allMessages,\n          { ...action.payload },\n        ],\n      };\n    case actionTypes.SEND_MESSAGEGE_SUCESS: {\n      const newMessages = state.allMessages.map((m) => (\n        compareIds(m.reqId, action.payload.reqId) ? action.payload : m\n      ));\n      [...newMessages].sort((a, b) => (\n        (\n          a.sendingStatus\n          && b.sendingStatus\n          && a.sendingStatus === SUCCEEDED\n          && (\n            b.sendingStatus === PENDING\n            || b.sendingStatus === FAILED\n          )\n        ) ? -1 : 1\n      ));\n      return {\n        ...state,\n        allMessages: newMessages,\n      };\n    }\n    case actionTypes.SEND_MESSAGEGE_FAILURE: {\n      // eslint-disable-next-line no-param-reassign\n      action.payload.failed = true;\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, action.payload.reqId)\n            ? action.payload\n            : m\n        )),\n      };\n    }\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      return {\n        ...state,\n        currentGroupChannel: action.payload,\n        isInvalid: false,\n      };\n    }\n    case actionTypes.SET_CHANNEL_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      };\n    }\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const { channel, message } = action.payload;\n      const { members } = channel;\n      const { sender } = message;\n      const { currentGroupChannel = {}, unreadSince } = state;\n      const currentGroupChannelUrl = currentGroupChannel?.url;\n\n      if (!compareIds(channel?.url, currentGroupChannelUrl)) {\n        return state;\n      }\n      // Excluded overlapping messages\n      if (state.allMessages.some((msg) => msg.messageId === message.messageId)) {\n        return state;\n      }\n      // Filter by userFilledQuery\n      if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n        return state;\n      }\n\n      if (message.isAdminMessage && message.isAdminMessage()) {\n        return {\n          ...state,\n          allMessages: passUnsuccessfullMessages(state.allMessages, message),\n        };\n      }\n\n      // Update members when sender profileUrl, nickname, friendName has been changed\n      const senderMember = members?.find((m) => (m?.userId === sender?.userId));\n      if ((senderMember?.profileUrl !== sender?.profileUrl)\n        || (senderMember?.friendName !== sender?.friendName)\n        || (senderMember?.nickname !== sender?.nickname)) {\n        channel.members = members.map((member) => {\n          if (member.userId === sender.userId) {\n            return sender;\n          }\n          return member;\n        });\n      }\n      return {\n        ...state,\n        currentGroupChannel: channel,\n        unreadSince: state?.unreadSince ? unreadSince : format(new Date(), 'p MMM dd'),\n        allMessages: passUnsuccessfullMessages(state.allMessages, message),\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const { channel, message } = action.payload;\n      const currentGroupChannelUrl = state?.currentGroupChannel?.url || '';\n      if (!compareIds(channel?.url, currentGroupChannelUrl)) {\n        return state; // Ignore event when it is not for the current channel\n      }\n      if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n        // Delete the message if it doesn't match to the params anymore\n        return {\n          ...state,\n          allMessages: state.allMessages.filter((m) => (\n            !compareIds(m.messageId, message?.messageId)\n          )),\n        };\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, message.messageId)) {\n            return message;\n          }\n          if (compareIds(m.parentMessageId, message.messageId)) {\n            m.parentMessage = message;// eslint-disable-line no-param-reassign\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.ON_MESSAGE_THREAD_INFO_UPDATED: {\n      const { channel, event } = action.payload;\n      const { channelUrl, threadInfo, targetMessageId } = event;\n      const currentGroupChannelUrl = state?.currentGroupChannel?.url || '';\n      if (\n        !compareIds(channel?.url, currentGroupChannelUrl)\n        || !compareIds(channel?.url, channelUrl)\n      ) {\n        return state; // Ignore event when it is not for the current channel\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, targetMessageId)) {\n            // eslint-disable-next-line no-param-reassign\n            m.threadInfo = threadInfo; // Upsert threadInfo to the target message\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.RESEND_MESSAGEGE_START:\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, action.payload.reqId)\n            ? action.payload\n            : m\n        )),\n      };\n    case actionTypes.MARK_AS_READ:\n      if (state.currentGroupChannel?.url !== action.payload?.channel?.url) {\n        return state;\n      }\n      return {\n        ...state,\n        unreadSince: null,\n      };\n    case actionTypes.ON_MESSAGE_DELETED:\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.messageId, action.payload)\n        )),\n      };\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID:\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.reqId, action.payload)\n        )),\n      };\n    case actionTypes.SET_EMOJI_CONTAINER: {\n      return {\n        ...state,\n        emojiContainer: action.payload,\n      };\n    }\n    case actionTypes.ON_REACTION_UPDATED: {\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, action.payload.messageId)) {\n            if (m.applyReactionEvent && typeof m.applyReactionEvent === 'function') {\n              m.applyReactionEvent(action.payload);\n            }\n            return m;\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.MESSAGE_LIST_PARAMS_CHANGED: {\n      return {\n        ...state,\n        messageListParams: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { useEffect } from \"react\";\nimport { GroupChannel, GroupChannelHandler, SendbirdGroupChat } from \"@sendbird/chat/groupChannel\";\nimport { FileMessage, UserMessage } from \"@sendbird/chat/message\";\n\nimport { scrollIntoLast } from '../utils';\n\nimport { CustomUseReducerDispatcher, Logger } from \"../../../../lib/SendbirdState\";\nimport uuidv4 from \"../../../../utils/uuid\";\nimport compareIds from '../../../../utils/compareIds';\nimport * as messageActions from '../dux/actionTypes';\n\n/**\n * Handles ChannelEvents and send values to dispatcher using messagesDispatcher\n * messagesDispatcher: Dispatcher\n * sdk: sdkInstance\n * logger: loggerInstance\n * channelUrl: string\n * sdkInit: bool\n */\ninterface DynamicParams {\n  sdkInit: boolean;\n  hasMoreNext: boolean;\n  currentGroupChannel: GroupChannel;\n}\ninterface StaticParams {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  scrollRef: React.RefObject<HTMLDivElement>;\n  setQuoteMessage: React.Dispatch<React.SetStateAction<UserMessage | FileMessage>>;\n  messagesDispatcher: CustomUseReducerDispatcher;\n}\n\nfunction useHandleChannelEvents(\n  {\n    sdkInit,\n    hasMoreNext,\n    currentGroupChannel,\n  }: DynamicParams,\n  {\n    sdk,\n    logger,\n    scrollRef,\n    setQuoteMessage,\n    messagesDispatcher,\n  }: StaticParams,\n): void {\n  useEffect(() => {\n    const channelUrl = currentGroupChannel?.url;\n    const channelHandlerId = uuidv4();\n    if (channelUrl && sdkInit) {\n      const channelHandler: GroupChannelHandler = {\n        onMessageReceived: (channel, message) => {\n          // Do not update when hasMoreNext\n          if (compareIds(channel?.url, channelUrl) && !hasMoreNext) {\n            let scrollToEnd = false;\n            try {\n              const { current } = scrollRef;\n              scrollToEnd = current.offsetHeight + current.scrollTop >= current.scrollHeight;\n            } catch (error) {\n              //\n            }\n\n            logger.info('Channel | useHandleChannelEvents: onMessageReceived', message);\n            messagesDispatcher({\n              type: messageActions.ON_MESSAGE_RECEIVED,\n              payload: { channel, message },\n            });\n\n            if (scrollToEnd) {\n              try {\n                setTimeout(() => {\n                  currentGroupChannel?.markAsRead?.();\n                  scrollIntoLast();\n                });\n              } catch (error) {\n                logger.warning('Channel | onMessageReceived | scroll to end failed');\n              }\n            }\n          }\n        },\n        onUnreadMemberStatusUpdated: (channel) => {\n          logger.info('Channel | useHandleChannelEvents: onUnreadMemberStatusUpdated', channel);\n          if (compareIds(channel?.url, channelUrl)) {\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        // before(onDeliveryReceiptUpdated)\n        onUndeliveredMemberStatusUpdated: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onDeliveryReceiptUpdated', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onMessageUpdated: (channel, message) => {\n          logger.info('Channel | useHandleChannelEvents: onMessageUpdated', message);\n          messagesDispatcher({\n            type: messageActions.ON_MESSAGE_UPDATED,\n            payload: { channel, message },\n          });\n        },\n        onThreadInfoUpdated: (channel, threadInfoUpdateEvent) => {\n          logger.info('Channel | useHandleChannelEvents: onThreadInfoUpdated', { channel, threadInfoUpdateEvent });\n          messagesDispatcher({\n            type: messageActions.ON_MESSAGE_THREAD_INFO_UPDATED,\n            payload: { channel, event: threadInfoUpdateEvent },\n          });\n        },\n        onMessageDeleted: (channel, messageId) => {\n          logger.info('Channel | useHandleChannelEvents: onMessageDeleted', { channel, messageId });\n          setQuoteMessage(null);\n          messagesDispatcher({\n            type: messageActions.ON_MESSAGE_DELETED,\n            payload: messageId,\n          });\n        },\n        onReactionUpdated: (channel, reactionEvent) => {\n          logger.info('Channel | useHandleChannelEvents: onReactionUpdated', { channel, reactionEvent });\n          messagesDispatcher({\n            type: messageActions.ON_REACTION_UPDATED,\n            payload: reactionEvent,\n          });\n        },\n        onChannelChanged: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onChannelChanged', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onChannelFrozen: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onChannelFrozen', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onChannelUnfrozen: (channel) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onChannelUnFrozen', channel);\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onUserMuted: (channel, user) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onUserMuted', { channel, user });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onUserUnmuted: (channel, user) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onUserUnmuted', { channel, user });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n        onUserBanned: (channel, user) => {\n          if (compareIds(channel?.url, channelUrl) && user?.userId === sdk?.currentUser?.userId) {\n            logger.info('Channel | useHandleChannelEvents: onUserBanned', { channel, user });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: null,\n            });\n          }\n        },\n        onOperatorUpdated: (channel, users) => {\n          if (compareIds(channel?.url, channelUrl)) {\n            logger.info('Channel | useHandleChannelEvents: onOperatorUpdated', { channel, users });\n            messagesDispatcher({\n              type: messageActions.SET_CURRENT_CHANNEL,\n              payload: channel,\n            });\n          }\n        },\n      };\n      logger.info('Channel | useHandleChannelEvents: Setup event handler', channelHandlerId);\n      // Add this group channel handler to the Sendbird chat instance\n      sdk.groupChannel?.addGroupChannelHandler(channelHandlerId, new GroupChannelHandler(channelHandler));\n    }\n    return () => {\n      if (sdk?.groupChannel?.removeGroupChannelHandler) {\n        logger.info('Channel | useHandleChannelEvents: Removing message reciver handler', channelHandlerId);\n        sdk.groupChannel.removeGroupChannelHandler(channelHandlerId);\n      } else if (sdk?.groupChannel) {\n        logger.error('Channel | useHandleChannelEvents: Not found the removeGroupChannelHandler');\n      }\n    }\n  }, [currentGroupChannel?.url, sdkInit]);\n}\n\nexport default useHandleChannelEvents;\n","import { useEffect } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useSetChannel({ channelUrl, sdkInit }, {\n  messagesDispatcher,\n  sdk,\n  logger,\n}) {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk && sdk.groupChannel) {\n      logger.info('Channel | useSetChannel fetching channel', channelUrl);\n      sdk.groupChannel.getChannel(channelUrl)\n        .then((groupChannel) => {\n          logger.info('Channel | useSetChannel fetched channel', groupChannel);\n          messagesDispatcher({\n            type: messageActionTypes.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n\n          logger.info('Channel: Mark as read', groupChannel);\n          // this order is important - this mark as read should update the event handler up above\n          groupChannel.markAsRead();\n        })\n        .catch((e) => {\n          logger.warning('Channel | useSetChannel fetch channel failed', { channelUrl, e });\n          messagesDispatcher({\n            type: messageActionTypes.SET_CHANNEL_INVALID,\n          });\n        });\n      sdk.getAllEmoji().then((emojiContainer_) => {\n        logger.info('Channel: Getting emojis success', emojiContainer_);\n        messagesDispatcher({\n          type: messageActionTypes.SET_EMOJI_CONTAINER,\n          payload: emojiContainer_,\n        });\n      }).catch((err) => {\n        logger.error('Channel: Getting emojis failed', err);\n      });\n      sdk.getAllEmoji();\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\nimport { ReplyType } from '@sendbird/chat/message';\n\nimport * as utils from '../utils';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { PREV_RESULT_SIZE, NEXT_RESULT_SIZE } from '../const';\n\nfunction useInitialMessagesFetch({\n  currentGroupChannel,\n  userFilledMessageListQuery,\n  initialTimeStamp,\n  replyType,\n}, {\n  logger,\n  messagesDispatcher,\n}) {\n  const channelUrl = currentGroupChannel?.url;\n  useEffect(() => {\n    logger.info('Channel useInitialMessagesFetch: Setup started', currentGroupChannel);\n    messagesDispatcher({\n      type: messageActionTypes.RESET_MESSAGES,\n      payload: null,\n    });\n\n    if (currentGroupChannel && currentGroupChannel?.getMessagesByTimestamp) {\n      const messageListParams = {};\n      messageListParams.prevResultSize = PREV_RESULT_SIZE;\n      if (initialTimeStamp) {\n        messageListParams.nextResultSize = NEXT_RESULT_SIZE;\n      }\n      messageListParams.isInclusive = true;\n      messageListParams.includeReactions = true;\n      if (replyType && replyType === 'QUOTE_REPLY') {\n        messageListParams.includeThreadInfo = true;\n        messageListParams.includeParentMessageInfo = true;\n        messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n      }\n      if (userFilledMessageListQuery) {\n        Object.keys(userFilledMessageListQuery).forEach((key) => {\n          messageListParams[key] = userFilledMessageListQuery[key];\n        });\n      }\n      if ((replyType && replyType === 'QUOTE_REPLY') || userFilledMessageListQuery) {\n        logger.info('Channel useInitialMessagesFetch: Setup messageListParams', messageListParams);\n        messagesDispatcher({\n          type: messageActionTypes.MESSAGE_LIST_PARAMS_CHANGED,\n          payload: messageListParams,\n        });\n      }\n\n      logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n      messagesDispatcher({\n        type: messageActionTypes.FETCH_INITIAL_MESSAGES_START,\n        payload: null,\n      });\n\n      currentGroupChannel.getMessagesByTimestamp(\n        initialTimeStamp || new Date().getTime(),\n        messageListParams,\n      )\n        .then((messages) => {\n          messagesDispatcher({\n            type: messageActionTypes.FETCH_INITIAL_MESSAGES_SUCCESS,\n            payload: {\n              currentGroupChannel,\n              messages,\n            },\n          });\n        })\n        .catch((error) => {\n          logger.error('Channel: Fetching messages failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.FETCH_INITIAL_MESSAGES_FAILURE,\n            payload: { currentGroupChannel },\n          });\n        })\n        .finally(() => {\n          if (!initialTimeStamp) {\n            setTimeout(() => utils.scrollIntoLast());\n          }\n        });\n    }\n  }, [channelUrl, userFilledMessageListQuery, initialTimeStamp]);\n  /**\n   * Note - useEffect(() => {}, [currentGroupChannel])\n   * was buggy, that is why we did\n   * const channelUrl = currentGroupChannel && currentGroupChannel.url;\n   * useEffect(() => {}, [channelUrl])\n   * Again, this hook is supposed to execute when currentGroupChannel changes\n   * The 'channelUrl' here is not the same memory reference from Conversation.props\n   */\n}\n\nexport default useInitialMessagesFetch;\n","import { useEffect } from 'react';\n\nimport type { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport {\n  MessageListParams,\n  ReplyType,\n} from '@sendbird/chat/message';\nimport * as utils from '../utils';\nimport { PREV_RESULT_SIZE } from '../const';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { Logger } from '../../../../lib/SendbirdState';\nimport { NEXT_RESULT_SIZE } from '../const';\ninterface DynamicParams {\n  isOnline: boolean;\n  replyType?: string;\n}\n\ninterface StaticParams {\n  logger: Logger;\n  sdk: SendbirdGroupChat;\n  currentGroupChannel: GroupChannel;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n  userFilledMessageListQuery?: Record<string, any>;\n}\n\nfunction useHandleReconnect(\n  { isOnline, replyType }: DynamicParams,\n  {\n    logger,\n    sdk,\n    currentGroupChannel,\n    messagesDispatcher,\n    userFilledMessageListQuery,\n  }: StaticParams,\n): void {\n  useEffect(() => {\n    const wasOffline = !isOnline;\n    return () => {\n      // state changed from offline to online\n      if (wasOffline && currentGroupChannel?.url) {\n        logger.info('Refreshing conversation state');\n        const isReactionEnabled = sdk?.appInfo?.useReaction || false;\n\n        const messageListParams: MessageListParams = {\n          prevResultSize: PREV_RESULT_SIZE,\n          isInclusive: true,\n          includeReactions: isReactionEnabled,\n          nextResultSize: NEXT_RESULT_SIZE,\n        };\n        if (replyType && replyType === 'QUOTE_REPLY') {\n          messageListParams.includeThreadInfo = true;\n          messageListParams.includeParentMessageInfo = true;\n          messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n        }\n        if (userFilledMessageListQuery) {\n          Object.keys(userFilledMessageListQuery).forEach((key) => {\n            messageListParams[key] = userFilledMessageListQuery[key];\n          });\n        }\n        logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_INITIAL_MESSAGES_START,\n          payload: null,\n        });\n\n        sdk?.groupChannel?.getChannel(currentGroupChannel?.url)\n          .then((groupChannel) => {\n            const lastMessageTime = new Date().getTime();\n\n            groupChannel.getMessagesByTimestamp(\n              lastMessageTime,\n              messageListParams,\n            )\n              .then((messages) => {\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_INITIAL_MESSAGES_SUCCESS,\n                  payload: {\n                    currentGroupChannel,\n                    messages,\n                  },\n                });\n                setTimeout(() => utils.scrollIntoLast());\n              })\n              .catch((error) => {\n                logger.error('Channel: Fetching messages failed', error);\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_INITIAL_MESSAGES_FAILURE,\n                  payload: { currentGroupChannel },\n                });\n              })\n              .finally(() => {\n                currentGroupChannel?.markAsRead?.();\n              });\n          });\n      }\n    };\n  }, [isOnline, replyType]);\n}\n\nexport default useHandleReconnect;\n","import { useCallback } from 'react';\nimport { ReplyType } from '@sendbird/chat/message';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { PREV_RESULT_SIZE } from '../const';\n\nfunction useScrollCallback({\n  currentGroupChannel,\n  oldestMessageTimeStamp,\n  userFilledMessageListQuery,\n  replyType,\n}, {\n  hasMorePrev,\n  logger,\n  messagesDispatcher,\n  sdk,\n}) {\n  return useCallback((cb) => {\n    if (!hasMorePrev) { return; }\n    const { appInfo = {} } = sdk;\n    const isReactionEnabled = appInfo.useReaction || false;\n\n    const messageListParams = {\n      prevResultSize: PREV_RESULT_SIZE,\n      isInclusive: true,\n      includeReactions: isReactionEnabled,\n    };\n    if (replyType && replyType === 'QUOTE_REPLY') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach((key) => {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n\n    currentGroupChannel.getMessagesByTimestamp(\n      oldestMessageTimeStamp || new Date().getTime(),\n      messageListParams,\n    )\n      .then((messages) => {\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_PREV_MESSAGES_SUCCESS,\n          payload: { currentGroupChannel, messages },\n        });\n        cb([messages, null]);\n      })\n      .catch((error) => {\n        logger.error('Channel: Fetching messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_PREV_MESSAGES_FAILURE,\n          payload: { currentGroupChannel },\n        });\n        cb([null, error]);\n      });\n  }, [currentGroupChannel, oldestMessageTimeStamp, replyType]);\n}\n\nexport default useScrollCallback;\n","import { useCallback } from 'react';\nimport { ReplyType } from '@sendbird/chat/message';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { NEXT_RESULT_SIZE } from '../const';\n\nfunction useScrollDownCallback({\n  currentGroupChannel,\n  latestMessageTimeStamp,\n  userFilledMessageListQuery,\n  hasMoreNext,\n  replyType,\n}, {\n  logger,\n  messagesDispatcher,\n  sdk,\n}) {\n  return useCallback((cb) => {\n    if (!hasMoreNext) { return; }\n    const { appInfo = {} } = sdk;\n    const isReactionEnabled = appInfo.useReaction || false;\n    const messageListParams = {\n      nextResultSize: NEXT_RESULT_SIZE,\n      isInclusive: true,\n      includeReactions: isReactionEnabled,\n    };\n    if (replyType && replyType === 'QUOTE_REPLY') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = ReplyType.ONLY_REPLY_TO_CHANNEL;\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach((key) => {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching later messages', { currentGroupChannel, userFilledMessageListQuery });\n\n    currentGroupChannel.getMessagesByTimestamp(\n      latestMessageTimeStamp || new Date().getTime(),\n      messageListParams,\n    )\n      .then((messages) => {\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_NEXT_MESSAGES_SUCCESS,\n          payload: { currentGroupChannel, messages },\n        });\n        cb([messages, null]);\n      })\n      .catch((error) => {\n        logger.error('Channel: Fetching later messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_NEXT_MESSAGES_FAILURE,\n          payload: { currentGroupChannel },\n        });\n        cb([null, error]);\n      });\n  }, [currentGroupChannel, latestMessageTimeStamp, hasMoreNext, replyType]);\n}\n\nexport default useScrollDownCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher }, { logger }) {\n  return useCallback((message) => {\n    logger.info('Channel | useDeleteMessageCallback: Deleting message', message);\n    const { requestState } = message;\n    return new Promise((resolve, reject) => {\n      logger.info('Channel | useDeleteMessageCallback: Deleting message requestState:', requestState);\n      // Message is only on local\n      if (requestState === 'failed' || requestState === 'pending') {\n        logger.info('Channel | useDeleteMessageCallback: Deleted message from local:', message);\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n          payload: message.reqId,\n        });\n        resolve(message);\n      }\n\n      logger.info('Channel | useDeleteMessageCallback: Deleting message from remote:', requestState);\n      currentGroupChannel.deleteMessage(message)\n        .then(() => {\n          logger.info('Channel | useDeleteMessageCallback: Deleting message success!', message);\n          messagesDispatcher({\n            type: messageActionTypes.ON_MESSAGE_DELETED,\n            payload: message.messageId,\n          });\n          resolve(message);\n        })\n        .catch((err) => {\n          logger.warning('Channel | useDeleteMessageCallback: Deleting message failed!', err);\n          reject(err);\n        });\n    });\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nexport default useDeleteMessageCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as topics from '../../../../lib/pubSub/topics';\n\nfunction useUpdateMessageCallback({\n  currentGroupChannel,\n  messagesDispatcher,\n  onBeforeUpdateUserMessage,\n  isMentionEnabled,\n}, {\n  logger,\n  pubSub,\n}) {\n  return useCallback((props, callback) => {\n    const {\n      messageId,\n      message,\n      mentionedUsers,\n      mentionTemplate,\n    } = props;\n    const createParamsDefault = () => {\n      const params = {};\n      params.message = message;\n      if (isMentionEnabled && mentionedUsers?.length > 0) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      } else {\n        params.mentionedMessageTemplate = message;\n      }\n      return params;\n    };\n\n    const createCustomPrams = onBeforeUpdateUserMessage\n      && typeof onBeforeUpdateUserMessage === 'function';\n\n    if (createCustomPrams) {\n      logger.info('Channel: creating params using onBeforeUpdateUserMessage', onBeforeUpdateUserMessage);\n    }\n\n    const params = onBeforeUpdateUserMessage\n      ? onBeforeUpdateUserMessage(message)\n      : createParamsDefault(message);\n\n    logger.info('Channel: Updating message!', params);\n    currentGroupChannel.updateUserMessage(messageId, params).then((msg, err) => {\n      if (callback) {\n        callback(err, msg);\n      }\n\n      logger.info('Channel: Updating message success!', msg);\n      messagesDispatcher({\n        type: messageActionTypes.ON_MESSAGE_UPDATED,\n        payload: {\n          channel: currentGroupChannel,\n          message: msg,\n        },\n      });\n      pubSub.publish(\n        topics.UPDATE_USER_MESSAGE,\n        {\n          message: msg,\n          channel: currentGroupChannel,\n        },\n      );\n    });\n  }, [currentGroupChannel?.url, messagesDispatcher, onBeforeUpdateUserMessage]);\n}\n\nexport default useUpdateMessageCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useResendMessageCallback({\n  currentGroupChannel,\n  messagesDispatcher,\n}, {\n  logger,\n}) {\n  return useCallback((failedMessage) => {\n    logger.info('Channel: Resending message has started', failedMessage);\n    const { messageType, file } = failedMessage;\n    if (failedMessage && typeof failedMessage.isResendable === 'function'\n      && failedMessage.isResendable()\n    ) {\n      // Move the logic setting sendingStatus to pending into the reducer\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.sendingStatus = 'pending';\n      messagesDispatcher({\n        type: messageActionTypes.RESEND_MESSAGEGE_START,\n        payload: failedMessage,\n      });\n\n      // userMessage\n      if (messageType === 'user') {\n        currentGroupChannel.resendUserMessage(failedMessage)\n          .then((message) => {\n            logger.info('Channel: Resending message success!', message);\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n              payload: message,\n            });\n          })\n          .catch((e) => {\n            logger.warning('Channel: Resending message failed!', e);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.sendingStatus = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n              payload: failedMessage,\n            });\n          });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.sendingStatus = 'pending';\n        messagesDispatcher({\n          type: messageActionTypes.RESEND_MESSAGEGE_START,\n          payload: failedMessage,\n        });\n        return;\n      }\n\n      if (messageType === 'file') {\n        currentGroupChannel\n          .resendFileMessage(failedMessage, file)\n          .then((message) => {\n            logger.info('Channel: Resending file message success!', message);\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n              payload: message,\n            });\n          })\n          .catch((e) => {\n            logger.warning('Channel: Resending file message failed!', e);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.sendingStatus = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n              payload: failedMessage,\n            });\n          });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.sendingStatus = 'pending';\n        messagesDispatcher({\n          type: messageActionTypes.RESEND_MESSAGEGE_START,\n          payload: failedMessage,\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('Message is not resendable');\n      logger.warning('Message is not resendable', failedMessage);\n    }\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nexport default useResendMessageCallback;\n","import { useRef, useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport * as topics from '../../../../lib/pubSub/topics';\n\nexport default function useSendMessageCallback({\n  isMentionEnabled,\n  currentGroupChannel,\n  onBeforeSendUserMessage,\n}, {\n  logger,\n  pubSub,\n  messagesDispatcher,\n}) {\n  const messageInputRef = useRef(null);\n\n  const sendMessage = useCallback(\n    (props) => {\n      const {\n        quoteMessage = null,\n        message,\n        mentionTemplate,\n        // mentionedUserIds,\n        mentionedUsers,\n      } = props;\n      const createParamsDefault = () => {\n        const params = {};\n        params.message = message?.trim() || message;\n        // if (isMentionEnabled && mentionedUserIds?.length > 0) {\n        if (isMentionEnabled && mentionedUsers?.length > 0) {\n          // params.mentionedUserIds = mentionedUserIds;\n          params.mentionedUsers = mentionedUsers;\n        }\n        // if (isMentionEnabled && mentionTemplate && mentionedUserIds?.length > 0) {\n        if (isMentionEnabled && mentionTemplate && mentionedUsers?.length > 0) {\n          params.mentionedMessageTemplate = mentionTemplate?.trim() || mentionTemplate;\n        }\n        if (quoteMessage) {\n          params.isReplyToChannel = true;\n          params.parentMessageId = quoteMessage.messageId;\n        }\n        return params;\n      };\n\n      const createCustomPrams = onBeforeSendUserMessage\n        && typeof onBeforeSendUserMessage === 'function';\n\n      if (createCustomPrams) {\n        logger.info('Channel: creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n\n      const params = onBeforeSendUserMessage\n        ? onBeforeSendUserMessage(message, quoteMessage)\n        : createParamsDefault();\n\n      logger.info('Channel: Sending message has started', params);\n      currentGroupChannel.sendUserMessage(params)\n        .onPending((pendingMsg) => {\n          pubSub.publish(topics.SEND_MESSAGE_START, {\n            /* pubSub is used instead of messagesDispatcher\n              to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n            message: pendingMsg,\n            channel: currentGroupChannel,\n          });\n          setTimeout(() => utils.scrollIntoLast());\n        })\n        .onFailed((err, msg) => {\n          logger.warning('Channel: Sending message failed!', { message: msg, error: err });\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n            payload: msg,\n          });\n        })\n        .onSucceeded((msg) => {\n          logger.info('Channel: Sending message success!', msg);\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n            payload: msg,\n          });\n        });\n    },\n    [currentGroupChannel, onBeforeSendUserMessage],\n  );\n\n  return [messageInputRef, sendMessage];\n}\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport * as topics from '../../../../lib/pubSub/topics';\n\nexport default function useSendFileMessageCallback({\n  currentGroupChannel,\n  onBeforeSendFileMessage,\n  imageCompression = {},\n}, {\n  logger,\n  pubSub,\n  messagesDispatcher,\n}) {\n  const sendMessage = useCallback((file, quoteMessage = null) => {\n    const {\n      compressionRate,\n      resizingWidth,\n      resizingHeight,\n    } = imageCompression;\n    const createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n\n    const compressibleFileType = (file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg');\n    const compressibleRatio = (compressionRate > 0) && (compressionRate < 1);\n    // pxToNumber returns null if values are invalid\n    const compressibleDiamensions = utils.pxToNumber(resizingWidth)\n      || utils.pxToNumber(resizingHeight);\n\n    const canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n\n    const createParamsDefault = (file_) => {\n      const params = {};\n      params.file = file_;\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n\n    if (canCompressImage) { // Using image compression\n      try {\n        const image = document.createElement('img');\n        image.src = URL.createObjectURL(file);\n        image.onload = () => {\n          URL.revokeObjectURL(image.src);\n          const canvas = document.createElement('canvas');\n          const imageWdith = image.naturalWidth || image.width;\n          const imageHeight = image.naturalHeight || image.height;\n\n          let targetWidth = utils.pxToNumber(resizingWidth) || imageWdith;\n          let targetHeight = utils.pxToNumber(resizingHeight) || imageHeight;\n\n          // In canvas.toBlob(callback, mimeType, qualityArgument)\n          // qualityArgument doesnt work\n          // so in case compressibleDiamensions are not present, we use ratio\n          if (file.type === 'image/png' && !compressibleDiamensions) {\n            targetWidth *= compressionRate;\n            targetHeight *= compressionRate;\n          }\n\n          canvas.width = targetWidth;\n          canvas.height = targetHeight;\n          const context = canvas.getContext('2d');\n          context.drawImage(image, 0, 0, targetWidth, targetHeight);\n          context.canvas.toBlob(\n            (newImageBlob) => {\n              const compressedFile = new File([newImageBlob], file.name, { type: file.type });\n              if (createCustomParams) {\n                logger.info('Channel: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n              }\n              const params = createCustomParams\n                ? onBeforeSendFileMessage(compressedFile, quoteMessage)\n                : createParamsDefault(compressedFile);\n              logger.info('Channel: Uploading file message start!', params);\n              currentGroupChannel.sendFileMessage(params)\n                .onPending((pendingMessage) => {\n                  pubSub.publish(topics.SEND_MESSAGE_START, {\n                    /* pubSub is used instead of messagesDispatcher\n                      to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n                    message: {\n                      ...pendingMessage,\n                      url: URL.createObjectURL(compressedFile),\n                      // pending thumbnail message seems to be failed\n                      requestState: 'pending',\n                    },\n                    channel: currentGroupChannel,\n                  });\n                  setTimeout(() => utils.scrollIntoLast(), 1000);\n                })\n                .onFailed((err, failedMessage) => {\n                  logger.error('Channel: Sending file message failed!', { failedMessage, err });\n                  // eslint-disable-next-line no-param-reassign\n                  failedMessage.localUrl = URL.createObjectURL(compressedFile);\n                  // eslint-disable-next-line no-param-reassign\n                  failedMessage.file = compressedFile;\n                  messagesDispatcher({\n                    type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n                    payload: failedMessage,\n                  });\n                })\n                .onSucceeded((succeededMessage) => {\n                  logger.info('Channel: Sending file message success!', succeededMessage);\n                  messagesDispatcher({\n                    type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n                    payload: succeededMessage,\n                  });\n                });\n            },\n            file.type,\n            compressionRate,\n          );\n        };\n      } catch (error) {\n        logger.error('Channel: Sending file message failed!', error);\n      }\n    } else { // Not using image compression\n      if (createCustomParams) {\n        logger.info('Channel: creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n      }\n      const params = onBeforeSendFileMessage\n        ? onBeforeSendFileMessage(file, quoteMessage)\n        : createParamsDefault(file);\n      logger.info('Channel: Uploading file message start!', params);\n\n      currentGroupChannel.sendFileMessage(params)\n        .onPending((pendingMsg) => {\n          pubSub.publish(topics.SEND_MESSAGE_START, {\n            /* pubSub is used instead of messagesDispatcher\n              to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n            message: {\n              ...pendingMsg,\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending',\n            },\n            channel: currentGroupChannel,\n          });\n          setTimeout(() => utils.scrollIntoLast(), 1000);\n        })\n        .onFailed((error, message) => {\n          logger.error('Channel: Sending file message failed!', { message, error });\n          // eslint-disable-next-line no-param-reassign\n          message.localUrl = URL.createObjectURL(file);\n          // eslint-disable-next-line no-param-reassign\n          message.file = file;\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n            payload: message,\n          });\n        })\n        .onSucceeded((message) => {\n          logger.info('Channel: Sending message success!', message);\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n            payload: message,\n          });\n        });\n    }\n  }, [currentGroupChannel, onBeforeSendFileMessage, imageCompression]);\n  return [sendMessage];\n}\n","import React, { useMemo } from 'react';\n\nimport { EmojiListItems } from '../../../../ui/ContextMenu';\nimport ReactionButton from '../../../../ui/ReactionButton';\nimport ImageRenderer from '../../../../ui/ImageRenderer';\nimport Icon, { IconTypes } from '../../../../ui/Icon';\n\nexport default function useMemoizedEmojiListItems({\n  emojiContainer, toggleReaction,\n}, {\n  isReactionEnabled,\n  logger,\n  userId,\n  emojiAllList,\n}) {\n  /* eslint-disable react/prop-types */\n  return useMemo(() => ({\n    parentRef,\n    parentContainRef,\n    message,\n    closeDropdown,\n    spaceFromTrigger = {},\n  }) => {\n    if (!isReactionEnabled || !(parentRef || parentContainRef || message || closeDropdown)) {\n      logger.warning('Channel: Invalid Params in memoizedEmojiListItems');\n      return null;\n    }\n\n    return (\n      <EmojiListItems\n        parentRef={parentRef}\n        parentContainRef={parentContainRef}\n        closeDropdown={closeDropdown}\n        spaceFromTrigger={spaceFromTrigger}\n      >\n        {\n          emojiAllList.map((emoji) => {\n            const reactedReaction = message.reactions\n              .filter((reaction) => reaction.key === emoji.key)[0];\n            const isReacted = reactedReaction\n              ? !(reactedReaction.userIds.indexOf(userId) < 0)\n              : false;\n            return (\n              <ReactionButton\n                key={emoji.key}\n                width=\"36px\"\n                height=\"36px\"\n                selected={isReacted}\n                onClick={() => {\n                  closeDropdown();\n                  toggleReaction(message, emoji.key, isReacted);\n                }}\n              >\n                <ImageRenderer\n                  url={emoji.url}\n                  width=\"28px\"\n                  height=\"28px\"\n                  defaultComponent={\n                    <Icon width=\"28px\" height=\"28px\" type={IconTypes.QUESTION} />\n                  }\n                />\n              </ReactionButton>\n            );\n          })\n        }\n      </EmojiListItems>\n    );\n  }, [emojiContainer, toggleReaction]);\n}\n","import { useCallback } from 'react';\n\nexport default function useToggleReactionCallback({ currentGroupChannel }, { logger }) {\n  return useCallback((message, key, isReacted) => {\n    if (isReacted) {\n      currentGroupChannel.deleteReaction(message, key)\n        .then((res) => {\n          logger.info('Delete reaction success', res);\n        })\n        .catch((err) => {\n          logger.warning('Delete reaction failed', err);\n        });\n      return;\n    }\n    currentGroupChannel.addReaction(message, key)\n      .then((res) => {\n        logger.info('Add reaction success', res);\n      })\n      .catch((err) => {\n        logger.warning('Add reaction failed', err);\n      });\n  }, [currentGroupChannel]);\n}\n","import type { BaseMessage } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\n\nimport { Logger } from '../../../../index';\n\ninterface DynamicParams {\n  setInitialTimeStamp: React.Dispatch<React.SetStateAction<number>>;\n  setAnimatedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  allMessages: BaseMessage[];\n}\n\ninterface StaticParams {\n  logger: Logger;\n}\n\nfunction useScrollToMessage({\n  setInitialTimeStamp,\n  setAnimatedMessageId,\n  allMessages,\n}: DynamicParams,\n  { logger }: StaticParams,\n): (createdAt: number, messageId: number) => void {\n  return useCallback(\n    (createdAt: number, messageId: number) => {\n      const isPresent = allMessages.find((m) => (\n        m.messageId === messageId\n      ));\n      setAnimatedMessageId(null);\n      setTimeout(() => {\n        if (isPresent) {\n          logger.info('Channel: scroll to message - message is present');\n          setAnimatedMessageId(messageId);\n        } else {\n          logger.info('Channel: scroll to message - fetching older messages');\n          setInitialTimeStamp(null);\n          setInitialTimeStamp(createdAt);\n          setAnimatedMessageId(messageId);\n        }\n      });\n    }, [\n    setInitialTimeStamp,\n    setAnimatedMessageId,\n    allMessages,\n  ],\n  );\n}\n\nexport default useScrollToMessage;\n","\nimport React, {\n  useEffect,\n  useState,\n  useReducer,\n  useRef,\n  useMemo,\n} from 'react';\n\nimport type { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport type {\n  FileMessage,\n  FileMessageCreateParams,\n  UserMessage,\n  UserMessageCreateParams,\n  UserMessageUpdateParams,\n} from '@sendbird/chat/message';\nimport type { SendbirdError, User } from '@sendbird/chat';\n\nimport { ReplyType, RenderUserProfileProps } from '../../../types';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { CoreMessageType } from '../../../utils';\n\nimport * as utils from './utils';\n\nimport messagesInitialState from './dux/initialState';\nimport messagesReducer from './dux/reducers';\nimport * as messageActionTypes from './dux/actionTypes';\n\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useGetChannel from './hooks/useGetChannel';\nimport useInitialMessagesFetch from './hooks/useInitialMessagesFetch';\nimport useHandleReconnect from './hooks/useHandleReconnect';\nimport useScrollCallback from './hooks/useScrollCallback';\nimport useScrollDownCallback from './hooks/useScrollDownCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useSendMessageCallback from './hooks/useSendMessageCallback';\nimport useSendFileMessageCallback from './hooks/useSendFileMessageCallback';\nimport useMemoizedEmojiListItems from './hooks/useMemoizedEmojiListItems';\nimport useToggleReactionCallback from './hooks/useToggleReactionCallback';\nimport useScrollToMessage from './hooks/useScrollToMessage';\nimport { CustomUseReducerDispatcher } from '../../../lib/SendbirdState';\n\nexport type MessageListParams = {\n  // https://sendbird.github.io/core-sdk-javascript/module-model_params_messageListParams-MessageListParams.html\n  replyType?: string,\n  messageType?: string,\n  prevResultSize?: number,\n  nextResultSize?: number,\n  reverse?: boolean,\n  isInclusive?: boolean,\n  includeMetaArray?: boolean,\n  includeReactions?: boolean,\n  includeThreadInfo?: boolean,\n  includePollDetails?: boolean,\n  includeParentMessageInfo?: boolean,\n  showSubchannelMessagesOnly?: boolean,\n  customTypes?: Array<string>,\n  senderUserIds?: Array<string>,\n};\n\nexport type ChannelQueries = {\n  messageListParams?: MessageListParams;\n};\n\nexport type ChannelContextProps = {\n  children?: React.ReactNode;\n  channelUrl: string;\n  isReactionEnabled?: boolean;\n  isMessageGroupingEnabled?: boolean;\n  showSearchIcon?: boolean;\n  highlightedMessage?: number;\n  startingPoint?: number;\n  onBeforeSendUserMessage?(text: string, quotedMessage?: UserMessage | FileMessage): UserMessageCreateParams;\n  onBeforeSendFileMessage?(file: File, quotedMessage?: UserMessage | FileMessage): FileMessageCreateParams;\n  onBeforeUpdateUserMessage?(text: string): UserMessageUpdateParams;\n  onChatHeaderActionClick?(event: React.MouseEvent<HTMLElement>): void;\n  onSearchClick?(): void;\n  replyType?: ReplyType;\n  queries?: ChannelQueries;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactNode;\n  disableUserProfile?: boolean;\n};\n\ninterface MessageStoreInterface {\n  allMessages: CoreMessageType[];\n  loading: boolean;\n  initialized: boolean;\n  unreadSince: string;\n  isInvalid: boolean;\n  currentGroupChannel: GroupChannel;\n  hasMorePrev: boolean;\n  oldestMessageTimeStamp: number;\n  hasMoreNext: boolean;\n  latestMessageTimeStamp: number;\n  emojiContainer: any;\n  readStatus: any;\n}\n\ninterface SendMessageParams {\n  message: string;\n  quoteMessage?: UserMessage | FileMessage;\n  // mentionedUserIds?: Array<string>;\n  mentionedUsers?: Array<User>;\n  mentionTemplate?: string;\n}\n\ninterface UpdateMessageProps {\n  messageId: string | number;\n  message: string;\n  mentionedUsers?: Array<User>;\n  mentionTemplate?: string;\n}\n\ninterface ChannelProviderInterface extends ChannelContextProps, MessageStoreInterface {\n  scrollToMessage?(createdAt: number, messageId: number): void;\n  messageActionTypes: Record<string ,string>;\n  messagesDispatcher: CustomUseReducerDispatcher;\n  quoteMessage: UserMessage | FileMessage;\n  setQuoteMessage: React.Dispatch<React.SetStateAction<UserMessage | FileMessage>>;\n  initialTimeStamp: number;\n  setInitialTimeStamp: React.Dispatch<React.SetStateAction<number>>;\n  animatedMessageId: number;\n  highLightedMessageId: number;\n  nicknamesMap: Map<string, string>;\n  emojiAllMap: any;\n  onScrollCallback: any;\n  onScrollDownCallback: any;\n  memoizedEmojiListItems: any;\n  scrollRef: React.MutableRefObject<HTMLDivElement>;\n  setAnimatedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  setHighLightedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  messageInputRef: React.MutableRefObject<HTMLInputElement>,\n  deleteMessage(message: CoreMessageType): Promise<CoreMessageType>,\n  updateMessage(props: UpdateMessageProps, callback?: (err: SendbirdError, message: UserMessage) => void): Promise<CoreMessageType>,\n  resendMessage(failedMessage: UserMessage | FileMessage): Promise<UserMessage | FileMessage>,\n  // TODO: Good to change interface to using params / This part need refactoring\n  sendMessage(props: SendMessageParams): Promise<UserMessage>,\n  sendFileMessage(file: File, quoteMessage: UserMessage | FileMessage): Promise<FileMessage>,\n  // sendMessage(messageParams: SendBird.UserMessageParams): Promise<SendBird.UserMessage>,\n  // sendFileMessage(messageParams: SendBird.FileMessageParams): Promise<SendBird.FileMessage>,\n  toggleReaction(message: UserMessage | FileMessage, emojiKey: string, isReacted: boolean): void,\n  renderUserMentionItem?: (props: { user: User }) => JSX.Element;\n}\n\nconst ChannelContext = React.createContext<ChannelProviderInterface | null>(undefined);\n\nconst ChannelProvider: React.FC<ChannelContextProps> = (props: ChannelContextProps) => {\n  const {\n    channelUrl,\n    children,\n    isReactionEnabled,\n    isMessageGroupingEnabled,\n    showSearchIcon,\n    highlightedMessage,\n    startingPoint,\n    onBeforeSendUserMessage,\n    onBeforeSendFileMessage,\n    onBeforeUpdateUserMessage,\n    onChatHeaderActionClick,\n    onSearchClick,\n    replyType,\n    queries,\n  } = props;\n\n  const globalStore = useSendbirdStateContext();\n  const { config } = globalStore;\n  const { pubSub, logger, userId, isOnline, imageCompression, isMentionEnabled } = config;\n  const sdk = globalStore?.stores?.sdkStore?.sdk as SendbirdGroupChat;\n  const sdkInit = globalStore?.stores?.sdkStore?.initialized;\n\n  const [initialTimeStamp, setInitialTimeStamp] = useState(startingPoint);\n  useEffect(() => {\n    setInitialTimeStamp(startingPoint);\n  }, [startingPoint, channelUrl]);\n  const [animatedMessageId, setAnimatedMessageId] = useState(null);\n  const [highLightedMessageId, setHighLightedMessageId] = useState(highlightedMessage);\n  useEffect(() => {\n    setHighLightedMessageId(highlightedMessage);\n  }, [highlightedMessage]);\n  const userFilledMessageListQuery = queries?.messageListParams;\n  const [quoteMessage, setQuoteMessage] = useState<UserMessage | FileMessage>(null);\n\n  const [messagesStore, messagesDispatcher] = useReducer(\n    messagesReducer,\n    messagesInitialState,\n  ) as [MessageStoreInterface, CustomUseReducerDispatcher];\n  const scrollRef = useRef(null);\n\n  const {\n    allMessages,\n    loading,\n    initialized,\n    unreadSince,\n    isInvalid,\n    currentGroupChannel,\n    hasMorePrev,\n    oldestMessageTimeStamp,\n    hasMoreNext,\n    latestMessageTimeStamp,\n    emojiContainer,\n    readStatus,\n  } = messagesStore;\n\n  const isSuper = currentGroupChannel?.isSuper || false;\n  const isBroadcast = currentGroupChannel?.isBroadcast || false;\n  const { appInfo } = sdk;\n  const usingReaction = (\n    appInfo?.useReaction && !isBroadcast && !isSuper && isReactionEnabled\n    // TODO: Make isReactionEnabled independent from appInfo.useReaction\n  );\n\n  const emojiAllMap = useMemo(() => (\n    usingReaction\n      ? utils.getAllEmojisMapFromEmojiContainer(emojiContainer)\n      : new Map()\n  ), [emojiContainer]);\n  const emojiAllList = useMemo(() => (\n    usingReaction\n      ? utils.getAllEmojisFromEmojiContainer(emojiContainer)\n      : []\n  ), [emojiContainer]);\n  const nicknamesMap: Map<string, string> = useMemo(() => (\n    (usingReaction && currentGroupChannel)\n      ? utils.getNicknamesMapFromMembers(currentGroupChannel?.members)\n      : new Map()\n  ), [currentGroupChannel?.members]);\n\n  // Scrollup is default scroll for channel\n  const onScrollCallback = useScrollCallback({\n    currentGroupChannel, oldestMessageTimeStamp, userFilledMessageListQuery, replyType,\n  }, {\n    hasMorePrev,\n    logger,\n    messagesDispatcher,\n    sdk,\n  });\n\n  const scrollToMessage = useScrollToMessage({\n    setInitialTimeStamp,\n    setAnimatedMessageId,\n    allMessages,\n  }, { logger });\n\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMorePrev, onScrollCallback -> scroll up(default behavior)\n  // hasMoreNext, onScrollDownCallback -> scroll down\n  const onScrollDownCallback = useScrollDownCallback({\n    currentGroupChannel,\n    latestMessageTimeStamp,\n    userFilledMessageListQuery,\n    hasMoreNext,\n    replyType,\n  }, {\n    logger,\n    messagesDispatcher,\n    sdk,\n  });\n\n  const toggleReaction = useToggleReactionCallback({ currentGroupChannel }, { logger });\n\n  const memoizedEmojiListItems = useMemoizedEmojiListItems({\n    emojiContainer, toggleReaction,\n  }, {\n    isReactionEnabled: usingReaction,\n    logger,\n    userId,\n    emojiAllList,\n  });\n\n  // to create message-datasource\n  // this hook sets currentGroupChannel asynchronously\n  useGetChannel(\n    { channelUrl, sdkInit },\n    { messagesDispatcher, sdk, logger },\n  );\n\n  // to set quote message as null\n  useEffect(() => {\n    setQuoteMessage(null);\n  }, [channelUrl]);\n\n  // Hook to handle ChannelEvents and send values to useReducer using messagesDispatcher\n  useHandleChannelEvents(\n    { currentGroupChannel, sdkInit, hasMoreNext },\n    {\n      messagesDispatcher,\n      sdk,\n      logger,\n      scrollRef,\n      setQuoteMessage,\n    },\n  );\n\n  // hook that fetches messages when channel changes\n  // to be clear here useGetChannel sets currentGroupChannel\n  // and useInitialMessagesFetch executes when currentGroupChannel changes\n  // p.s This one executes on initialTimeStamp change too\n  useInitialMessagesFetch({\n    currentGroupChannel,\n    userFilledMessageListQuery,\n    initialTimeStamp,\n    latestMessageTimeStamp,\n    replyType,\n  }, {\n    logger,\n    messagesDispatcher,\n  });\n\n  // handles API calls from withSendbird\n  useEffect(() => {\n    const subScriber = utils.pubSubHandler(channelUrl, pubSub, messagesDispatcher);\n    return () => {\n      utils.pubSubHandleRemover(subScriber);\n    };\n  }, [channelUrl, sdkInit]);\n\n  // handling connection breaks\n  useHandleReconnect({ isOnline, replyType }, {\n    logger,\n    sdk,\n    currentGroupChannel,\n    messagesDispatcher,\n    userFilledMessageListQuery,\n  });\n\n  // callbacks for Message CURD actions\n  const deleteMessage = useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher },\n    { logger });\n  const updateMessage = useUpdateMessageCallback(\n    { currentGroupChannel, messagesDispatcher, onBeforeUpdateUserMessage, isMentionEnabled },\n    { logger, pubSub },\n  );\n  const resendMessage = useResendMessageCallback(\n    { currentGroupChannel, messagesDispatcher },\n    { logger },\n  );\n  const [messageInputRef, sendMessage] = useSendMessageCallback(\n    { currentGroupChannel, onBeforeSendUserMessage, isMentionEnabled },\n    {\n      logger,\n      pubSub,\n      messagesDispatcher,\n    },\n  );\n  const [sendFileMessage] = useSendFileMessageCallback(\n    { currentGroupChannel, onBeforeSendFileMessage, imageCompression },\n    {\n      logger,\n      pubSub,\n      messagesDispatcher,\n    },\n  );\n\n  return (\n    <ChannelContext.Provider value={{\n      // props\n      channelUrl,\n      isReactionEnabled: usingReaction,\n      isMessageGroupingEnabled,\n      showSearchIcon,\n      highlightedMessage,\n      startingPoint,\n      onBeforeSendUserMessage,\n      onBeforeSendFileMessage,\n      onBeforeUpdateUserMessage,\n      onChatHeaderActionClick,\n      onSearchClick,\n      replyType,\n      queries,\n\n      // messagesStore\n      allMessages,\n      loading,\n      initialized,\n      unreadSince,\n      isInvalid,\n      currentGroupChannel,\n      hasMorePrev,\n      hasMoreNext,\n      oldestMessageTimeStamp,\n      latestMessageTimeStamp,\n      emojiContainer,\n      readStatus,\n\n      // utils\n      scrollToMessage,\n      quoteMessage,\n      setQuoteMessage,\n      deleteMessage,\n      updateMessage,\n      resendMessage,\n      messageInputRef,\n      sendMessage,\n      sendFileMessage,\n      initialTimeStamp,\n      messageActionTypes,\n      messagesDispatcher,\n      setInitialTimeStamp,\n      setAnimatedMessageId,\n      setHighLightedMessageId,\n      animatedMessageId,\n      highLightedMessageId,\n      nicknamesMap,\n      emojiAllMap,\n      onScrollCallback,\n      onScrollDownCallback,\n      memoizedEmojiListItems,\n      scrollRef,\n      toggleReaction,\n    }}>\n      <UserProfileProvider\n        disableUserProfile={props?.disableUserProfile}\n        renderUserProfile={props?.renderUserProfile}\n      >\n        {children}\n      </UserProfileProvider>\n    </ChannelContext.Provider>\n  );\n}\n\nexport type UseChannelType = () => ChannelProviderInterface;\nconst useChannelContext: UseChannelType = () => React.useContext(ChannelContext);\n\nexport {\n  ChannelProvider,\n  useChannelContext,\n};\n"],"names":["RESET_MESSAGES","FETCH_INITIAL_MESSAGES_START","FETCH_INITIAL_MESSAGES_SUCCESS","FETCH_INITIAL_MESSAGES_FAILURE","FETCH_PREV_MESSAGES_SUCCESS","FETCH_PREV_MESSAGES_FAILURE","FETCH_NEXT_MESSAGES_SUCCESS","FETCH_NEXT_MESSAGES_FAILURE","SEND_MESSAGEGE_START","SEND_MESSAGEGE_SUCESS","SEND_MESSAGEGE_FAILURE","RESEND_MESSAGEGE_START","ON_MESSAGE_RECEIVED","ON_MESSAGE_UPDATED","ON_MESSAGE_THREAD_INFO_UPDATED","ON_MESSAGE_DELETED","ON_MESSAGE_DELETED_BY_REQ_ID","SET_CURRENT_CHANNEL","SET_CHANNEL_INVALID","MARK_AS_READ","ON_REACTION_UPDATED","SET_EMOJI_CONTAINER","MESSAGE_LIST_PARAMS_CHANGED","getOutgoingMessageStates","UNDEFINED","SUCCEEDED","FAILED","PENDING","getSendingMessageStatus","scrollIntoLast","intialTry","MAX_TRIES","currentTry","scrollDOM","document","querySelector","scrollTop","scrollHeight","error","setTimeout","pubSubHandleRemover","subscriber","forEach","s","remove","pubSubHandler","channelUrl","pubSub","dispatcher","Map","subscribe","set","topics","msg","channel","message","url","type","channelActions","payload","fromSelector","messageId","isOperator","groupChannel","myRole","isDisabledBecauseFrozen","isFrozen","isDisabledBecauseMuted","myMutedState","getAllEmojisFromEmojiContainer","emojiContainer","emojiCategories","allEmojis","categoryIndex","length","emojis","emojiIndex","push","getAllEmojisMapFromEmojiContainer","allEmojisMap","key","getNicknamesMapFromMembers","members","nicknamesMap","memberIndex","userId","nickname","getMessageCreatedAt","format","createdAt","isSameGroup","comparingMessage","currentChannel","messageType","sender","sendingStatus","isReadMessage","compareMessagesForGrouping","prevMessage","currMessage","nextMessage","isAcceptable","passUnsuccessfullMessages","allMessages","newMessage","lastIndexOfSucceededMessage","map","isAdminMessage","lastIndexOf","messages","splice","pxToNumber","px","parsed","Number","parseFloat","isNaN","isAboutSame","a","b","Math","abs","initialized","loading","currentGroupChannel","hasMorePrev","oldestMessageTimeStamp","hasMoreNext","latestMessageTimeStamp","unreadSince","isInvalid","messageListParams","getOldestMessageTimeStamp","oldestMessage","getLatestMessageTimeStamp","latestMessage","reducer","state","action","actionTypes","filter","m","PREV_RESULT_SIZE","duplicatedMessageIds","updatedOldMessages","duplicatedMessage","find","compareIds","updatedAt","filteredNewMessages","NEXT_RESULT_SIZE","newMessages","reqId","sort","failed","currentGroupChannelUrl","some","filterMessageListParams","senderMember","profileUrl","friendName","member","Date","parentMessageId","parentMessage","event","threadInfo","targetMessageId","applyReactionEvent","useHandleChannelEvents","_a","_b","sdkInit","sdk","logger","scrollRef","setQuoteMessage","messagesDispatcher","useEffect","channelHandlerId","uuidv4","channelHandler","onMessageReceived","scrollToEnd","current","offsetHeight","info","messageActions","markAsRead","warning","onUnreadMemberStatusUpdated","onUndeliveredMemberStatusUpdated","onMessageUpdated","onThreadInfoUpdated","threadInfoUpdateEvent","onMessageDeleted","onReactionUpdated","reactionEvent","onChannelChanged","onChannelFrozen","onChannelUnfrozen","onUserMuted","user","onUserUnmuted","onUserBanned","currentUser","onOperatorUpdated","users","addGroupChannelHandler","GroupChannelHandler","removeGroupChannelHandler","useSetChannel","getChannel","then","messageActionTypes","catch","e","getAllEmoji","emojiContainer_","err","useInitialMessagesFetch","userFilledMessageListQuery","initialTimeStamp","replyType","getMessagesByTimestamp","prevResultSize","nextResultSize","isInclusive","includeReactions","includeThreadInfo","includeParentMessageInfo","ReplyType","ONLY_REPLY_TO_CHANNEL","Object","keys","getTime","finally","utils","useHandleReconnect","isOnline","wasOffline","isReactionEnabled","appInfo","useReaction","messageListParams_1","lastMessageTime","useScrollCallback","useCallback","cb","useScrollDownCallback","useDeleteMessageCallback","requestState","Promise","resolve","reject","deleteMessage","useUpdateMessageCallback","onBeforeUpdateUserMessage","isMentionEnabled","props","callback","mentionedUsers","mentionTemplate","createParamsDefault","params","mentionedMessageTemplate","createCustomPrams","updateUserMessage","publish","useResendMessageCallback","failedMessage","file","isResendable","resendUserMessage","resendFileMessage","console","useSendMessageCallback","onBeforeSendUserMessage","messageInputRef","useRef","sendMessage","quoteMessage","trim","isReplyToChannel","sendUserMessage","onPending","pendingMsg","onFailed","onSucceeded","useSendFileMessageCallback","onBeforeSendFileMessage","imageCompression","compressionRate","resizingWidth","resizingHeight","createCustomParams","compressibleFileType","compressibleRatio","compressibleDiamensions","canCompressImage","file_","image","createElement","src","URL","createObjectURL","onload","revokeObjectURL","canvas","imageWdith","naturalWidth","width","imageHeight","naturalHeight","height","targetWidth","targetHeight","context","getContext","drawImage","toBlob","newImageBlob","compressedFile","File","name","sendFileMessage","pendingMessage","localUrl","succeededMessage","useMemoizedEmojiListItems","toggleReaction","emojiAllList","useMemo","parentRef","parentContainRef","closeDropdown","spaceFromTrigger","React","emoji","reactedReaction","reactions","reaction","isReacted","userIds","indexOf","IconTypes","QUESTION","useToggleReactionCallback","deleteReaction","res","addReaction","useScrollToMessage","setInitialTimeStamp","setAnimatedMessageId","isPresent","ChannelContext","createContext","undefined","ChannelProvider","children","isMessageGroupingEnabled","showSearchIcon","highlightedMessage","startingPoint","onChatHeaderActionClick","onSearchClick","queries","globalStore","useSendbirdStateContext","config","stores","sdkStore","_e","useState","_f","animatedMessageId","_g","highLightedMessageId","setHighLightedMessageId","_h","_j","useReducer","messagesReducer","messagesInitialState","messagesStore","readStatus","isSuper","isBroadcast","usingReaction","emojiAllMap","onScrollCallback","scrollToMessage","onScrollDownCallback","memoizedEmojiListItems","useGetChannel","subScriber","updateMessage","resendMessage","_k","disableUserProfile","renderUserProfile","useChannelContext","useContext"],"mappings":"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"}