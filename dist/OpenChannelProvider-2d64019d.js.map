{"version":3,"file":"OpenChannelProvider-2d64019d.js","sources":["../src/smart-components/OpenChannel/context/utils.ts","../src/smart-components/OpenChannel/context/dux/actionTypes.ts","../src/smart-components/OpenChannel/context/dux/reducers.ts","../src/smart-components/OpenChannel/context/dux/initialState.ts","../src/smart-components/OpenChannel/context/hooks/useSetChannel.ts","../src/smart-components/OpenChannel/context/hooks/useHandleChannelEvents.ts","../src/smart-components/OpenChannel/context/hooks/useInitialMessagesFetch.ts","../src/smart-components/OpenChannel/context/hooks/useScrollCallback.ts","../src/smart-components/OpenChannel/context/hooks/useCheckScrollBottom.ts","../src/smart-components/OpenChannel/context/hooks/useSendMessageCallback.ts","../src/smart-components/OpenChannel/context/hooks/useFileUploadCallback.ts","../src/smart-components/OpenChannel/context/hooks/useUpdateMessageCallback.ts","../src/smart-components/OpenChannel/context/hooks/useDeleteMessageCallback.ts","../src/smart-components/OpenChannel/context/hooks/useResendMessageCallback.ts","../src/smart-components/OpenChannel/context/hooks/useTrimMessageList.ts","../src/smart-components/OpenChannel/context/OpenChannelProvider.tsx"],"sourcesContent":["import type { User } from '@sendbird/chat';\nimport type { AdminMessage, FileMessage, UserMessage } from '@sendbird/chat/message';\nimport type { OpenChannel, ParticipantListQuery } from '@sendbird/chat/openChannel';\nimport format from 'date-fns/format';\n\nimport { Logger } from '../../../lib/SendbirdState';\n\nexport const getMessageCreatedAt = (message: UserMessage | FileMessage): string => format(message.createdAt, 'p');\n\nexport const shouldFetchMore = (messageLength: number, maxMessages: number): boolean => {\n  if (typeof maxMessages !== 'number') {\n    return true;\n  }\n\n  if (typeof maxMessages === 'number'\n    && maxMessages > messageLength\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport const scrollIntoLast = (intialTry = 0): void => {\n  const MAX_TRIES = 10;\n  const currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = document.querySelector('.sendbird-openchannel-conversation-scroll__container__item-container');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nexport const isSameGroup = (\n  message: AdminMessage | UserMessage | FileMessage,\n  comparingMessage: AdminMessage | UserMessage | FileMessage,\n): boolean => {\n  if (!(\n    message\n    && comparingMessage\n    && message?.messageType\n    && message.messageType !== 'admin'\n    && comparingMessage?.messageType\n    && comparingMessage.messageType !== 'admin'\n    && (message as UserMessage | FileMessage)?.sender\n    && (comparingMessage as UserMessage | FileMessage)?.sender\n    && message?.createdAt\n    && comparingMessage?.createdAt\n    && (message as UserMessage | FileMessage)?.sender?.userId\n    && (comparingMessage as UserMessage | FileMessage)?.sender?.userId\n  )) {\n    return false\n  }\n  // to fix typecasting\n  const message_ = message as UserMessage;\n  const comparingMessage_ = comparingMessage as UserMessage;\n  return (\n    message_?.sendingStatus === comparingMessage_?.sendingStatus\n    && message_?.sender?.userId === comparingMessage_?.sender?.userId\n    && (\n      getMessageCreatedAt(message as UserMessage | FileMessage) === getMessageCreatedAt(comparingMessage as UserMessage | FileMessage)\n    )\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage: AdminMessage | UserMessage | FileMessage,\n  currMessage: AdminMessage | UserMessage | FileMessage,\n  nextMessage: AdminMessage | UserMessage | FileMessage,\n): [boolean, boolean] => (\n  [\n    isSameGroup(prevMessage, currMessage),\n    isSameGroup(currMessage, nextMessage),\n  ]\n);\n\nexport const kFormatter = (num: number): string => {\n  if (Math.abs(num) > 999999) {\n    return `${(Math.abs(num) / 1000000).toFixed(1)}M`;\n  }\n\n  if (Math.abs(num) > 999) {\n    return `${(Math.abs(num) / 1000).toFixed(1)}K`;\n  }\n\n  return `${num}`;\n};\n\nexport const isOperator = (openChannel: OpenChannel, userId: string): boolean => {\n  const operators = openChannel?.operators;\n  if (operators.map(operator => operator.userId).indexOf(userId) < 0) {\n    return false;\n  }\n  return true;\n};\n\nexport const isDisabledBecauseFrozen = (openChannel: OpenChannel, userId: string): boolean => {\n  const isFrozen = openChannel?.isFrozen;\n  return isFrozen && !isOperator(openChannel, userId);\n};\n\nexport const isDisabledBecauseMuted = (mutedParticipantIds: Array<string>, userId: string): boolean => {\n  return mutedParticipantIds.indexOf(userId) > -1;\n};\n\nexport const fetchWithListQuery = (\n  listQuery: ParticipantListQuery,\n  logger: Logger,\n  eachQueryNextCallback: (users: Array<User>) => void,\n): void => {\n  const fetchList = (query: ParticipantListQuery) => {\n    const { hasNext } = query;\n    if (hasNext) {\n      query.next().then((users) => {\n        eachQueryNextCallback(users);\n        fetchList(query);\n      }).catch((error) => {\n        logger.warning('OpenChannel | FetchUserList failed', error);\n      });\n    } else {\n      logger.info('OpenChannel | FetchUserList finished');\n    }\n  };\n  logger.info('OpenChannel | FetchUserList start', listQuery);\n  fetchList(listQuery);\n};\n\nexport const pxToNumber = (px: string | number): number | void => {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    const parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\n","export const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nexport const RESET_MESSAGES = 'RESET_MESSAGES';\nexport const GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START';\nexport const GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS';\nexport const GET_PREV_MESSAGES_FAIL = 'GET_PREV_MESSAGES_FAIL';\nexport const SENDING_MESSAGE_FAILED = 'SENDING_MESSAGE_FAILED';\nexport const SENDING_MESSAGE_SUCCEEDED = 'SENDING_MESSAGE_SUCCEEDED';\nexport const SENDING_MESSAGE_START = 'SENDING_MESSAGE_START';\nexport const RESENDING_MESSAGE_START = 'RESENDING_MESSAGE_START';\nexport const FETCH_PARTICIPANT_LIST = 'FETCH_PARTICIPANT_LIST';\nexport const FETCH_BANNED_USER_LIST = 'FETCH_BANNED_USER_LIST';\nexport const FETCH_MUTED_USER_LIST= 'FETCH_MUTED_USER_LIST';\nexport const TRIM_MESSAGE_LIST= 'TRIM_MESSAGE_LIST';\n\n// event handlers\nexport const ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nexport const ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nexport const ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nexport const ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\nexport const ON_OPERATOR_UPDATED = 'ON_OPERATOR_UPDATED';\nexport const ON_USER_ENTERED = 'ON_USER_ENTERED';\nexport const ON_USER_EXITED = 'ON_USER_EXITED';\nexport const ON_USER_MUTED = 'ON_USER_MUTED';\nexport const ON_USER_UNMUTED = 'ON_USER_UNMUTED';\nexport const ON_USER_BANNED = 'ON_USER_BANNED';\nexport const ON_USER_UNBANNED = 'ON_USER_UNBANNED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nexport const ON_META_DATA_CREATED = 'ON_META_DATA_CREATED';\nexport const ON_META_DATA_UPDATED = 'ON_META_DATA_UPDATED';\nexport const ON_META_DATA_DELETED = 'ON_META_DATA_DELETED';\nexport const ON_META_COUNTERS_CREATED = 'ON_META_COUNTERS_CREATED';\nexport const ON_META_COUNTERS_UPDATED = 'ON_META_COUNTERS_UPDATED';\nexport const ON_META_COUNTERS_DELETED = 'ON_META_COUNTERS_DELETED';\nexport const ON_MENTION_RECEIVED = 'ON_MENTION_RECEIVED';\n","import { State as initialStateInterface } from './initialState';\nimport * as actionTypes from './actionTypes';\n\nimport compareIds from '../../../../utils/compareIds.js';\nimport { FileMessage, UserMessage } from '@sendbird/chat/message';\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\n// @ts-ignore: Unreachable code error\ninterface ActionInterface {\n  type: string;\n  payload?: any;\n}\n\nexport default function reducer(\n  state: initialStateInterface,\n  action: ActionInterface,\n): initialStateInterface {\n  switch (action.type) {\n    case actionTypes.RESET_MESSAGES: {\n      return {\n        ...state,\n        allMessages: [],\n      };\n    }\n\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      const gottenChannel = action.payload;\n      const operators = gottenChannel.operators;\n      if (\n        !state.isInvalid\n        && state.currentOpenChannel\n        && state.currentOpenChannel.url\n        && (state.currentOpenChannel.url === gottenChannel.url)\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: gottenChannel,\n        isInvalid: false,\n        operators: operators,\n        participants: operators,\n        bannedParticipantIds: [],\n        mutedParticipantIds: [],\n      };\n    }\n    case actionTypes.SET_CHANNEL_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_START: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_SUCESS:\n    case actionTypes.GET_PREV_MESSAGES_FAIL: {\n      const isFailed = (action.type === actionTypes.GET_PREV_MESSAGES_FAIL);\n      const {\n        currentOpenChannel = {},\n        messages = [],\n        hasMore,\n        lastMessageTimestamp,\n      } = action.payload;\n      const actionChannelUrl = currentOpenChannel.url;\n      const receivedMessages = isFailed ? [] : messages;\n      const _hasMore = isFailed ? false : hasMore;\n      const _lastMessageTimestamp = isFailed ? 0 : lastMessageTimestamp;\n\n      const stateChannel = state.currentOpenChannel;\n      const stateChannelUrl = stateChannel.url;\n\n      if (actionChannelUrl !== stateChannelUrl) {\n        return state;\n      }\n\n      const filteredAllMessages = state.allMessages.filter((message) => (\n        !(receivedMessages.find(({ messageId }) => compareIds(messageId, message.messageId)))\n      ));\n      return {\n        ...state,\n        loading: false,\n        initialized: true,\n        hasMore: _hasMore,\n        lastMessageTimestamp: _lastMessageTimestamp,\n        allMessages: [\n          ...receivedMessages,\n          ...filteredAllMessages,\n        ],\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_START: {\n      const {\n        message,\n        channel,\n      } = action.payload;\n      if (channel?.url !== state.currentOpenChannel.url\n        || state.allMessages.some((m) => (m as UserMessage | FileMessage).reqId === message.reqId)\n        // Handing failed first than sending start issue\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: [\n          ...state.allMessages,\n          message,\n        ],\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_SUCCEEDED: {\n      const sentMessage = action.payload;\n      const newMessages = state.allMessages.map((m) => (\n        compareIds((m as UserMessage | FileMessage).reqId, sentMessage.reqId) ? sentMessage : m\n      ));\n      return {\n        ...state,\n        allMessages: newMessages,\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_FAILED: {\n      const sentMessage = action.payload;\n      if (!state.allMessages.some((m) => (m as UserMessage | FileMessage).reqId === sentMessage.reqId)) {\n        // Handling failed first than sending start issue\n        return {\n          ...state,\n          allMessages: [\n            ...state.allMessages.filter((m) => !compareIds((m as UserMessage | FileMessage).reqId, sentMessage)),\n            sentMessage,\n          ],\n        };\n      } else {\n        return {\n          ...state,\n          allMessages: state.allMessages.map((m) => (\n            compareIds((m as UserMessage | FileMessage).reqId, sentMessage.reqId) ? sentMessage : m\n          )),\n        };\n      }\n    }\n    case actionTypes.TRIM_MESSAGE_LIST: {\n      const { allMessages } = state;\n      const messageLimit = action.payload?.messageLimit;\n      if (messageLimit\n        && messageLimit > 0\n        && allMessages?.length > messageLimit\n      ) {\n        const sliceAt = allMessages.length - messageLimit;\n        return {\n          ...state,\n          allMessages: allMessages.slice(sliceAt),\n        }\n      }\n      return state;\n    }\n    case actionTypes.RESENDING_MESSAGE_START: {\n      const eventedChannel = action.payload.channel;\n      const resentMessage = action.payload.message;\n      if (eventedChannel.url !== state.currentOpenChannel.url) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds((m as UserMessage | FileMessage).reqId, resentMessage.reqId) ? resentMessage : m\n        )),\n      };\n    }\n    case actionTypes.FETCH_PARTICIPANT_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedParticipantList = action.payload.users;\n      if (eventedChannel.url !== state.currentOpenChannel.url) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: [...state.participants, ...fetchedParticipantList],\n        // Should check duplication\n      };\n    }\n    case actionTypes.FETCH_BANNED_USER_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedBannedUserList = action.payload.users;\n      if (\n        (eventedChannel.url !== state.currentOpenChannel.url)\n        || !(fetchedBannedUserList.every(user => typeof user.userId === 'string'))\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        bannedParticipantIds: [\n          ...state.bannedParticipantIds,\n          ...fetchedBannedUserList.map(user => user.userId),\n        ],\n        // Should check duplication\n      };\n    }\n    case actionTypes.FETCH_MUTED_USER_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedMutedUserList = action.payload.users;\n      if (\n        (eventedChannel.url !== state.currentOpenChannel.url)\n        || !(fetchedMutedUserList.every(user => typeof user.userId === 'string'))\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: [\n          ...state.mutedParticipantIds,\n          ...fetchedMutedUserList.map(user => user.userId),\n        ],\n        // Should check duplication\n      };\n    }\n    // events\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const eventedChannel = action.payload.channel;\n      const receivedMessage = action.payload.message;\n\n      const {\n        currentOpenChannel\n      } = state;\n\n      if (\n        !compareIds(eventedChannel.url, currentOpenChannel.url)\n        || (\n          !(state.allMessages.map(\n            (message) => message.messageId).indexOf(receivedMessage.messageId) < 0\n          ))\n      ) {\n        return state;\n      }\n\n      return {\n        ...state,\n        allMessages: [...state.allMessages, receivedMessage],\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const eventedChannel = action.payload.channel;\n      const updatedMessage = action.payload.message;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((message) => (\n          message.isIdentical(updatedMessage)\n            ? updatedMessage\n            : message\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED: {\n      const eventedChannel = action.payload.channel;\n      const deletedMessageId = action.payload.messageId;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((message) => (\n          !compareIds(message.messageId, deletedMessageId)\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID: {\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds((m as UserMessage | FileMessage).reqId, action.payload)\n        )),\n      };\n    }\n    case actionTypes.ON_OPERATOR_UPDATED: {\n      const eventedChannel = action.payload.channel;\n      const updatedOperators = action.payload.operators;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: eventedChannel,\n        operators: updatedOperators,\n      };\n    }\n    case actionTypes.ON_USER_ENTERED: {\n      const eventedChannel = action.payload.channel;\n      const enteredUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: [...state.participants, enteredUser],\n      };\n    }\n    case actionTypes.ON_USER_EXITED: {\n      const eventedChannel = action.payload.channel;\n      const exitedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: state.participants.filter((participant) => (\n          !compareIds(participant.userId, exitedUser.userId)\n        )),\n      };\n    }\n    case actionTypes.ON_USER_MUTED: {\n      const eventedChannel = action.payload.channel;\n      const mutedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.mutedParticipantIds.indexOf(mutedUser.userId) >= 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: [...state.mutedParticipantIds, mutedUser.userId],\n      };\n    }\n    case actionTypes.ON_USER_UNMUTED: {\n      const eventedChannel = action.payload.channel;\n      const unmutedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.mutedParticipantIds.indexOf(unmutedUser.userId) < 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: state.mutedParticipantIds.filter(userId => userId !== unmutedUser.userId),\n      };\n    }\n    case actionTypes.ON_USER_BANNED: {\n      const eventedChannel = action.payload.channel;\n      const bannedUser = action.payload.user;\n      const currentUser = action.payload.currentUser;\n      const currentChannel = state.currentOpenChannel;\n      if (currentChannel?.url === eventedChannel?.url && bannedUser?.userId === currentUser?.userId) {\n        return {\n          ...state,\n          currentOpenChannel: null,\n        }\n      } else if (currentChannel?.url === eventedChannel?.url) {\n        return {\n          ...state,\n          bannedParticipantIds: [...state.bannedParticipantIds, bannedUser.userId],\n        }\n      }\n      return state;\n    }\n    case actionTypes.ON_USER_UNBANNED: {\n      const eventedChannel = action.payload.channel;\n      const unbannedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (currentChannel?.url === eventedChannel?.url) {\n        return {\n          ...state,\n          bannedParticipantIds: state.bannedParticipantIds.filter((userId) => userId !== unbannedUser.userId),\n        }\n      }\n      return state;\n    }\n    case actionTypes.ON_CHANNEL_FROZEN: {\n      const frozenChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== frozenChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        frozen: true,\n      };\n    }\n    case actionTypes.ON_CHANNEL_UNFROZEN: {\n      const unfrozenChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== unfrozenChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        frozen: false,\n      };\n    }\n    case actionTypes.ON_CHANNEL_CHANGED: {\n      const changedChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== changedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: changedChannel,\n      };\n    }\n    case actionTypes.ON_CHANNEL_DELETED: {\n      const deletedChannelUrl = action.payload;\n      const currentChannel = state?.currentOpenChannel;\n      if (currentChannel?.url === deletedChannelUrl) {\n        return {\n          ...state,\n          currentOpenChannel: null,\n        }\n      }\n      return state;\n    }\n    case actionTypes.ON_META_DATA_CREATED: {\n      // const eventedChannel = action.payload.channel;\n      // const createdMetaData = action.payload.metaData;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_DATA_UPDATED: {\n      // const eventedChannel = action.payload.channel;\n      // const updatedMetaData = action.payload.metaData;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_DATA_DELETED: {\n      // const eventedChannel = action.payload.channel;\n      // const deletedMetaDataKeys = action.payload.metaDataKeys;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_CREATED: {\n      // const eventedChannel = action.payload.channel;\n      // const createdMetaCounter = action.payload.metaCounter;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_UPDATED: {\n      // const eventedChannel = action.payload.channel;\n      // const updatedMetaCounter = action.payload.metaCounter;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_DELETED: {\n      // const eventedChannel = action.payload.channel;\n      // const deletedMetaCounterKeys = action.payload.metaCounterKeys;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_MENTION_RECEIVED: {\n      // const eventedChannel = action.payload.channel;\n      // const mentionedMessage = action.payload.message;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    default:\n      return state;\n  }\n}\n","import type { User } from '@sendbird/chat';\nimport { AdminMessage, FileMessage, UserMessage } from '@sendbird/chat/message';\nimport type { OpenChannel } from '@sendbird/chat/openChannel';\n\nexport interface State {\n  allMessages: Array<AdminMessage | UserMessage | FileMessage>;\n  loading: boolean;\n  initialized: boolean;\n  currentOpenChannel: OpenChannel;\n  isInvalid: boolean;\n  hasMore: boolean;\n  lastMessageTimestamp: number;\n  frozen: boolean;\n  operators: Array<User>;\n  participants: Array<User>;\n  bannedParticipantIds: Array<string>;\n  mutedParticipantIds: Array<string>;\n}\n\nconst initialState: State = {\n  allMessages: [],\n  loading: false,\n  initialized: false,\n  currentOpenChannel: null,\n  isInvalid: false,\n  hasMore: false,\n  lastMessageTimestamp: 0,\n  frozen: false,\n  operators: [],\n  participants: [],\n  bannedParticipantIds: [],\n  mutedParticipantIds: [],\n};\n\nexport default initialState;\n","import type { SendbirdOpenChat } from '@sendbird/chat/openChannel';\nimport { useEffect } from 'react';\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  channelUrl: string;\n  sdkInit: boolean;\n  fetchingParticipants: boolean;\n  userId: string;\n}\ninterface StaticParams {\n  sdk: SendbirdOpenChat;\n  logger: Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSetChannel(\n  { channelUrl, sdkInit, fetchingParticipants, userId }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk?.openChannel) {\n      logger.info('OpenChannel | useSetChannel fetching channel', channelUrl);\n      sdk.openChannel.getChannel(channelUrl).then((openChannel) => {\n        logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n        messagesDispatcher({\n          type: messageActionTypes.SET_CURRENT_CHANNEL,\n          payload: openChannel,\n        });\n        openChannel.enter().then(() => {\n          if (openChannel.isOperator(userId)) { // only operator has a permission to fetch these list\n            const bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n            const mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n            utils.fetchWithListQuery(\n              bannedParticipantListQuery,\n              logger,\n              (users) => {\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_BANNED_USER_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users,\n                  },\n                });\n              },\n            );\n            utils.fetchWithListQuery(\n              mutedParticipantListQuery,\n              logger,\n              (users) => {\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_MUTED_USER_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users,\n                  },\n                });\n              },\n            );\n          }\n          if (fetchingParticipants) {\n            // fetch participants list\n            const participantListQuery = openChannel.createParticipantListQuery({});\n            utils.fetchWithListQuery(\n              participantListQuery,\n              logger,\n              (users) => {\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_PARTICIPANT_LIST,\n                  payload: {\n                    channel: openChannel,\n                    users,\n                  },\n                });\n              },\n            );\n          }\n        }).catch((error) => {\n          logger.warning('OpenChannel | useSetChannel enter channel failed', { channelUrl, error });\n          messagesDispatcher({\n            type: messageActionTypes.SET_CHANNEL_INVALID,\n            payload: null,\n          });\n        });\n      }).catch(() => {\n        logger.warning('OpenChannel | useSetChannel fetching channel failed', { channelUrl, error });\n          messagesDispatcher({\n            type: messageActionTypes.SET_CHANNEL_INVALID,\n            payload: null,\n          });\n      });\n    }\n  }, [channelUrl, sdkInit, fetchingParticipants]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\nimport { ChannelType } from '@sendbird/chat';\nimport { OpenChannel, OpenChannelHandler, SendbirdOpenChat } from '@sendbird/chat/openChannel';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport uuidv4 from '../../../../utils/uuid';\nimport { scrollIntoLast } from '../utils';\nimport { Logger } from '../../../../lib/SendbirdState';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n  checkScrollBottom: () => boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdOpenChat;\n  logger: Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useHandleChannelEvents(\n  { currentOpenChannel, checkScrollBottom }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    const messageReceiverId = uuidv4();\n    if (currentOpenChannel && currentOpenChannel.url && sdk?.openChannel?.addOpenChannelHandler) {\n      logger.info('OpenChannel | useHandleChannelEvents: Setup evnet handler', messageReceiverId);\n      const channelHandlerParams: OpenChannelHandler = {\n        onMessageReceived: (channel, message) => {\n          const scrollToEnd = checkScrollBottom();\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMessageReceived', { channelUrl, message });\n          messagesDispatcher({\n            type: messageActionTypes.ON_MESSAGE_RECEIVED,\n            payload: { channel, message },\n          });\n          if (scrollToEnd) {\n            try {\n              setTimeout(() => {\n                scrollIntoLast();\n              });\n            } catch (error) {\n              logger.warning('OpenChannel | onMessageReceived | scroll to end failed');\n            }\n          }\n        },\n        onMessageUpdated: (channel, message) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMessageUpdated', { channelUrl, message });\n          messagesDispatcher({\n            type: messageActionTypes.ON_MESSAGE_UPDATED,\n            payload: { channel, message },\n          });\n        },\n        onMessageDeleted: (channel, messageId) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMessageDeleted', { channelUrl, messageId });\n          messagesDispatcher({\n            type: messageActionTypes.ON_MESSAGE_DELETED,\n            payload: { channel, messageId },\n          });\n        },\n        onOperatorUpdated: (channel, operators) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onOperatorUpdated', { channelUrl, operators });\n          messagesDispatcher({\n            type: messageActionTypes.ON_OPERATOR_UPDATED,\n            payload: { channel, operators },\n          });\n        },\n        onUserEntered: (channel, user) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onUserEntered', { channelUrl, user });\n          messagesDispatcher({\n            type: messageActionTypes.ON_USER_ENTERED,\n            payload: { channel, user },\n          });\n        },\n        onUserExited: (channel, user) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onUserExited', { channelUrl, user });\n          messagesDispatcher({\n            type: messageActionTypes.ON_USER_EXITED,\n            payload: { channel, user },\n          });\n        },\n        onUserMuted: (channel, user) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onUserMuted', { channelUrl, user });\n          messagesDispatcher({\n            type: messageActionTypes.ON_USER_MUTED,\n            payload: { channel, user },\n          });\n        },\n        onUserUnmuted: (channel, user) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onUserUnmuted', { channelUrl, user });\n          messagesDispatcher({\n            type: messageActionTypes.ON_USER_UNMUTED,\n            payload: { channel, user },\n          });\n        },\n        onUserBanned: (channel, user) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onUserBanned', { channelUrl, user });\n          messagesDispatcher({\n            type: messageActionTypes.ON_USER_BANNED,\n            payload: { channel, user, currentUser: sdk?.currentUser },\n          });\n        },\n        onUserUnbanned: (channel, user) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onUserUnbanned', { channelUrl, user });\n          messagesDispatcher({\n            type: messageActionTypes.ON_USER_UNBANNED,\n            payload: { channel, user },\n          });\n        },\n        onChannelFrozen: (channel) => {\n          logger.info('OpenChannel | useHandleChannelEvents: onChannelFrozen', channel);\n          messagesDispatcher({\n            type: messageActionTypes.ON_CHANNEL_FROZEN,\n            payload: channel,\n          });\n        },\n        onChannelUnfrozen: (channel) => {\n          logger.info('OpenChannel | useHandleChannelEvents: onChannelUnfrozen', channel);\n          messagesDispatcher({\n            type: messageActionTypes.ON_CHANNEL_UNFROZEN,\n            payload: channel,\n          });\n        },\n        onChannelChanged: (channel) => {\n          logger.info('OpenChannel | useHandleChannelEvents: onChannelChanged', channel);\n          messagesDispatcher({\n            type: messageActionTypes.ON_CHANNEL_CHANGED,\n            payload: channel,\n          });\n        },\n        onMetaDataCreated: (channel, metaData) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMetaDataCreated', { channelUrl, metaData });\n          messagesDispatcher({\n            type: messageActionTypes.ON_META_DATA_CREATED,\n            payload: { channel, metaData },\n          });\n        },\n        onMetaDataUpdated: (channel, metaData) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMetaDataUpdated', { channelUrl, metaData });\n          messagesDispatcher({\n            type: messageActionTypes.ON_META_DATA_UPDATED,\n            payload: { channel, metaData },\n          });\n        },\n        onMetaDataDeleted: (channel, metaDataKeys) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMetaDataDeleted', { channelUrl, metaDataKeys });\n          messagesDispatcher({\n            type: messageActionTypes.ON_META_DATA_DELETED,\n            payload: { channel, metaDataKeys },\n          });\n        },\n        onMetaCounterCreated: (channel, metaCounter) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersCreated', { channelUrl, metaCounter });\n          messagesDispatcher({\n            type: messageActionTypes.ON_META_COUNTERS_CREATED,\n            payload: { channel, metaCounter },\n          });\n        },\n        onMetaCounterUpdated: (channel, metaCounter) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersUpdated', { channelUrl, metaCounter });\n          messagesDispatcher({\n            type: messageActionTypes.ON_META_COUNTERS_UPDATED,\n            payload: { channel, metaCounter },\n          });\n        },\n        onMetaCounterDeleted: (channel, metaCounterKeys) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersDeleted', { channelUrl, metaCounterKeys });\n          messagesDispatcher({\n            type: messageActionTypes.ON_META_COUNTERS_DELETED,\n            payload: { channel, metaCounterKeys },\n          });\n        },\n        onMentionReceived: (channel, message) => {\n          const channelUrl = channel?.url;\n          logger.info('OpenChannel | useHandleChannelEvents: onMentionReceived', { channelUrl, message });\n          messagesDispatcher({\n            type: messageActionTypes.ON_MENTION_RECEIVED,\n            payload: { channel, message },\n          });\n        },\n        onChannelDeleted: (channelUrl, channelType) => {\n          if (channelType === ChannelType.OPEN && currentOpenChannel?.url === channelUrl) {\n            messagesDispatcher({\n              type: messageActionTypes.ON_CHANNEL_DELETED,\n              payload: channelUrl,\n            });\n          }\n        },\n      };\n\n      const ChannelHandler = new OpenChannelHandler(channelHandlerParams);\n\n      sdk?.openChannel?.addOpenChannelHandler(messageReceiverId, ChannelHandler);\n    }\n\n    return () => {\n      if (sdk?.openChannel?.removeOpenChannelHandler) {\n        logger.info('OpenChannel | useHandleChannelEvents: Removing message receiver handler', messageReceiverId);\n        sdk.openChannel.removeOpenChannelHandler(messageReceiverId);\n      }\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useHandleChannelEvents;\n","import { MessageListParams } from '@sendbird/chat/message';\nimport type { OpenChannel } from '@sendbird/chat/openChannel';\nimport { useEffect } from 'react';\n\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { scrollIntoLast } from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n  /* eslint-disable @typescript-eslint/no-explicit-any*/\n  userFilledMessageListParams?: Record<string, any>;\n}\ninterface StaticParams {\n  logger: Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useInitialMessagesFetch(\n  { currentOpenChannel, userFilledMessageListParams }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    logger.info('OpenChannel | useInitialMessagesFetch: Setup started', currentOpenChannel);\n    messagesDispatcher({\n      type: messageActionTypes.RESET_MESSAGES,\n      payload: null,\n    });\n\n    if (currentOpenChannel && currentOpenChannel.getMessagesByTimestamp) {\n      const messageListParams: MessageListParams = {\n        nextResultSize: 0,\n        prevResultSize: 30,\n        isInclusive: true,\n        includeReactions: false,\n      };\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach((key) => {\n          messageListParams[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useInitialMessagesFetch: Used customizedMessageListParams');\n      }\n\n      logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages', { currentOpenChannel, messageListParams });\n      messagesDispatcher({\n        type: messageActionTypes.GET_PREV_MESSAGES_START,\n        payload: null,\n      });\n      currentOpenChannel.getMessagesByTimestamp(new Date().getTime(), messageListParams).then((messages) => {\n        logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages succeeded', messages);\n        const hasMore = (messages && messages.length > 0);\n        const lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n        messagesDispatcher({\n          type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n          payload: {\n            currentOpenChannel,\n            messages,\n            hasMore,\n            lastMessageTimestamp,\n          },\n        });\n        setTimeout(() => { scrollIntoLast(); });\n      }).catch((error) => {\n        logger.error('OpenChannel | useInitialMessagesFetch: Fetching messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.GET_PREV_MESSAGES_FAIL,\n          payload: {\n            currentOpenChannel,\n            messages: [],\n            hasMore: false,\n            lastMessageTimestamp: 0,\n          },\n        });\n      });\n    }\n  }, [currentOpenChannel, userFilledMessageListParams]);\n}\n\nexport default useInitialMessagesFetch;\n","import { useCallback } from 'react';\nimport type { MessageListParams } from '@sendbird/chat/message';\nimport type { OpenChannel, SendbirdOpenChat } from '@sendbird/chat/openChannel';\n\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n  lastMessageTimestamp: number;\n  fetchMore?: boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdOpenChat;\n  logger: Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n  hasMore: boolean;\n  /* eslint-disable @typescript-eslint/no-explicit-any*/\n  userFilledMessageListParams?: Record<string, any>;\n}\ntype CallbackReturn = (callback: () => void) => void;\n\nfunction useScrollCallback(\n  { currentOpenChannel, lastMessageTimestamp, fetchMore }: DynamicParams,\n  { sdk, logger, messagesDispatcher, hasMore, userFilledMessageListParams }: StaticParams,\n): CallbackReturn {\n  return useCallback((callback) => {\n    if (fetchMore && hasMore) {\n      logger.info('OpenChannel | useScrollCallback: start');\n      const messageListParams: MessageListParams = {\n        prevResultSize: 30,\n        includeReactions: false,\n        nextResultSize: 0,\n      };\n\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach((key) => {\n          messageListParams[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useScrollCallback: Used userFilledMessageListParams', userFilledMessageListParams);\n      }\n\n      logger.info('OpenChannel | useScrollCallback: Fetching messages', { currentOpenChannel, messageListParams });\n\n      currentOpenChannel.getMessagesByTimestamp(lastMessageTimestamp || new Date().getTime(), messageListParams).then((messages) => {\n        logger.info('OpenChannel | useScrollCallback: Fetching messages succeeded', messages);\n        const hasMore = (messages && messages.length > 0);\n        const lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n        messagesDispatcher({\n          type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n          payload: {\n            currentOpenChannel,\n            messages,\n            hasMore,\n            lastMessageTimestamp,\n          }\n        });\n        setTimeout(() => {\n          callback();\n        });\n      }).catch((error) => {\n        logger.error('OpenChannel | useScrollCallback: Fetching messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.GET_PREV_MESSAGES_FAIL,\n          payload: {\n            currentOpenChannel,\n            messages: [],\n            hasMore: false,\n            lastMessageTimestamp: 0,\n          }\n        });\n      });\n    }\n  }, [currentOpenChannel, lastMessageTimestamp, fetchMore, sdk]);\n}\n\nexport default useScrollCallback;\n","import { useCallback } from 'react';\nimport { Logger } from '../../../../module';\n\ninterface DynamicParams {\n  conversationScrollRef: React.RefObject<HTMLDivElement>;\n}\ninterface StaticParams {\n  logger: Logger;\n}\n\nfunction useCheckScrollBottom(\n  { conversationScrollRef }: DynamicParams,\n  { logger }: StaticParams,\n): () => boolean {\n  return useCallback(() => {\n    let isBottom = true;\n    if (conversationScrollRef && conversationScrollRef?.current) {\n      try {\n        const conversationScroll = conversationScrollRef.current;\n        isBottom = conversationScroll.scrollHeight <= conversationScroll.scrollTop + conversationScroll.clientHeight;\n      } catch(error) {\n        logger.error('OpenChannel | useCheckScrollBottom', error);\n      }\n    }\n    return isBottom;\n  }, [conversationScrollRef])\n}\n\nexport default useCheckScrollBottom;\n","import type { UserMessageCreateParams } from '@sendbird/chat/message';\nimport type { OpenChannel, SendbirdOpenChat } from '@sendbird/chat/openChannel';\n\nimport { useCallback } from 'react';\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n  onBeforeSendUserMessage: (text: string) => UserMessageCreateParams;\n  checkScrollBottom: () => boolean;\n  messageInputRef: React.RefObject<HTMLInputElement>;\n}\ninterface StaticParams {\n  sdk: SendbirdOpenChat;\n  logger: Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSendMessageCallback(\n  { currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): () => void {\n  return useCallback(() => {\n    if (sdk) {\n      const text = messageInputRef.current.innerText;\n      const createParamsDefault = (txt: string | number): UserMessageCreateParams => {\n        const message = typeof txt === 'string' ? txt.trim() : txt.toString(10).trim();\n        const params: UserMessageCreateParams = {\n          message: message,\n        };\n        return params;\n      }\n      const createCustomParams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function';\n      if (createCustomParams) {\n        logger.info('OpenChannel | useSendMessageCallback: Creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n      const params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n      logger.info('OpenChannel | useSendMessageCallback: Sending message has started', params);\n\n      const isBottom = checkScrollBottom();\n      currentOpenChannel.sendUserMessage(params)\n        .onPending((pendingMessage) => {\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_START,\n            payload: {\n              message: pendingMessage,\n              channel: currentOpenChannel,\n            }\n          });\n        })\n        .onSucceeded((message) => {\n          logger.info('OpenChannel | useSendMessageCallback: Sending message succeeded', message);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n            payload: message,\n          });\n          if (isBottom) {\n            setTimeout(() => {\n              utils.scrollIntoLast();\n            });\n          }\n        })\n        .onFailed((error, message) => {\n          logger.warning('OpenChannel | useSendMessageCallback: Sending message failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_FAILED,\n            payload: message,\n          });\n          // https://sendbird.com/docs/chat/v3/javascript/guides/error-codes#2-server-error-codes\n          // TODO: Do we need to handle the error cases?\n          // @ts-ignore\n          if (error?.code === 900041) {\n            messagesDispatcher({\n              type: messageActionTypes.ON_USER_MUTED,\n              payload: {\n                channel: currentOpenChannel,\n                user: sdk.currentUser,\n              },\n            });\n          }\n        });\n    }\n  }, [currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef]);\n}\n\nexport default useSendMessageCallback;\n","import { useCallback } from 'react';\nimport type { OpenChannel, SendbirdOpenChat } from '@sendbird/chat/openChannel';\nimport type { FileMessageCreateParams } from '@sendbird/chat/message';\n\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n  onBeforeSendFileMessage: (file: File) => FileMessageCreateParams;\n  checkScrollBottom: () => boolean;\n  imageCompression?: {\n    compressionRate?: number,\n    resizingWidth?: number | string,\n    resizingHeight?: number | string,\n  };\n}\ninterface StaticParams {\n  sdk: SendbirdOpenChat;\n  logger: Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\ntype CallbackReturn = (file: File) => void;\n\nfunction useFileUploadCallback(\n  {\n    currentOpenChannel,\n    checkScrollBottom,\n    imageCompression = {},\n    onBeforeSendFileMessage,\n  }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((file) => {\n    if (sdk) {\n      const {\n        compressionRate,\n        resizingWidth,\n        resizingHeight,\n      } = imageCompression;\n      const createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n\n      const compressibleFileType = (file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg');\n      const compressibleRatio = (compressionRate > 0) && (compressionRate < 1);\n      // pxToNumber returns null if values are invalid\n      const compressibleDiamensions = utils.pxToNumber(resizingWidth)\n        || utils.pxToNumber(resizingHeight);\n\n      const canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n\n      const createParamsDefault = (file_): FileMessageCreateParams => {\n        const params: FileMessageCreateParams = {};\n        params.file = file_;\n        return params;\n      };\n\n      if (canCompressImage) { // Using image compression\n        try {\n          const image: HTMLImageElement = document.createElement('img');\n          image.src = URL.createObjectURL(file);\n          image.onload = () => {\n            URL.revokeObjectURL(image.src);\n            const canvas = document.createElement('canvas');\n            const imageWidth = image.naturalWidth || image.width;\n            const imageHeight = image.naturalHeight || image.height;\n            let targetWidth = utils.pxToNumber(resizingWidth) || imageWidth;\n            let targetHeight = utils.pxToNumber(resizingHeight) || imageHeight;\n\n            // In canvas.toBlob(callback, mimeType, qualityArgument)\n            // qualityArgument doesnt work\n            // so in case compressibleDiamensions are not present, we use ratio\n            if (file.type === 'image/png' && !compressibleDiamensions) {\n              targetWidth *= compressionRate;\n              targetHeight *= compressionRate;\n            }\n\n            canvas.width = targetWidth;\n            canvas.height = targetHeight;\n            const context = canvas.getContext('2d');\n            context.drawImage(image, 0, 0, targetWidth, targetHeight);\n            context.canvas.toBlob(\n              (newImageBlob) => {\n                const compressedFile = new File([newImageBlob], file.name, { type: file.type });\n                if (createCustomParams) {\n                  logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n                }\n                const params = onBeforeSendFileMessage ? onBeforeSendFileMessage(compressedFile) : createParamsDefault(compressedFile);\n                logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n\n                const isBottom = checkScrollBottom();\n                currentOpenChannel.sendFileMessage(params)\n                  .onPending((pendingMessage) => {\n                    messagesDispatcher({\n                      type: messageActionTypes.SENDING_MESSAGE_START,\n                      payload: {\n                        message: {\n                          ...pendingMessage,\n                          url: URL.createObjectURL(file),\n                          // pending thumbnail message seems to be failed\n                          requestState: 'pending',\n                        },\n                        channel: currentOpenChannel,\n                      }\n                    });\n                  })\n                  .onSucceeded((message) => {\n                    logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n                    messagesDispatcher({\n                      type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n                      payload: message,\n                    });\n                    if (isBottom) {\n                      setTimeout(() => {\n                        utils.scrollIntoLast();\n                      });\n                    }\n                  })\n                  .onFailed((error, message) => {\n                    logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', { message, error });\n                    // @ts-ignore\n                    message.localUrl = URL.createObjectURL(file);\n                    // @ts-ignore\n                    message.file = file;\n                    messagesDispatcher({\n                      type: messageActionTypes.SENDING_MESSAGE_FAILED,\n                      payload: message,\n                    });\n                  });\n              },\n              file.type,\n              compressionRate,\n            );\n          }\n        } catch (error) {\n          logger.warning('OpenChannel | useFileUploadCallback: Sending file message with image compression failed', error);\n        }\n      } else { // Not using image compression\n        if (createCustomParams) {\n          logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n        }\n        const params = onBeforeSendFileMessage ? onBeforeSendFileMessage(file) : createParamsDefault(file);\n        logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n\n        const isBottom = checkScrollBottom();\n        currentOpenChannel.sendFileMessage(params)\n          .onPending((pendingMessage) => {\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_START,\n              payload: {\n                message: {\n                  ...pendingMessage,\n                  url: URL.createObjectURL(file),\n                  // pending thumbnail message seems to be failed\n                  requestState: 'pending',\n                },\n                channel: currentOpenChannel,\n              }\n            });\n          })\n          .onSucceeded((message) => {\n            logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n              payload: message,\n            });\n            if (isBottom) {\n              setTimeout(() => {\n                utils.scrollIntoLast();\n              });\n            }\n          })\n          .onFailed((error, message) => {\n            logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', { message, error });\n            // @ts-ignore\n            message.localUrl = URL.createObjectURL(file);\n            // @ts-ignore\n            message.file = file;\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_FAILED,\n              payload: message,\n            });\n          });\n      }\n    }\n  }, [currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression]);\n}\n\nexport default useFileUploadCallback;\n","import type { UserMessageUpdateParams } from '@sendbird/chat/message';\n\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport type { OpenChannel } from '@sendbird/chat/openChannel';\nimport { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n  onBeforeSendUserMessage?: (text) => UserMessageUpdateParams;\n}\ninterface StaticParams {\n  logger: Logger;\n  messagesDispatcher: ({ type: string, payload :any }) => void;\n}\ntype CallbackReturn = (messageId, text, callback) => void;\n\nfunction useUpdateMessageCallback(\n  { currentOpenChannel, onBeforeSendUserMessage }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((messageId, text, callback) => {\n    const createParamsDefault = (txt) => {\n      const params = {\n        message: txt,\n      };\n      return params;\n    };\n\n    if (onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function') {\n      logger.info('OpenChannel | useUpdateMessageCallback: Creating params using onBeforeUpdateUserMessage');\n    }\n    const params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n    currentOpenChannel.updateUserMessage(messageId, params)\n      .then((message) => {\n        if (callback) {\n          callback();\n        }\n        logger.info('OpenChannel | useUpdateMessageCallback: Updating message succeeded', { message, params });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentOpenChannel,\n            message,\n          },\n        });\n      });\n  }, [currentOpenChannel, onBeforeSendUserMessage]);\n}\n\nexport default useUpdateMessageCallback;\n","import type { FileMessage, UserMessage } from '@sendbird/chat/message';\nimport type { OpenChannel } from '@sendbird/chat/openChannel';\nimport { useCallback } from 'react';\nimport { Logger } from '../../../../module';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n}\n\ntype MessagesDispatcherType = {\n  type: string, payload: any,\n};\n\ninterface StaticParams {\n  logger: Logger;\n  messagesDispatcher: (dispatcher: MessagesDispatcherType) => void;\n}\n\ntype CallbackReturn = (\n  message: UserMessage | FileMessage,\n  callback?: () => void,\n) => void;\n\nfunction useDeleteMessageCallback(\n  { currentOpenChannel }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((message, callback) => {\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message', message);\n    const { sendingStatus } = message;\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message requestState', sendingStatus);\n\n    if (sendingStatus === 'failed' || sendingStatus === 'pending') {\n      logger.info('OpenChannel | useDeleteMessageCallback: Deleted message from local', message);\n      messagesDispatcher({\n        type: messageActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n        payload: message.reqId,\n      });\n      if (callback) {\n        callback();\n      }\n    } else {\n      if (!(message.messageType ==='file' || message.messageType === 'user')) {\n        return;\n      }\n      const messageToDelete = message as UserMessage;\n      currentOpenChannel.deleteMessage(messageToDelete).then(() => {\n        logger.info('OpenChannel | useDeleteMessageCallback: Deleting message on server', sendingStatus);\n        if (callback) {\n          callback();\n        }\n        logger.info('OpenChannel | useDeleteMessageCallback: Deleting message succeeded', message);\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED,\n          payload: {\n            channel: currentOpenChannel,\n            messageId: message.messageId,\n          },\n        });\n      }).catch((error) => {\n        logger.warning('OpenChannel | useDeleteMessageCallback: Deleting message failed', error);\n      });\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useDeleteMessageCallback;\n","import type { FileMessage, UserMessage } from '@sendbird/chat/message';\nimport type { OpenChannel } from '@sendbird/chat/openChannel';\nimport { useCallback } from 'react';\nimport { Logger } from '../../../../module';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: OpenChannel;\n}\n\ntype MessagesDispatcherType = { type: string, payload: any };\n\ninterface StaticParams {\n  logger: Logger;\n  messagesDispatcher: (dispatcher: MessagesDispatcherType) => void;\n}\ntype CallbackReturn = (failedMessage: UserMessage | FileMessage) => void;\n\nfunction useResendMessageCallback(\n  { currentOpenChannel }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((failedMessage) => {\n    logger.info('OpenChannel | useResendMessageCallback: Resending message has started', failedMessage);\n    // eslint-disable-next-line no-param-reassign\n    const { messageType, file } = failedMessage as FileMessage;\n    if (failedMessage && typeof failedMessage.isResendable === 'function' && failedMessage.isResendable) {\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      messagesDispatcher({\n        type: messageActionTypes.RESENDING_MESSAGE_START,\n        payload: {\n          channel: currentOpenChannel,\n          message: failedMessage,\n        },\n      });\n\n      // userMessage\n      if (messageType === 'user' && failedMessage.messageType === 'user') {\n        currentOpenChannel.resendUserMessage(failedMessage).then((message) => {\n          logger.info('OpenChannel | useResendMessageCallback: Reseding message succeeded', message);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n            payload: message,\n          });\n        }).catch((error) => {\n          logger.warning('OpenChannel | useResendMessageCallback: Resending message failed', error);\n          // eslint-disable-next-line no-param-reassign\n          failedMessage.requestState = 'failed';\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_FAILED,\n            payload: failedMessage,\n          });\n        });\n      }\n\n      // fileMessage\n      if (messageType === 'file' && failedMessage.messageType === 'file') {\n        currentOpenChannel.resendFileMessage(failedMessage, file).then((message) => {\n          logger.info('OpenChannel | useResendMessageCallback: Resending file message succeeded', message);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n            payload: message,\n          });\n        }).catch((error) => {\n          logger.warning('OpenChannel | useResendMessageCallback: Resending file message failed', error);\n          // eslint-disable-next-line no-param-reassign\n          failedMessage.requestState = 'failed';\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_FAILED,\n            payload: failedMessage,\n          });\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('OpenChannel | useResendMessageCallback: Message is not resendable');\n      logger.warning('OpenChannel | useResendMessageCallback: Message is not resendable', failedMessage);\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useResendMessageCallback;\n","import { useEffect, useState } from 'react';\nimport { Logger } from '../../../../module';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  messagesLength: number;\n  messageLimit: number;\n}\n\n\ntype MessagesDispatcherType = {\n  type: string,\n  payload: { messageLimit: number }\n};\n\ninterface StaticParams {\n  messagesDispatcher: (dispatcher: MessagesDispatcherType) => void;\n  logger: Logger;\n}\n\nconst THROTTLE_TIMER = 5000;\n\n// to trim message list so that we wont keep thousands of messages in memory\n// We are throttling here; not debouncing\n// it will be called once very 5 sec if messagesLength, messageLimit changes\n// we check if messagesLength > messageLimit before dispatching action\nfunction useTrimMessageList(\n  { messagesLength, messageLimit }: DynamicParams,\n  { messagesDispatcher, logger }: StaticParams,\n): void {\n  const [inProgress, setInProgress] = useState(false);\n  useEffect(() => {\n    if (inProgress) {\n      return;\n    }\n    if (typeof messagesLength === 'number' && messagesLength > messageLimit) {\n      logger.info('Trimming MessageList');\n      messagesDispatcher({\n        type: messageActionTypes.TRIM_MESSAGE_LIST,\n        payload: { messageLimit },\n      });\n    }\n    setInProgress(true);\n    setTimeout(() => { setInProgress(false); }, THROTTLE_TIMER);\n  }, [messagesLength, messageLimit]);\n}\n\nexport default useTrimMessageList;\n","import React, {\n  useRef,\n  useEffect,\n  useReducer,\n  useMemo,\n} from 'react';\nimport type { FileMessageCreateParams, UserMessageCreateParams } from '@sendbird/chat/message';\nimport type { SendbirdOpenChat } from '@sendbird/chat/openChannel';\n\nimport * as utils from './utils';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport { RenderUserProfileProps } from '../../../types';\nimport messagesReducer from './dux/reducers';\nimport messagesInitialState, {\n  State as MessageStoreState,\n} from './dux/initialState';\nimport * as messageActionTypes from './dux/actionTypes';\nimport { scrollIntoLast } from './utils';\nimport * as topics from '../../../lib/pubSub/topics';\n\n// hooks\nimport useSetChannel from './hooks/useSetChannel';\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useInitialMessagesFetch from './hooks/useInitialMessagesFetch';\nimport useScrollCallback from './hooks/useScrollCallback';\nimport useCheckScrollBottom from './hooks/useCheckScrollBottom';\nimport useSendMessageCallback from './hooks/useSendMessageCallback';\nimport useFileUploadCallback from './hooks/useFileUploadCallback';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useTrimMessageList from './hooks/useTrimMessageList';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\n\ntype OpenChannelQueries = {\n  // https://sendbird.github.io/core-sdk-javascript/module-model_params_messageListParams-MessageListParams.html\n  messageListParams?: {\n    replyType?: string,\n    messageType?: string,\n    prevResultSize?: number,\n    nextResultSize?: number,\n    reverse?: boolean,\n    isInclusive?: boolean,\n    includeMetaArray?: boolean,\n    // UIKit doesn't support emoji reaction in OpenChannel\n    // includeReactions?: boolean,\n    // UIKit doesn't support message threading in OpenChannel\n    // includeThreadInfo?: boolean,\n    includePollDetails?: boolean,\n    includeParentMessageInfo?: boolean,\n    showSubchannelMessagesOnly?: boolean,\n    customTypes?: Array<string>,\n    senderUserIds?: Array<string>,\n  },\n};\n\nexport interface OpenChannelProviderProps {\n  channelUrl: string;\n  children?: React.ReactNode;\n  isMessageGroupingEnabled?: boolean;\n  queries?: OpenChannelQueries;\n  messageLimit?: number;\n  onBeforeSendUserMessage?(text: string): UserMessageCreateParams;\n  onBeforeSendFileMessage?(file_: File): FileMessageCreateParams;\n  onChatHeaderActionClick?(): void;\n  disableUserProfile?: boolean;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactNode;\n}\n\n\ninterface OpenChannelInterface extends OpenChannelProviderProps, MessageStoreState {\n  // derived/utils\n  messageInputRef: React.RefObject<HTMLInputElement>;\n  conversationScrollRef: React.RefObject<HTMLDivElement>;\n  disabled: boolean;\n  amIBanned: boolean;\n  amIMuted: boolean;\n  amIOperator: boolean;\n  fetchMore: boolean;\n  checkScrollBottom: () => boolean;\n  onScroll: (callback: () => void) => void;\n  handleSendMessage: any;\n  handleFileUpload: any;\n  updateMessage: any;\n  deleteMessage: any;\n  resendMessage: any;\n}\n\nconst OpenChannelContext = React.createContext<OpenChannelInterface | null>(undefined);\n\nconst OpenChannelProvider: React.FC<OpenChannelProviderProps> = (props: OpenChannelProviderProps) => {\n  const {\n    channelUrl,\n    children,\n    isMessageGroupingEnabled,\n    queries,\n    onBeforeSendUserMessage,\n    messageLimit,\n    onBeforeSendFileMessage,\n    onChatHeaderActionClick,\n  } = props;\n\n  // We didn't decide to support fetching participant list\n  const fetchingParticipants = false;\n  const globalStore = useSendbirdStateContext();\n\n  const sdk = globalStore?.stores?.sdkStore?.sdk as SendbirdOpenChat;\n  const sdkInit = globalStore?.stores?.sdkStore?.initialized;\n  const user = globalStore?.stores?.userStore?.user;\n  const config = globalStore?.config;\n  const {\n    userId,\n    isOnline,\n    logger,\n    pubSub,\n    imageCompression,\n  } = config;\n\n  // hook variables\n  const [messagesStore, messagesDispatcher] = useReducer(messagesReducer, messagesInitialState);\n  const {\n    allMessages,\n    loading,\n    initialized,\n    currentOpenChannel,\n    isInvalid,\n    hasMore,\n    lastMessageTimestamp,\n    operators,\n    bannedParticipantIds,\n    mutedParticipantIds,\n  } = messagesStore;\n  // ref\n  const messageInputRef = useRef(null); // useSendMessageCallback\n  const conversationScrollRef = useRef(null); // useScrollAfterSendMessageCallback\n\n  // const\n  const userFilledMessageListParams = queries?.messageListParams;\n  const disabled = !initialized\n    || !isOnline\n    || utils.isDisabledBecauseFrozen(currentOpenChannel, userId)\n    || utils.isDisabledBecauseMuted(mutedParticipantIds, userId);\n\n  // useMemo\n  const amIBanned = useMemo(() => {\n    return bannedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, bannedParticipantIds, user]);\n  const amIMuted = useMemo(() => {\n    return mutedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, mutedParticipantIds, user]);\n  const amIOperator = useMemo(() => {\n    return operators.map(operator => operator.userId).indexOf(user.userId) >= 0;\n  }, [channelUrl, operators, user]);\n\n  // use hooks\n  useSetChannel(\n    { channelUrl, sdkInit, fetchingParticipants, userId },\n    { sdk, logger, messagesDispatcher },\n  );\n\n  const checkScrollBottom = useCheckScrollBottom(\n    { conversationScrollRef },\n    { logger },\n  );\n  useHandleChannelEvents(\n    { currentOpenChannel, checkScrollBottom },\n    { sdk, logger, messagesDispatcher },\n  );\n  useInitialMessagesFetch(\n    { currentOpenChannel, userFilledMessageListParams },\n    { logger, messagesDispatcher },\n  );\n\n  const fetchMore: boolean = utils.shouldFetchMore(allMessages?.length, messageLimit);\n  // donot fetch more for streaming\n  const onScroll = useScrollCallback(\n    { currentOpenChannel, lastMessageTimestamp, fetchMore },\n    { sdk, logger, messagesDispatcher, hasMore, userFilledMessageListParams },\n  );\n  const handleSendMessage = useSendMessageCallback(\n    { currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom, messageInputRef },\n    { sdk, logger, messagesDispatcher },\n  );\n  const handleFileUpload = useFileUploadCallback(\n    { currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression },\n    { sdk, logger, messagesDispatcher },\n  );\n  const updateMessage = useUpdateMessageCallback(\n    { currentOpenChannel, onBeforeSendUserMessage },\n    { logger, messagesDispatcher },\n  );\n  const deleteMessage = useDeleteMessageCallback(\n    { currentOpenChannel },\n    { logger, messagesDispatcher },\n  );\n  const resendMessage = useResendMessageCallback(\n    { currentOpenChannel },\n    { logger, messagesDispatcher },\n  );\n\n  useTrimMessageList(\n    { messagesLength: allMessages?.length, messageLimit },\n    { messagesDispatcher, logger }\n  );\n\n  // handle API calls from withSendbird\n  useEffect(() => {\n    const subscriber = new Map();\n    if (!pubSub || !pubSub.subscribe) {\n      return;\n    }\n    subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (msg) => {\n      const { channel, message } = msg;\n      scrollIntoLast();\n      if (channel && (channelUrl === channel?.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n          payload: message,\n        });\n      }\n    }));\n    subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n      const { channel, message } = msg;\n      if (channel && (channelUrl === channel?.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_START,\n          payload: { message, channel },\n        });\n      }\n    }));\n    subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (msg) => {\n      const { channel, message } = msg;\n      scrollIntoLast();\n      if (channel && (channelUrl === channel?.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n          payload: { message, channel },\n        });\n      }\n    }));\n    subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n      const { channel, message, fromSelector } = msg;\n      if (fromSelector && channel && (channelUrl === channel?.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: { channel, message },\n        });\n      }\n    }));\n    subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (msg) => {\n      const { channel, messageId } = msg;\n      if (channel && (channelUrl === channel?.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED,\n          payload: messageId,\n        });\n      }\n    }));\n\n    return () => {\n      if (subscriber) {\n        subscriber.forEach((s) => {\n          try {\n            s.remove();\n          } catch {\n            //\n          }\n        });\n      }\n    };\n  }, [channelUrl, sdkInit]);\n  return (\n    <OpenChannelContext.Provider value={{\n      // props\n      channelUrl,\n      children,\n      isMessageGroupingEnabled,\n      queries,\n      onBeforeSendUserMessage,\n      messageLimit,\n      onBeforeSendFileMessage,\n      onChatHeaderActionClick,\n      // store\n      allMessages,\n      loading,\n      initialized,\n      currentOpenChannel,\n      isInvalid,\n      hasMore,\n      lastMessageTimestamp,\n      operators,\n      bannedParticipantIds,\n      mutedParticipantIds,\n      // derived/utils\n      messageInputRef,\n      conversationScrollRef,\n      disabled,\n      amIBanned,\n      amIMuted,\n      amIOperator,\n      checkScrollBottom,\n      fetchMore,\n      onScroll,\n      handleSendMessage,\n      handleFileUpload,\n      updateMessage,\n      deleteMessage,\n      resendMessage,\n    }}>\n      <UserProfileProvider\n        isOpenChannel\n        renderUserProfile={props?.renderUserProfile}\n        disableUserProfile={props?.disableUserProfile}\n      >\n        {children}\n      </UserProfileProvider>\n    </OpenChannelContext.Provider>\n  );\n}\n\nexport type UseOpenChannelType = () => OpenChannelInterface;\nconst useOpenChannelContext: UseOpenChannelType = () => React.useContext(OpenChannelContext);\n\nexport {\n  OpenChannelProvider,\n  useOpenChannelContext,\n};\n"],"names":["getMessageCreatedAt","message","format","createdAt","shouldFetchMore","messageLength","maxMessages","scrollIntoLast","intialTry","MAX_TRIES","currentTry","scrollDOM","document","querySelector","scrollTop","scrollHeight","error","setTimeout","isSameGroup","comparingMessage","messageType","sender","_a","userId","_b","message_","comparingMessage_","sendingStatus","_c","_d","compareMessagesForGrouping","prevMessage","currMessage","nextMessage","kFormatter","num","Math","abs","toFixed","concat","isOperator","openChannel","operators","map","operator","indexOf","isDisabledBecauseFrozen","isFrozen","isDisabledBecauseMuted","mutedParticipantIds","fetchWithListQuery","listQuery","logger","eachQueryNextCallback","fetchList","query","hasNext","next","then","users","catch","warning","info","pxToNumber","px","parsed","Number","parseFloat","isNaN","SET_CURRENT_CHANNEL","SET_CHANNEL_INVALID","RESET_MESSAGES","GET_PREV_MESSAGES_START","GET_PREV_MESSAGES_SUCESS","GET_PREV_MESSAGES_FAIL","SENDING_MESSAGE_FAILED","SENDING_MESSAGE_SUCCEEDED","SENDING_MESSAGE_START","RESENDING_MESSAGE_START","FETCH_PARTICIPANT_LIST","FETCH_BANNED_USER_LIST","FETCH_MUTED_USER_LIST","TRIM_MESSAGE_LIST","ON_MESSAGE_RECEIVED","ON_MESSAGE_UPDATED","ON_MESSAGE_DELETED","ON_MESSAGE_DELETED_BY_REQ_ID","ON_OPERATOR_UPDATED","ON_USER_ENTERED","ON_USER_EXITED","ON_USER_MUTED","ON_USER_UNMUTED","ON_USER_BANNED","ON_USER_UNBANNED","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_CHANNEL_CHANGED","ON_CHANNEL_DELETED","ON_META_DATA_CREATED","ON_META_DATA_UPDATED","ON_META_DATA_DELETED","ON_META_COUNTERS_CREATED","ON_META_COUNTERS_UPDATED","ON_META_COUNTERS_DELETED","ON_MENTION_RECEIVED","reducer","state","action","type","actionTypes","__assign","allMessages","gottenChannel","payload","isInvalid","currentOpenChannel","url","participants","bannedParticipantIds","loading","isFailed","messages","hasMore","lastMessageTimestamp","actionChannelUrl","receivedMessages_1","_hasMore","_lastMessageTimestamp","stateChannel","stateChannelUrl","filteredAllMessages","filter","find","messageId","compareIds","initialized","__spreadArray","_e","message_1","channel","some","m","reqId","sentMessage_1","newMessages","sentMessage_2","messageLimit","length","sliceAt","slice","eventedChannel","resentMessage_1","fetchedParticipantList","fetchedBannedUserList","every","user","fetchedMutedUserList","receivedMessage","updatedMessage_1","currentChannel","isIdentical","deletedMessageId_1","updatedOperators","enteredUser","exitedUser_1","participant","mutedUser","unmutedUser_1","bannedUser","currentUser","unbannedUser_1","frozenChannel","frozen","unfrozenChannel","changedChannel","deletedChannelUrl","initialState","useSetChannel","channelUrl","sdkInit","fetchingParticipants","sdk","messagesDispatcher","useEffect","getChannel","messageActionTypes","enter","bannedParticipantListQuery","createBannedUserListQuery","mutedParticipantListQuery","createMutedUserListQuery","utils","participantListQuery","createParticipantListQuery","useHandleChannelEvents","checkScrollBottom","messageReceiverId","uuidv4","addOpenChannelHandler","channelHandlerParams","onMessageReceived","scrollToEnd","onMessageUpdated","onMessageDeleted","onOperatorUpdated","onUserEntered","onUserExited","onUserMuted","onUserUnmuted","onUserBanned","onUserUnbanned","onChannelFrozen","onChannelUnfrozen","onChannelChanged","onMetaDataCreated","metaData","onMetaDataUpdated","onMetaDataDeleted","metaDataKeys","onMetaCounterCreated","metaCounter","onMetaCounterUpdated","onMetaCounterDeleted","metaCounterKeys","onMentionReceived","onChannelDeleted","channelType","ChannelType","OPEN","ChannelHandler","OpenChannelHandler","removeOpenChannelHandler","useInitialMessagesFetch","userFilledMessageListParams","getMessagesByTimestamp","messageListParams_1","nextResultSize","prevResultSize","isInclusive","includeReactions","Object","keys","forEach","key","messageListParams","Date","getTime","useScrollCallback","fetchMore","useCallback","callback","useCheckScrollBottom","conversationScrollRef","isBottom","current","conversationScroll","clientHeight","useSendMessageCallback","onBeforeSendUserMessage","messageInputRef","text","innerText","createParamsDefault","txt","trim","toString","params","createCustomParams","isBottom_1","sendUserMessage","onPending","pendingMessage","onSucceeded","onFailed","code","useFileUploadCallback","imageCompression","onBeforeSendFileMessage","file","compressionRate_1","compressionRate","resizingWidth_1","resizingWidth","resizingHeight_1","createCustomParams_1","compressibleFileType","compressibleRatio","compressibleDiamensions_1","canCompressImage","createParamsDefault_1","file_","image_1","createElement","src","URL","createObjectURL","onload","revokeObjectURL","canvas","imageWidth","naturalWidth","width","imageHeight","naturalHeight","height","targetWidth","targetHeight","context","getContext","drawImage","toBlob","newImageBlob","compressedFile","File","name","sendFileMessage","requestState","localUrl","useUpdateMessageCallback","updateUserMessage","useDeleteMessageCallback","messageToDelete","deleteMessage","useResendMessageCallback","failedMessage","isResendable","resendUserMessage","resendFileMessage","console","THROTTLE_TIMER","useTrimMessageList","messagesLength","useState","inProgress","setInProgress","OpenChannelContext","React","createContext","undefined","OpenChannelProvider","props","children","isMessageGroupingEnabled","queries","onChatHeaderActionClick","globalStore","useSendbirdStateContext","stores","sdkStore","_f","userStore","config","isOnline","pubSub","_g","useReducer","messagesReducer","messagesInitialState","messagesStore","useRef","disabled","amIBanned","useMemo","amIMuted","amIOperator","onScroll","handleSendMessage","handleFileUpload","updateMessage","resendMessage","subscriber","Map","subscribe","set","topics","msg","fromSelector","s","remove","renderUserProfile","disableUserProfile","useOpenChannelContext","useContext"],"mappings":"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"}