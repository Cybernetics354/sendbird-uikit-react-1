{"version":3,"file":"context.js","sources":["../../src/smart-components/MessageSearch/context/dux/actionTypes.ts","../../src/smart-components/MessageSearch/context/dux/reducers.ts","../../src/smart-components/MessageSearch/context/dux/initialState.ts","../../src/smart-components/MessageSearch/context/hooks/useSetChannel.ts","../../src/smart-components/MessageSearch/context/hooks/useGetSearchedMessages.ts","../../src/smart-components/MessageSearch/context/hooks/useScrollCallback.ts","../../src/smart-components/MessageSearch/context/hooks/useSearchStringEffect.ts","../../src/smart-components/MessageSearch/context/MessageSearchProvider.tsx"],"sourcesContent":["export const GET_SEARCHED_MESSAGES = 'GET_SEARCHED_MESSAGES';\nexport const GET_NEXT_SEARCHED_MESSAGES = 'GET_NEXT_SEARCHED_MESSAGES';\nexport const START_MESSAGE_SEARCH = 'START_MESSAGE_SEARCH';\nexport const START_GETTING_SEARCHED_MESSAGES = 'START_GETTING_SEARCHED_MESSAGES';\nexport const SET_QUERY_INVALID = 'SET_QUERY_INVALID';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const CHANNEL_INVALID = 'CHANNEL_INVALID';\nexport const RESET_SEARCH_STRING = 'RESET_SEARCH_STRING';\n","import { State as initialStateInterface } from './initialState';\nimport type { MessageSearchQuery } from '@sendbird/chat/message';\nimport * as actionTypes from './actionTypes';\n\ninterface MessageSearchQueryType extends MessageSearchQuery {\n  key?: string;\n}\ninterface ActionInterface {\n  type: string;\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  payload?: any;\n}\n\nexport default function reducer(\n  state: initialStateInterface,\n  action: ActionInterface,\n): initialStateInterface {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      const currentChannel = action.payload;\n      return {\n        ...state,\n        currentChannel,\n        initialized: true,\n      };\n    }\n    case actionTypes.CHANNEL_INVALID: {\n      return {\n        ...state,\n        currentChannel: null,\n        initialized: false,\n      };\n    }\n    case actionTypes.GET_SEARCHED_MESSAGES: {\n      const { messages, createdQuery } = action.payload;\n      if (\n        createdQuery\n        && createdQuery.channelUrl === (state?.currentMessageSearchQuery as MessageSearchQueryType).channelUrl\n        && createdQuery.key === (state?.currentMessageSearchQuery as MessageSearchQueryType).key\n      ) {\n        return {\n          ...state,\n          loading: false,\n          isInvalid: false,\n          allMessages: [...messages],\n          hasMoreResult: (state?.currentMessageSearchQuery as MessageSearchQueryType).hasNext,\n        };\n      }\n      return { ...state };\n    }\n    case actionTypes.SET_QUERY_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      }\n    }\n    case actionTypes.START_MESSAGE_SEARCH: {\n      return {\n        ...state,\n        isInvalid: false,\n        loading: false,\n      }\n    }\n    case actionTypes.START_GETTING_SEARCHED_MESSAGES: {\n      const currentMessageSearchQuery = action.payload;\n      return {\n        ...state,\n        loading: true,\n        currentMessageSearchQuery,\n      };\n    }\n    case actionTypes.GET_NEXT_SEARCHED_MESSAGES: {\n      const messages = action.payload;\n      return {\n        ...state,\n        allMessages: [...state.allMessages, ...messages],\n        hasMoreResult: (state?.currentMessageSearchQuery as MessageSearchQuery).hasNext,\n      };\n    }\n    case actionTypes.RESET_SEARCH_STRING: {\n      return {\n        ...state,\n        allMessages: [],\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import type { GroupChannel } from '@sendbird/chat/groupChannel';\nimport { MessageSearchQuery } from '@sendbird/chat/message';\nimport {\n  ClientFileMessage,\n  ClientUserMessage,\n} from '../../../../types';\n\nexport interface State {\n  allMessages: Array<ClientFileMessage | ClientUserMessage>;\n  loading: boolean;\n  isInvalid: boolean;\n  initialized: boolean;\n  currentChannel: GroupChannel;\n  currentMessageSearchQuery: MessageSearchQuery;\n  hasMoreResult: boolean;\n}\n\nconst initialState: State = {\n  allMessages: [],\n  loading: false,\n  isInvalid: false,\n  initialized: false,\n  currentChannel: null,\n  currentMessageSearchQuery: null,\n  hasMoreResult: false,\n};\n\nexport default initialState;\n","import type { SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport { useEffect } from 'react';\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface MainProps {\n  channelUrl: string;\n  sdkInit: boolean;\n}\ninterface ToolProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSetChannel(\n  { channelUrl, sdkInit }: MainProps,\n  { sdk, logger, messageSearchDispatcher }: ToolProps,\n): void {\n  useEffect(() => {\n    if (channelUrl && sdkInit && (sdk?.groupChannel)) {\n      sdk.groupChannel.getChannel(channelUrl).then((groupChannel) => {\n        logger.info('MessageSearch | useSetChannel group channel', groupChannel);\n        messageSearchDispatcher({\n          type: messageActionTypes.SET_CURRENT_CHANNEL,\n          payload: groupChannel,\n        });\n      }).catch(() => {\n        messageSearchDispatcher({\n          type: messageActionTypes.CHANNEL_INVALID,\n          payload: null,\n        });\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\n\nimport type { GroupChannel, SendbirdGroupChat } from '@sendbird/chat/groupChannel';\nimport type { MessageSearchQueryParams } from '@sendbird/chat/lib/__definition';\nimport type {\n  AdminMessage,\n  BaseMessage,\n  FileMessage,\n  MessageSearchQuery,\n  UserMessage,\n} from '@sendbird/chat/message';\nimport type { SendbirdError } from '@sendbird/chat';\n\nimport type { Logger } from '../../../../lib/SendbirdState';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface MainProps {\n  currentChannel: GroupChannel;\n  channelUrl: string;\n  requestString?: string;\n  messageSearchQuery?: MessageSearchQuery;\n  onResultLoaded?: (\n    messages?: Array<BaseMessage | UserMessage | FileMessage | AdminMessage>,\n    error?: SendbirdError,\n  ) => void;\n  retryCount: number;\n}\ninterface ToolProps {\n  sdk: SendbirdGroupChat;\n  logger: Logger;\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useGetSearchedMessages(\n  { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount }: MainProps,\n  { sdk, logger, messageSearchDispatcher }: ToolProps,\n): void {\n  useEffect(() => {\n    messageSearchDispatcher({\n      type: messageActionTypes.START_MESSAGE_SEARCH,\n      payload: null,\n    });\n    if (sdk && channelUrl && sdk.createMessageSearchQuery && currentChannel) {\n      if (requestString) {\n        const inputSearchMessageQueryObject: MessageSearchQueryParams = {\n          ...messageSearchQuery,\n          order: 'ts' as const,\n          channelUrl,\n          messageTimestampFrom: currentChannel.invitedAt,\n          keyword: requestString,\n        };\n        const createdQuery = sdk.createMessageSearchQuery(inputSearchMessageQueryObject);\n        createdQuery.next().then((messages) => {\n          logger.info('MessageSearch | useGetSearchedMessages: succeeded getting messages', messages);\n          messageSearchDispatcher({\n            type: messageActionTypes.GET_SEARCHED_MESSAGES,\n            payload: {\n              messages,\n              createdQuery,\n            },\n          });\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(messages, null);\n          }\n        }).catch((error) => {\n          logger.warning('MessageSearch | useGetSearchedMessages: getting failed', error);\n          messageSearchDispatcher({\n            type: messageActionTypes.SET_QUERY_INVALID,\n            payload: null,\n          });\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(null, error);\n          }\n        });\n        messageSearchDispatcher({\n          type: messageActionTypes.START_GETTING_SEARCHED_MESSAGES,\n          payload: createdQuery,\n        });\n      } else {\n        logger.info('MessageSearch | useGetSeasrchedMessages: search string is empty');\n      }\n    }\n  }, [channelUrl, messageSearchQuery, requestString, currentChannel, retryCount]);\n}\n\nexport default useGetSearchedMessages;\n","import type { SendbirdError } from '@sendbird/chat';\nimport type { AdminMessage, FileMessage, MessageSearchQuery, UserMessage } from '@sendbird/chat/message';\nimport { useCallback } from 'react';\nimport { Logger } from '../../../../module';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface MainProps {\n  currentMessageSearchQuery: MessageSearchQuery;\n  hasMoreResult: boolean;\n  onResultLoaded?: (\n    messages?: Array<UserMessage | FileMessage | AdminMessage>,\n    error?: SendbirdError,\n  ) => void;\n}\n\ntype MessageSearchDispatcherType = { type: string, payload: any };\n\ninterface ToolProps {\n  logger: Logger;\n  messageSearchDispatcher: (payload: MessageSearchDispatcherType) => void;\n}\n\nexport type CallbackReturn = (\n  callback: (\n    messages: Array<UserMessage | FileMessage | AdminMessage>,\n    /* eslint-disable @typescript-eslint/no-explicit-any*/\n    error: any,\n  ) => void\n) => void;\n\nfunction useScrollCallback(\n  { currentMessageSearchQuery, hasMoreResult, onResultLoaded }: MainProps,\n  { logger, messageSearchDispatcher }: ToolProps,\n): CallbackReturn {\n  return useCallback((cb) => {\n    if (!hasMoreResult) {\n      logger.warning('MessageSearch | useScrollCallback: no more searched results', hasMoreResult);\n    }\n    if (currentMessageSearchQuery && currentMessageSearchQuery.hasNext) {\n      currentMessageSearchQuery.next().then((messages) => {\n        logger.info('MessageSearch | useScrollCallback: succeeded getting searched messages', messages);\n        messageSearchDispatcher({\n          type: messageActionTypes.GET_NEXT_SEARCHED_MESSAGES,\n          payload: messages,\n        });\n        cb(messages, null);\n        if (onResultLoaded && typeof onResultLoaded === 'function') {\n          onResultLoaded(messages, null);\n        }\n      }).catch((error) => {\n        logger.warning('MessageSearch | useScrollCallback: failed getting searched messages', error);\n        cb(null, error);\n        if (onResultLoaded && typeof onResultLoaded === 'function') {\n          onResultLoaded(null, error);\n        }\n      });\n    } else {\n      logger.warning('MessageSearch | useScrollCallback: no currentMessageSearchQuery');\n    }\n  }, [currentMessageSearchQuery, hasMoreResult]);\n}\n\nexport default useScrollCallback;\n","import { useState, useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  searchString: string;\n}\n\ninterface StaticParams {\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n}\n\nconst DEBOUNCING_TIME = 500;\n\nfunction useSearchStringEffect(\n  { searchString }: DynamicParams,\n  { messageSearchDispatcher }: StaticParams,\n): string {\n  const [requestString, setRequestString] = useState('');\n  const [debouncingTimer, setDebouncingTimer] = useState(null);\n  useEffect(() => {\n    clearTimeout(debouncingTimer);\n    if (searchString) {\n      setDebouncingTimer(\n        setTimeout(() => {\n          setRequestString(searchString);\n        }, DEBOUNCING_TIME)\n      );\n    } else {\n      setRequestString('');\n      messageSearchDispatcher({\n        type: messageActionTypes.RESET_SEARCH_STRING,\n        payload: '',\n      });\n    }\n  }, [searchString]);\n  return requestString;\n}\n\nexport default useSearchStringEffect;\n","import React, {\n  useRef,\n  useState,\n  useReducer,\n} from 'react';\nimport type { MessageSearchQuery } from '@sendbird/chat/message';\nimport type { GroupChannel } from '@sendbird/chat/groupChannel';\nimport type { MessageSearchQueryParams } from '@sendbird/chat/lib/__definition';\n\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { ClientSentMessages } from '../../../types';\n\nimport messageSearchReducer from './dux/reducers';\nimport messageSearchInitialState from './dux/initialState';\nimport { State as MessageSearchReducerState } from './dux/initialState';\n\nimport useSetChannel from './hooks/useSetChannel';\nimport useGetSearchMessages from './hooks/useGetSearchedMessages';\nimport useScrollCallback, {\n  CallbackReturn as UseScrollCallbackType,\n} from './hooks/useScrollCallback';\nimport useSearchStringEffect from './hooks/useSearchStringEffect';\n\nexport interface MessageSearchProviderProps {\n  channelUrl: string;\n  children?: React.ReactNode;\n  searchString?: string;\n  requestString?: string;\n  messageSearchQuery?: MessageSearchQueryParams;\n  onResultLoaded?(messages?: Array<ClientSentMessages>, error?: SendBird.SendBirdError): void;\n  onResultClick?(message: ClientSentMessages): void;\n}\n\ninterface MessageSearchProviderInterface extends MessageSearchProviderProps {\n  retryCount: number;\n  setRetryCount: React.Dispatch<React.SetStateAction<number>>;\n  selectedMessageId: number;\n  setSelectedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n  scrollRef: React.MutableRefObject<HTMLDivElement>;\n  allMessages: MessageSearchReducerState['allMessages'];\n  loading: boolean;\n  isInvalid: boolean;\n  currentChannel: GroupChannel;\n  currentMessageSearchQuery: MessageSearchQuery;\n  hasMoreResult: boolean;\n  onScroll: UseScrollCallbackType;\n  handleRetryToConnect: () => void;\n  handleOnScroll: (e: React.BaseSyntheticEvent) => void;\n}\n\nconst MessageSearchContext = React.createContext<MessageSearchProviderInterface|null>(undefined);\n\nconst MessageSearchProvider: React.FC<MessageSearchProviderProps> = (props: MessageSearchProviderProps) => {\n  const {\n    // message search props\n    channelUrl,\n    searchString,\n    messageSearchQuery,\n    onResultLoaded,\n    onResultClick,\n  } = props;\n\n  const globalState = useSendbirdStateContext();\n\n  // hook variables\n  const [retryCount, setRetryCount] = useState(0); // this is a trigger flag for activating useGetSearchMessages\n  const [selectedMessageId, setSelectedMessageId] = useState(0);\n  const [messageSearchStore, messageSearchDispatcher] = useReducer(messageSearchReducer, messageSearchInitialState);\n  const {\n    allMessages,\n    loading,\n    isInvalid,\n    currentChannel,\n    currentMessageSearchQuery,\n    hasMoreResult,\n  } = messageSearchStore;\n\n  const logger = globalState?.config?.logger;\n  const sdk = globalState?.stores?.sdkStore?.sdk;\n  const sdkInit = globalState?.stores?.sdkStore?.initialized;\n  const scrollRef = useRef(null);\n  const handleOnScroll = (e: React.BaseSyntheticEvent) => {\n    const scrollElement = e.target as HTMLDivElement;\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight,\n    } = scrollElement;\n\n    if (!hasMoreResult) {\n      return;\n    }\n    if (scrollTop + clientHeight >= scrollHeight) {\n      onScroll(() => {\n        // after load more searched messages\n      });\n    }\n  };\n\n  useSetChannel(\n    { channelUrl, sdkInit },\n    { sdk, logger, messageSearchDispatcher },\n  );\n\n  const requestString = useSearchStringEffect({ searchString }, { messageSearchDispatcher });\n\n  useGetSearchMessages(\n    { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount },\n    { sdk, logger, messageSearchDispatcher },\n  );\n\n  const onScroll = useScrollCallback(\n    { currentMessageSearchQuery, hasMoreResult, onResultLoaded },\n    { logger, messageSearchDispatcher },\n  );\n\n  const handleRetryToConnect = () => {\n    setRetryCount(retryCount + 1);\n  };\n  return (\n    <MessageSearchContext.Provider value={{\n      channelUrl,\n      searchString,\n      requestString,\n      messageSearchQuery,\n      onResultLoaded,\n      onResultClick,\n      retryCount,\n      setRetryCount,\n      selectedMessageId,\n      setSelectedMessageId,\n      messageSearchDispatcher,\n      allMessages,\n      loading,\n      isInvalid,\n      currentChannel,\n      currentMessageSearchQuery,\n      hasMoreResult,\n      onScroll,\n      scrollRef,\n      handleRetryToConnect,\n      handleOnScroll,\n    }}>\n      {props?.children}\n    </MessageSearchContext.Provider>\n  );\n}\n\nexport type UseMessageSearchType = () => MessageSearchProviderInterface;\nconst useMessageSearchContext: UseMessageSearchType = () => React.useContext(MessageSearchContext);\n\nexport {\n  MessageSearchProvider,\n  useMessageSearchContext,\n};\n"],"names":["GET_SEARCHED_MESSAGES","GET_NEXT_SEARCHED_MESSAGES","START_MESSAGE_SEARCH","START_GETTING_SEARCHED_MESSAGES","SET_QUERY_INVALID","SET_CURRENT_CHANNEL","CHANNEL_INVALID","RESET_SEARCH_STRING","reducer","state","action","type","actionTypes","currentChannel","payload","initialized","_a","messages","createdQuery","channelUrl","currentMessageSearchQuery","key","loading","isInvalid","allMessages","hasMoreResult","hasNext","initialState","useSetChannel","_b","sdkInit","sdk","logger","messageSearchDispatcher","useEffect","groupChannel","getChannel","then","info","messageActionTypes","catch","useGetSearchedMessages","requestString","messageSearchQuery","onResultLoaded","retryCount","createMessageSearchQuery","inputSearchMessageQueryObject","order","messageTimestampFrom","invitedAt","keyword","createdQuery_1","next","error","warning","useScrollCallback","useCallback","cb","DEBOUNCING_TIME","useSearchStringEffect","searchString","_c","useState","setRequestString","_d","debouncingTimer","setDebouncingTimer","clearTimeout","setTimeout","MessageSearchContext","React","createContext","undefined","MessageSearchProvider","props","onResultClick","globalState","useSendbirdStateContext","_f","setRetryCount","_g","selectedMessageId","setSelectedMessageId","_h","useReducer","messageSearchReducer","messageSearchInitialState","messageSearchStore","config","stores","sdkStore","scrollRef","useRef","handleOnScroll","e","scrollElement","target","scrollTop","scrollHeight","clientHeight","onScroll","useGetSearchMessages","handleRetryToConnect","children","useMessageSearchContext","useContext"],"mappings":"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"}