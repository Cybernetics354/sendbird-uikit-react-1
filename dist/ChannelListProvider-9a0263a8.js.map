{"version":3,"file":"ChannelListProvider-9a0263a8.js","sources":["../src/smart-components/ChannelList/dux/actionTypes.js","../src/smart-components/ChannelList/utils.js","../src/smart-components/ChannelList/dux/initialState.js","../src/smart-components/ChannelList/dux/reducers.js","../src/smart-components/ChannelList/context/ChannelListProvider.tsx"],"sourcesContent":["export const RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nexport const CREATE_CHANNEL = 'CREATE_CHANNEL';\nexport const UNLOAD_CHANNELS = 'UNLOAD_CHANNELS';\nexport const SET_CHANNEL_LOADING = 'SET_CHANNEL_LOADING';\nexport const LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\n\nexport const SHOW_CHANNEL_SETTINGS = 'SHOW_CHANNEL_SETTINGS';\nexport const HIDE_CHANNEL_SETTINGS = 'HIDE_CHANNEL_SETTINGS';\n\nexport const FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nexport const FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nexport const FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\n\nexport const INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nexport const INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nexport const INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\n\nexport const INVITE_MEMBERS_SUCESS = 'INVITE_MEMBERS_SUCESS';\n\nexport const ON_USER_JOINED = 'ON_USER_JOINED';\nexport const ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nexport const ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nexport const ON_USER_LEFT = 'ON_USER_LEFT';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\n\nexport const ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nexport const ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\n\nexport const CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nexport const CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\n","import { GroupChannelHandler } from '@sendbird/chat/groupChannel';\nimport * as channelActions from './dux/actionTypes';\nimport * as topics from '../../lib/pubSub/topics';\n\nconst DELIVERY_RECIPT = 'delivery_receipt';\n\nconst createEventHandler = ({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  logger,\n}) => {\n  const ChannelHandler = new GroupChannelHandler({\n    onChannelChanged: (channel) => {\n      logger.info('ChannelList: onChannelChanged', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_CHANGED,\n        payload: channel,\n      });\n    },\n    onChannelDeleted: (channelUrl) => {\n      logger.info('ChannelList: onChannelDeleted', channelUrl);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_DELETED,\n        payload: channelUrl,\n      });\n    },\n    onUserJoined: (channel) => {\n      logger.info('ChannelList: onUserJoined', channel);\n      if (channel?.lastMessage) {\n        channelListDispatcher({\n          type: channelActions.ON_USER_JOINED,\n          payload: channel,\n        });\n      }\n    },\n    onUserBanned: (channel, user) => {\n      const { currentUser } = sdk;\n      logger.info('Channel | useHandleChannelEvents: onUserBanned', channel);\n      if (user.userId === currentUser.userId) {\n        channelListDispatcher({\n          type: channelActions.ON_USER_LEFT,\n          payload: {\n            channel,\n            isMe: true,\n          },\n        });\n      } else {\n        channelListDispatcher({\n          type: channelActions.ON_USER_LEFT,\n          payload: {\n            channel,\n            isMe: false,\n          },\n        });\n      }\n    },\n    onUserLeft: (channel, leftUser) => {\n      const { currentUser } = sdk;\n      const isMe = (currentUser.userId === leftUser.userId);\n      logger.info('ChannelList: onUserLeft', channel);\n      channelListDispatcher({\n        type: channelActions.ON_USER_LEFT,\n        payload: {\n          channel,\n          isMe,\n        },\n      });\n    },\n\n    onReadStatus: (channel) => {\n      logger.info('ChannelList: onReadStatus', channel);\n      channelListDispatcher({\n        type: channelActions.ON_READ_RECEIPT_UPDATED,\n        payload: channel,\n      });\n    },\n\n    onDeliveryReceiptUpdated: (channel) => {\n      logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n      if (channel?.lastMessage) {\n        channelListDispatcher({\n          type: channelActions.ON_DELIVERY_RECEIPT_UPDATED,\n          payload: channel,\n        });\n      }\n    },\n\n    onMessageUpdated: (channel, message) => {\n      if (channel?.lastMessage.isEqual(message)) {\n        logger.info('ChannelList: onMessageUpdated', channel);\n        channelListDispatcher({\n          type: channelActions.ON_LAST_MESSAGE_UPDATED,\n          payload: channel,\n        });\n      }\n    },\n\n    onChannelHidden: (channel) => {\n      logger.info('ChannelList: onChannelHidden', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_ARCHIVED,\n        payload: channel,\n      });\n    },\n\n    onChannelFrozen: (channel) => {\n      logger.info('ChannelList: onChannelFrozen', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_FROZEN,\n        payload: channel,\n      });\n    },\n\n    onChannelUnfrozen: (channel) => {\n      logger.info('ChannelList: onChannelUnfrozen', channel);\n      channelListDispatcher({\n        type: channelActions.ON_CHANNEL_UNFROZEN,\n        payload: channel,\n      });\n    },\n  });\n\n  logger.info('ChannelList: Added channelHandler');\n  sdk.groupChannel.addGroupChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\n\nconst createChannelListQuery = ({ sdk, userFilledChannelListQuery = {} }) => {\n  const param = {};\n  param.includeEmpty = false;\n  param.limit = 20; // The value of pagination limit could be set up to 100.\n  param.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach((key) => {\n      param[key] = userFilledChannelListQuery[key];\n    });\n  }\n\n  const channelListQuery = sdk.groupChannel.createMyGroupChannelListQuery(param);\n\n  return channelListQuery;\n};\n\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\nfunction setupChannelList({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  setChannelSource,\n  onChannelSelect,\n  userFilledChannelListQuery,\n  logger,\n  sortChannelList,\n  disableAutoSelect,\n}) {\n  if (sdk?.groupChannel) {\n    createEventHandler({\n      sdk,\n      channelListDispatcher,\n      sdkChannelHandlerId,\n      logger,\n    });\n  } else {\n    logger.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n\n  logger.info('ChannelList - creating query', { userFilledChannelListQuery });\n  const channelListQuery = createChannelListQuery({ sdk, userFilledChannelListQuery });\n  logger.info('ChannelList - created query', channelListQuery);\n  setChannelSource(channelListQuery);\n\n  channelListDispatcher({\n    type: channelActions.INIT_CHANNELS_START,\n  });\n\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: channelActions.CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId,\n      },\n    });\n  }\n\n  logger.info('ChannelList - fetching channels');\n  if (channelListQuery.hasNext) {\n    channelListQuery.next().then((channelList) => {\n      logger.info('ChannelList - fetched channels', channelList);\n      // select first channel\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      let sortedChannelList = channelList;\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sortedChannelList = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sortedChannelList);\n      }\n      if (!disableAutoSelect) {\n        onChannelSelect(sortedChannelList[0]);\n      }\n      channelListDispatcher({\n        type: channelActions.INIT_CHANNELS_SUCCESS,\n        payload: { channelList: sortedChannelList, disableAutoSelect },\n      });\n      const canSetMarkAsDelivered = sdk?.appInfo?.premiumFeatureList\n        ?.find((feature) => (feature === DELIVERY_RECIPT));\n\n      if (canSetMarkAsDelivered) {\n        logger.info('ChannelList: Marking all channels as read');\n        // eslint-disable-next-line no-unused-expressions\n        channelList.forEach((c, idx) => {\n          // Plan-based rate limits - minimum limit is 5 requests per second\n          setTimeout(() => {\n            // eslint-disable-next-line no-unused-expressions\n            c.markAsDelivered();\n          }, 300 * idx);\n        });\n      }\n    }).catch((err) => {\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: channelActions.INIT_CHANNELS_FAILURE,\n        });\n      }\n    });\n  } else {\n    logger.warning('ChannelList - there are no more channels');\n  }\n}\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = (pubSub, channelListDispatcher) => {\n  const subscriber = new Map();\n  if (!pubSub) return subscriber;\n  subscriber.set(topics.CREATE_CHANNEL, pubSub.subscribe(topics.CREATE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel,\n    });\n  }));\n\n  subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    const updatedChannel = channel;\n    if (updatedChannel?.lastMessage?.messageId === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n    if (channel) {\n      channelListDispatcher({\n        type: channelActions.ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel,\n      });\n    }\n  }));\n\n  subscriber.set(topics.LEAVE_CHANNEL, pubSub.subscribe(topics.LEAVE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.LEAVE_CHANNEL_SUCCESS,\n      payload: channel?.url,\n    });\n  }));\n\n  subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.CHANNEL_REPLACED_TO_TOP,\n      payload: channel,\n    });\n  }));\n\n  return subscriber;\n};\n\nexport default setupChannelList;\n","export default {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  showSettings: false,\n  channelListQuery: null,\n  currentUserId: '',\n  disableAutoSelect: false,\n};\n","import { filterChannelListParams, getChannelsWithUpsertedChannel } from '../../../utils';\nimport * as actions from './actionTypes';\nimport initialState from './initialState';\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actions.INIT_CHANNELS_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case actions.RESET_CHANNEL_LIST:\n      return initialState;\n    case actions.INIT_CHANNELS_SUCCESS: {\n      const { channelList, disableAutoSelect } = action.payload;\n      return {\n        ...state,\n        initialized: true,\n        loading: false,\n        allChannels: channelList,\n        disableAutoSelect,\n        currentChannel: (\n          !disableAutoSelect\n          && channelList\n          && channelList.length\n          && channelList.length > 0\n        )\n          ? channelList[0]\n          : null,\n      };\n    }\n    case actions.FETCH_CHANNELS_SUCCESS: {\n      const currentChannels = state.allChannels.map((c) => c.url);\n      const filteredChannels = action.payload.filter(\n        ({ url }) => !(currentChannels.find((c) => c === url)),\n      );\n      return {\n        ...state,\n        allChannels: [\n          ...state.allChannels,\n          ...filteredChannels,\n        ],\n      };\n    }\n    case actions.CREATE_CHANNEL: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        return {\n          ...state,\n          currentChannel: channel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: [channel, ...state.allChannels.filter((ch) => ch.url !== channel?.url)],\n        currentChannel: channel,\n      };\n    }\n    case actions.ON_CHANNEL_ARCHIVED: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n          // TODO: Check if we have to set current channel\n        }\n      }\n      const nextChannel = (channel?.url === state.currentChannel?.url)\n        ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n        : state.currentChannel;\n      return {\n        ...state,\n        allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n      };\n    }\n    case actions.LEAVE_CHANNEL_SUCCESS:\n    case actions.ON_CHANNEL_DELETED: {\n      const channelUrl = action.payload;\n      return {\n        ...state,\n        currentChannel: (channelUrl === state.currentChannel?.url)\n          ? state.allChannels[0]\n          : state.currentChannel,\n        allChannels: state.allChannels.filter(({ url }) => url !== channelUrl),\n      };\n    }\n    case actions.ON_USER_LEFT: {\n      const { channel, isMe } = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          const filteredChannels = getChannelsWithUpsertedChannel(state.allChannels, channel);\n          const nextChannel = (isMe && (channel?.url === state.currentChannel?.url))\n            ? filteredChannels[0]\n            : state.currentChannel;\n          return {\n            ...state,\n            currentChannel: state.disableAutoSelect ? null : nextChannel,\n            allChannels: filteredChannels,\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[0]\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n        };\n      }\n      const filteredChannels = state.allChannels.filter((c) => !(c.url === channel?.url && isMe));\n      const nextChannel = (isMe && (channel?.url === state.currentChannel?.url))\n        ? filteredChannels[0]\n        : state.currentChannel;\n      return {\n        ...state,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n        allChannels: filteredChannels,\n      };\n    }\n    case actions.ON_USER_JOINED:\n    case actions.ON_CHANNEL_CHANGED:\n    case actions.ON_READ_RECEIPT_UPDATED:\n    case actions.ON_DELIVERY_RECEIPT_UPDATED: {\n      const { allChannels = [] } = state;\n      const channel = action.payload;\n      const { unreadMessageCount } = channel;\n      if (!channel?.lastMessage) return state;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(allChannels, channel),\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n        };\n      }\n      // if its only an unread message count change, dont push to top\n      if (unreadMessageCount === 0) {\n        const currentChannel = allChannels.find(({ url }) => url === channel?.url);\n        const currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n        if (currentUnreadCount === 0) {\n          return {\n            ...state,\n            allChannels: state.allChannels.map((ch) => (ch.url === channel?.url ? channel : ch)),\n          };\n        }\n      }\n      return {\n        ...state,\n        allChannels: [\n          channel,\n          ...state.allChannels.filter(({ url }) => url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.SET_CURRENT_CHANNEL:\n      return {\n        ...state,\n        currentChannel: action.payload,\n      };\n    case actions.SHOW_CHANNEL_SETTINGS:\n      return {\n        ...state,\n        showSettings: true,\n      };\n    case actions.HIDE_CHANNEL_SETTINGS:\n      return {\n        ...state,\n        showSettings: false,\n      };\n    case actions.ON_LAST_MESSAGE_UPDATED: {\n      return {\n        ...state,\n        allChannels: state.allChannels.map((channel) => (\n          channel?.url === action.payload.url ? action.payload : channel)),\n      };\n    }\n    case actions.ON_CHANNEL_FROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel?.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = true;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.ON_CHANNEL_UNFROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel?.url === state.currentChannel?.url)\n          ? state.allChannels[state.allChannels[0].url === channel?.url ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel?.url),\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel?.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = false;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.CHANNEL_REPLACED_TO_TOP: {\n      return {\n        ...state,\n        allChannels: [\n          action.payload,\n          ...state.allChannels.filter((channel) => channel?.url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.CHANNEL_LIST_PARAMS_UPDATED:\n      return {\n        ...state,\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery,\n      };\n    default:\n      return state;\n  }\n}\n","import React, {\n  useState,\n  useEffect,\n  useContext,\n  useReducer,\n  useMemo,\n} from 'react';\n\nimport type { User } from '@sendbird/chat';\nimport {\n  GroupChannel,\n  GroupChannelCreateParams,\n  GroupChannelHandler,\n  SendbirdGroupChat,\n  GroupChannelListQuery as GroupChannelListQuerySb\n} from '@sendbird/chat/groupChannel';\n\nimport { RenderUserProfileProps } from '../../../types';\n\nimport setupChannelList, {\n  pubSubHandler,\n  pubSubHandleRemover,\n} from '../utils';\nimport { uuidv4 } from '../../../utils/uuid';\nimport { noop } from '../../../utils/utils';\n\nimport * as channelListActions from '../dux/actionTypes';\n\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { CustomUseReducerDispatcher } from '../../../lib/SendbirdState';\nimport channelListReducers from '../dux/reducers';\nimport channelListInitialState from '../dux/initialState';\n\ninterface ApplicationUserListQuery {\n  limit?: number;\n  userIdsFilter?: Array<string>;\n  metaDataKeyFilter?: string;\n  metaDataValuesFilter?: Array<string>;\n}\n\ninterface GroupChannelListQuery {\n  limit?: number;\n  includeEmpty?: boolean;\n  order?: 'latest_last_message' | 'chronological' | 'channel_name_alphabetical' | 'metadata_value_alphabetical';\n  userIdsExactFilter?: Array<string>;\n  userIdsIncludeFilter?: Array<string>;\n  userIdsIncludeFilterQueryType?: 'AND' | 'OR';\n  nicknameContainsFilter?: string;\n  channelNameContainsFilter?: string;\n  customTypesFilter?: Array<string>;\n  customTypeStartsWithFilter?: string;\n  channelUrlsFilter?: Array<string>;\n  superChannelFilter?: 'all' | 'super' | 'nonsuper';\n  publicChannelFilter?: 'all' | 'public' | 'private';\n  metadataOrderKeyFilter?: string;\n  memberStateFilter?: 'all' | 'joined_only' | 'invited_only' | 'invited_by_friend' | 'invited_by_non_friend';\n  hiddenChannelFilter?: 'unhidden_only' | 'hidden_only' | 'hidden_allow_auto_unhide' | 'hidden_prevent_auto_unhide';\n  unreadChannelFilter?: 'all' | 'unread_message';\n  includeFrozen?: boolean;\n}\n\ninterface ChannelListQueries {\n  applicationUserListQuery?: ApplicationUserListQuery;\n  channelListQuery?: GroupChannelListQuery;\n}\n\nexport interface ChannelListProviderProps {\n  allowProfileEdit?: boolean;\n  onBeforeCreateChannel?(users: Array<string>): GroupChannelCreateParams;\n  onThemeChange?(theme: string): void;\n  onProfileEditSuccess?(user: User): void;\n  onChannelSelect?(channel: GroupChannel): void;\n  sortChannelList?: (channels: GroupChannel[]) => GroupChannel[];\n  queries?: ChannelListQueries;\n  children?: React.ReactNode;\n  className?: string | string[];\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactNode;\n  disableUserProfile?: boolean;\n  disableAutoSelect?: boolean;\n  typingChannels?: Array<GroupChannel>;\n  isTypingIndicatorEnabled?: boolean;\n  isMessageReceiptStatusEnabled?: boolean;\n}\n\nexport interface ChannelListProviderInterface extends ChannelListProviderProps {\n  initialized: boolean;\n  loading: boolean;\n  allChannels: GroupChannel[];\n  currentChannel: GroupChannel;\n  showSettings: boolean;\n  channelListQuery: GroupChannelListQuery;\n  currentUserId: string;\n  channelListDispatcher: CustomUseReducerDispatcher;\n  channelSource: GroupChannelListQuerySb;\n}\n\ninterface ChannelListStoreInterface {\n  initialized: boolean;\n  loading: boolean;\n  allChannels: GroupChannel[];\n  currentChannel: GroupChannel;\n  showSettings: boolean;\n  channelListQuery: GroupChannelListQuery;\n  currentUserId: string;\n  disableAutoSelect: boolean;\n}\n\nconst ChannelListContext = React.createContext<ChannelListProviderInterface | null>({\n  disableUserProfile: true,\n  allowProfileEdit: true,\n  onBeforeCreateChannel: null,\n  onThemeChange: null,\n  onProfileEditSuccess: null,\n  onChannelSelect: null,\n  queries: {},\n  className: null,\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  showSettings: false,\n  channelListQuery: {},\n  currentUserId: null,\n  channelListDispatcher: null,\n  channelSource: null,\n  typingChannels: [],\n});\n\nconst ChannelListProvider: React.FC<ChannelListProviderProps> = (props: ChannelListProviderProps) => {\n  // destruct props\n  const {\n    children,\n    className,\n    disableUserProfile,\n    allowProfileEdit,\n    queries,\n    onProfileEditSuccess,\n    onThemeChange,\n    onBeforeCreateChannel,\n    sortChannelList,\n    disableAutoSelect,\n    isTypingIndicatorEnabled = null,\n    isMessageReceiptStatusEnabled = null,\n  } = props;\n  const onChannelSelect = props?.onChannelSelect || noop;\n  // fetch store from <SendbirdProvider />\n  const globalStore = useSendbirdStateContext();\n  const { config, stores } = globalStore;\n  const { sdkStore } = stores;\n  const { pubSub, logger } = config;\n  const {\n    isTypingIndicatorEnabledOnChannelList,\n    isMessageReceiptStatusEnabledOnChannelList,\n  } = config;\n  const sdk = sdkStore?.sdk as SendbirdGroupChat;\n\n  // derive some variables\n  // enable if it is true atleast once(both are flase by default)\n  const userDefinedDisableUserProfile = disableUserProfile || config?.disableUserProfile;\n  const userDefinedRenderProfile = config?.renderUserProfile;\n  const enableEditProfile = allowProfileEdit || config?.allowProfileEdit;\n\n  const userFilledChannelListQuery = queries?.channelListQuery;\n  const userFilledApplicationUserListQuery = queries?.applicationUserListQuery;\n\n  const sdkIntialized = sdkStore?.initialized;\n\n  const [channelListStore, channelListDispatcher] = useReducer(\n    channelListReducers,\n    channelListInitialState,\n  ) as [ChannelListStoreInterface, CustomUseReducerDispatcher];\n  const { loading, currentChannel } = channelListStore;\n\n  const [channelSource, setChannelSource] = useState<GroupChannelListQuerySb>();\n  const [sdkChannelHandlerId, setSdkChannelHandlerId] = useState<string | null>(null);\n  const [typingHandlerId, setTypingHandlerId] = useState<string | null>(null);\n  const [typingChannels, setTypingChannels] = useState<Array<GroupChannel>>([]);\n\n  useEffect(() => {\n    const subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return () => {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n\n  useEffect(() => {\n    setSdkChannelHandlerId(uuidv4);\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk,\n        sdkChannelHandlerId,\n        channelListDispatcher,\n        setChannelSource,\n        onChannelSelect,\n        userFilledChannelListQuery,\n        logger,\n        sortChannelList,\n        disableAutoSelect,\n      });\n    } else {\n      logger.info('ChannelList: Removing channelHandlers');\n      // remove previous channelHandlers\n      if (sdk?.groupChannel?.removeGroupChannelHandler) {\n        sdk.groupChannel.removeGroupChannelHandler(sdkChannelHandlerId);\n      }\n      // remove channelSource\n      setChannelSource(null);\n      // cleanup\n      channelListDispatcher({\n        type: channelListActions.RESET_CHANNEL_LIST,\n        payload: null,\n      });\n    }\n    return () => {\n      logger.info('ChannelList: Removing channelHandlers');\n      if (sdk?.groupChannel?.removeGroupChannelHandler) {\n        sdk?.groupChannel?.removeGroupChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n\n  useEffect(() => {\n    if (sdk?.groupChannel?.addGroupChannelHandler) {\n      const handlerId = uuidv4()\n      const handler = new GroupChannelHandler({\n        onTypingStatusUpdated: (channel) => {\n          const typingMemberCount = channel?.getTypingUsers()?.length\n          const channelList = typingChannels.filter(ch => ch.url !== channel.url)\n          if (typingMemberCount > 0) {\n            setTypingChannels([...channelList, channel])\n          } else {\n            setTypingChannels(channelList)\n          }\n        },\n        onUnreadMemberStatusUpdated(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n        },\n        onUndeliveredMemberStatusUpdated(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n        },\n        onMessageUpdated(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n          sdk.groupChannel.getChannelWithoutCache(channel.url)\n            .then((ch) => {\n              channelListDispatcher({\n                type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n                payload: ch,\n              });\n            });\n        },\n        onMentionReceived(channel) {\n          channelListDispatcher({\n            type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n            payload: channel,\n          });\n          sdk.groupChannel.getChannelWithoutCache(channel.url)\n            .then((ch) => {\n              channelListDispatcher({\n                type: channelListActions.ON_LAST_MESSAGE_UPDATED,\n                payload: ch,\n              });\n            });\n        },\n      });\n      sdk?.groupChannel?.addGroupChannelHandler(handlerId, handler)\n      setTypingHandlerId(handlerId)\n    }\n    return () => {\n      if (sdk?.groupChannel?.removeGroupChannelHandler) {\n        sdk.groupChannel.removeGroupChannelHandler(typingHandlerId);\n      }\n    }\n  }, [sdk?.currentUser?.userId]);\n\n  const queries_ = useMemo(() => {\n    return {\n      applicationUserListQuery: userFilledApplicationUserListQuery,\n      channelListQuery: userFilledChannelListQuery,\n    };\n  }, [\n    userFilledApplicationUserListQuery,\n    userFilledChannelListQuery,\n  ])\n\n  const { allChannels } = channelListStore;\n  const sortedChannels = (sortChannelList && typeof sortChannelList === 'function')\n    ? sortChannelList(allChannels)\n    : allChannels;\n\n  if (sortedChannels.length !== allChannels.length) {\n    const warning = `ChannelList: You have removed/added extra channels on sortChannelList\n      this could cause unexpected problems`;\n    // eslint-disable-next-line no-console\n    console.warn(warning, { before: allChannels, after: sortedChannels });\n    logger.warning(warning, { before: allChannels, after: sortedChannels });\n  }\n\n  useEffect(() => {\n    if (!sdk || !sdk.groupChannel || !currentChannel || !currentChannel?.url) {\n      return;\n    }\n    sdk.groupChannel.getChannel(currentChannel.url).then((groupChannel) => {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel?.url]);\n\n  return (\n    <ChannelListContext.Provider value={{\n      className,\n      disableUserProfile,\n      queries: queries_,\n      onProfileEditSuccess,\n      onThemeChange,\n      onBeforeCreateChannel,\n      onChannelSelect,\n      sortChannelList,\n      loading,\n      allowProfileEdit: enableEditProfile,\n      channelListDispatcher,\n      channelSource,\n      ...channelListStore,\n      allChannels: sortedChannels,\n      typingChannels,\n      isTypingIndicatorEnabled: (isTypingIndicatorEnabled !== null) ? isTypingIndicatorEnabled : isTypingIndicatorEnabledOnChannelList,\n      isMessageReceiptStatusEnabled: (isMessageReceiptStatusEnabled !== null) ? isMessageReceiptStatusEnabled : isMessageReceiptStatusEnabledOnChannelList,\n    }}>\n      <UserProfileProvider\n        disableUserProfile={userDefinedDisableUserProfile}\n        renderUserProfile={userDefinedRenderProfile}\n      >\n        <div className={`sendbird-channel-list ${className}`}>\n          {children}\n        </div>\n      </UserProfileProvider>\n    </ChannelListContext.Provider>\n  );\n};\n\nfunction useChannelListContext(): ChannelListProviderInterface {\n  const context: ChannelListProviderInterface = useContext(ChannelListContext);\n  return context;\n}\n\nexport {\n  ChannelListProvider,\n  useChannelListContext,\n};\n"],"names":["RESET_CHANNEL_LIST","CREATE_CHANNEL","LEAVE_CHANNEL_SUCCESS","SET_CURRENT_CHANNEL","SHOW_CHANNEL_SETTINGS","HIDE_CHANNEL_SETTINGS","FETCH_CHANNELS_START","FETCH_CHANNELS_SUCCESS","FETCH_CHANNELS_FAILURE","INIT_CHANNELS_START","INIT_CHANNELS_SUCCESS","INIT_CHANNELS_FAILURE","ON_USER_JOINED","ON_CHANNEL_DELETED","ON_LAST_MESSAGE_UPDATED","ON_USER_LEFT","ON_CHANNEL_CHANGED","ON_CHANNEL_ARCHIVED","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_READ_RECEIPT_UPDATED","ON_DELIVERY_RECEIPT_UPDATED","CHANNEL_REPLACED_TO_TOP","CHANNEL_LIST_PARAMS_UPDATED","DELIVERY_RECIPT","createEventHandler","sdk","sdkChannelHandlerId","channelListDispatcher","logger","ChannelHandler","GroupChannelHandler","onChannelChanged","channel","info","type","channelActions","payload","onChannelDeleted","channelUrl","onUserJoined","lastMessage","onUserBanned","user","currentUser","userId","isMe","onUserLeft","leftUser","onReadStatus","onDeliveryReceiptUpdated","onMessageUpdated","message","isEqual","onChannelHidden","onChannelFrozen","onChannelUnfrozen","groupChannel","addGroupChannelHandler","createChannelListQuery","userFilledChannelListQuery","param","includeEmpty","limit","order","Object","keys","forEach","key","channelListQuery","createMyGroupChannelListQuery","setupChannelList","setChannelSource","onChannelSelect","sortChannelList","disableAutoSelect","warning","currentUserId","hasNext","next","then","channelList","sortedChannelList","canSetMarkAsDelivered","appInfo","premiumFeatureList","find","feature","c","idx","setTimeout","markAsDelivered","catch","err","error","pubSubHandleRemover","subscriber","s","remove","pubSubHandler","pubSub","Map","set","topics","subscribe","msg","updatedChannel","messageId","url","initialized","loading","allChannels","currentChannel","showSettings","reducer","state","action","actions","initialState","length","currentChannels","map","filteredChannels","filter","filterChannelListParams","getChannelsWithUpsertedChannel","ch","nextChannel","unreadMessageCount","currentUnreadCount","isFrozen","ChannelListContext","React","createContext","disableUserProfile","allowProfileEdit","onBeforeCreateChannel","onThemeChange","onProfileEditSuccess","queries","className","channelSource","typingChannels","ChannelListProvider","props","children","_b","isTypingIndicatorEnabled","_c","isMessageReceiptStatusEnabled","noop","globalStore","useSendbirdStateContext","config","stores","sdkStore","isTypingIndicatorEnabledOnChannelList","isMessageReceiptStatusEnabledOnChannelList","userDefinedDisableUserProfile","userDefinedRenderProfile","renderUserProfile","enableEditProfile","userFilledApplicationUserListQuery","applicationUserListQuery","sdkIntialized","_d","useReducer","channelListReducers","channelListInitialState","channelListStore","_e","useState","_f","setSdkChannelHandlerId","_g","typingHandlerId","setTypingHandlerId","_h","setTypingChannels","useEffect","uuidv4","removeGroupChannelHandler","channelListActions","handlerId","handler","onTypingStatusUpdated","typingMemberCount","getTypingUsers","onUnreadMemberStatusUpdated","onUndeliveredMemberStatusUpdated","getChannelWithoutCache","onMentionReceived","queries_","useMemo","sortedChannels","console","warn","before","after","getChannel","useChannelListContext","context","useContext"],"mappings":"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"}